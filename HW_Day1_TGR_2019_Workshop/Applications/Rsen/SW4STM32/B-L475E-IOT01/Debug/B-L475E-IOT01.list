
B-L475E-IOT01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008798  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b30  08008928  08008928  00018928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009458  08009458  00020700  2**0
                  CONTENTS
  4 .ARM          00000008  08009458  08009458  00019458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009460  08009460  00020700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009460  08009460  00019460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009468  08009468  00019468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000700  20000000  08009470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000700  08009b70  00020700  2**2
                  ALLOC
 10 ._user_heap_stack 00017000  20000850  08009b70  00020850  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020700  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001090d  00000000  00000000  00020730  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00023206  00000000  00000000  0003103d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00004411  00000000  00000000  00054243  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001238  00000000  00000000  00058658  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001440  00000000  00000000  00059890  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000122fd  00000000  00000000  0005acd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00029959  00000000  00000000  0006cfcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000f41ca  00000000  00000000  00096926  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007c  00000000  00000000  0018aaf0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042f8  00000000  00000000  0018ab6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000700 	.word	0x20000700
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800890c 	.word	0x0800890c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000704 	.word	0x20000704
 80001cc:	0800890c 	.word	0x0800890c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97a 	b.w	8000eac <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000eb4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000eb6:	e003      	b.n	8000ec0 <LoopCopyDataInit>

08000eb8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000eba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ebc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ebe:	3104      	adds	r1, #4

08000ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ec0:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ec4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ec6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ec8:	d3f6      	bcc.n	8000eb8 <CopyDataInit>
	ldr	r2, =_sbss
 8000eca:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ecc:	e002      	b.n	8000ed4 <LoopFillZerobss>

08000ece <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ece:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ed0:	f842 3b04 	str.w	r3, [r2], #4

08000ed4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <LoopForever+0x16>)
	cmp	r2, r3
 8000ed6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ed8:	d3f9      	bcc.n	8000ece <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000eda:	f003 fb19 	bl	8004510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ede:	f005 f845 	bl	8005f6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ee2:	f000 f979 	bl	80011d8 <main>

08000ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ee6:	e7fe      	b.n	8000ee6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ee8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000eec:	08009470 	.word	0x08009470
	ldr	r0, =_sdata
 8000ef0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ef4:	20000700 	.word	0x20000700
	ldr	r2, =_sbss
 8000ef8:	20000700 	.word	0x20000700
	ldr	r3, = _ebss
 8000efc:	20000850 	.word	0x20000850

08000f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <ADC1_2_IRQHandler>

08000f02 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8000f02:	b510      	push	{r4, lr}
 8000f04:	460c      	mov	r4, r1
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 8000f06:	f000 f9c3 	bl	8001290 <__io_getchar>
 8000f0a:	7020      	strb	r0, [r4, #0]

	return 1;
}
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	bd10      	pop	{r4, pc}

08000f10 <_write>:

int _write(int file, char *ptr, int len)
{
 8000f10:	b570      	push	{r4, r5, r6, lr}
 8000f12:	460e      	mov	r6, r1
 8000f14:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f16:	460c      	mov	r4, r1
 8000f18:	1ba3      	subs	r3, r4, r6
 8000f1a:	429d      	cmp	r5, r3
 8000f1c:	dc01      	bgt.n	8000f22 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8000f1e:	4628      	mov	r0, r5
 8000f20:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8000f22:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000f26:	f000 f99f 	bl	8001268 <__io_putchar>
 8000f2a:	e7f5      	b.n	8000f18 <_write+0x8>

08000f2c <_sbrk>:

caddr_t _sbrk(int incr)
{
 8000f2c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <_sbrk+0x2c>)
 8000f30:	6819      	ldr	r1, [r3, #0]
{
 8000f32:	4602      	mov	r2, r0
	if (heap_end == 0)
 8000f34:	b909      	cbnz	r1, 8000f3a <_sbrk+0xe>
		heap_end = &end;
 8000f36:	4909      	ldr	r1, [pc, #36]	; (8000f5c <_sbrk+0x30>)
 8000f38:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8000f3a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8000f3c:	4669      	mov	r1, sp
 8000f3e:	4402      	add	r2, r0
 8000f40:	428a      	cmp	r2, r1
 8000f42:	d906      	bls.n	8000f52 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000f44:	f005 f80c 	bl	8005f60 <__errno>
 8000f48:	230c      	movs	r3, #12
 8000f4a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8000f52:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8000f54:	bd08      	pop	{r3, pc}
 8000f56:	bf00      	nop
 8000f58:	2000071c 	.word	0x2000071c
 8000f5c:	20000850 	.word	0x20000850

08000f60 <_close>:

int _close(int file)
{
	return -1;
}
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	4770      	bx	lr

08000f66 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000f66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f6a:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	4770      	bx	lr

08000f70 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000f70:	2001      	movs	r0, #1
 8000f72:	4770      	bx	lr

08000f74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000f74:	2000      	movs	r0, #0
 8000f76:	4770      	bx	lr

08000f78 <Serial_Scanf>:
  */
uint32_t Serial_Scanf(uint32_t value)
{
  uint16_t tmp = 0;
  
  tmp = getchar();
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <Serial_Scanf+0x34>)
{
 8000f7a:	b510      	push	{r4, lr}
 8000f7c:	4604      	mov	r4, r0
  tmp = getchar();
 8000f7e:	6818      	ldr	r0, [r3, #0]
 8000f80:	6841      	ldr	r1, [r0, #4]
 8000f82:	684b      	ldr	r3, [r1, #4]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	604b      	str	r3, [r1, #4]
 8000f8a:	da0a      	bge.n	8000fa2 <Serial_Scanf+0x2a>
 8000f8c:	f005 fd0e 	bl	80069ac <__srget_r>
 8000f90:	b280      	uxth	r0, r0
  
  if (tmp > value)
 8000f92:	42a0      	cmp	r0, r4
 8000f94:	d904      	bls.n	8000fa0 <Serial_Scanf+0x28>
  {
    printf("\n\r  !!! Please enter valid number between 0 and %lu \n", value);
 8000f96:	4621      	mov	r1, r4
 8000f98:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <Serial_Scanf+0x38>)
 8000f9a:	f005 fc8b 	bl	80068b4 <iprintf>
    return 0xFF;
 8000f9e:	20ff      	movs	r0, #255	; 0xff
  }
  return tmp;
}
 8000fa0:	bd10      	pop	{r4, pc}
  tmp = getchar();
 8000fa2:	680b      	ldr	r3, [r1, #0]
 8000fa4:	1c5a      	adds	r2, r3, #1
 8000fa6:	600a      	str	r2, [r1, #0]
 8000fa8:	7818      	ldrb	r0, [r3, #0]
 8000faa:	e7f2      	b.n	8000f92 <Serial_Scanf+0x1a>
 8000fac:	20000530 	.word	0x20000530
 8000fb0:	080089e9 	.word	0x080089e9

08000fb4 <Proximity_Test>:
{
 8000fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fb8:	ed2d 8b02 	vpush	{d8}
 8000fbc:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
  int16_t pDataXYZ[3] = {0};
 8000fc0:	2400      	movs	r4, #0
  printf("Press the button\n\r");
 8000fc2:	4870      	ldr	r0, [pc, #448]	; (8001184 <Proximity_Test+0x1d0>)
  int16_t pDataXYZ[3] = {0};
 8000fc4:	9461      	str	r4, [sp, #388]	; 0x184
 8000fc6:	f8ad 4188 	strh.w	r4, [sp, #392]	; 0x188
  int16_t pDataXYZ2[3] = {0};
 8000fca:	9463      	str	r4, [sp, #396]	; 0x18c
 8000fcc:	f8ad 4190 	strh.w	r4, [sp, #400]	; 0x190
  int16_t pDataXYZ3[3] = {0};
 8000fd0:	9465      	str	r4, [sp, #404]	; 0x194
 8000fd2:	f8ad 4198 	strh.w	r4, [sp, #408]	; 0x198
  printf("Press the button\n\r");
 8000fd6:	f005 fc6d 	bl	80068b4 <iprintf>
  printf("Press 1 to get Pressure\n\r");
 8000fda:	486b      	ldr	r0, [pc, #428]	; (8001188 <Proximity_Test+0x1d4>)
 8000fdc:	f005 fc6a 	bl	80068b4 <iprintf>
  printf("Press 2 to get Humidity\n\r");
 8000fe0:	486a      	ldr	r0, [pc, #424]	; (800118c <Proximity_Test+0x1d8>)
 8000fe2:	f005 fc67 	bl	80068b4 <iprintf>
  printf("Press 3 to get Temperature\n\r");
 8000fe6:	486a      	ldr	r0, [pc, #424]	; (8001190 <Proximity_Test+0x1dc>)
 8000fe8:	f005 fc64 	bl	80068b4 <iprintf>
  printf("Press 4 to get Accelero\n\r");
 8000fec:	4869      	ldr	r0, [pc, #420]	; (8001194 <Proximity_Test+0x1e0>)
 8000fee:	f005 fc61 	bl	80068b4 <iprintf>
  printf("Press 5 to get Gyro\n\r");
 8000ff2:	4869      	ldr	r0, [pc, #420]	; (8001198 <Proximity_Test+0x1e4>)
 8000ff4:	f005 fc5e 	bl	80068b4 <iprintf>
  printf("Press 6 to get Magneto\n\r");
 8000ff8:	4868      	ldr	r0, [pc, #416]	; (800119c <Proximity_Test+0x1e8>)
 8000ffa:	f005 fc5b 	bl	80068b4 <iprintf>
  printf("Press 7 to get Proximity\n\r");
 8000ffe:	4868      	ldr	r0, [pc, #416]	; (80011a0 <Proximity_Test+0x1ec>)
 8001000:	f005 fc58 	bl	80068b4 <iprintf>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2501      	movs	r5, #1
  uint16_t vl53l0x_id = 0; 
 8001006:	f8ad 4182 	strh.w	r4, [sp, #386]	; 0x182
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 800100a:	2640      	movs	r6, #64	; 0x40
  SENSOR_IO_Init();  
 800100c:	f002 fe5e 	bl	8003ccc <SENSOR_IO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001010:	2302      	movs	r3, #2
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8001012:	a967      	add	r1, sp, #412	; 0x19c
 8001014:	4863      	ldr	r0, [pc, #396]	; (80011a4 <Proximity_Test+0x1f0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001016:	936a      	str	r3, [sp, #424]	; 0x1a8
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 8001018:	9667      	str	r6, [sp, #412]	; 0x19c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	9568      	str	r5, [sp, #416]	; 0x1a0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101c:	9569      	str	r5, [sp, #420]	; 0x1a4
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 800101e:	f003 fb49 	bl	80046b4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_SET);
 8001022:	462a      	mov	r2, r5
 8001024:	4631      	mov	r1, r6
 8001026:	485f      	ldr	r0, [pc, #380]	; (80011a4 <Proximity_Test+0x1f0>)
 8001028:	f003 fc20 	bl	800486c <HAL_GPIO_WritePin>
  HAL_Delay(1000);  
 800102c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001030:	f003 faca 	bl	80045c8 <HAL_Delay>
  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 8001034:	4621      	mov	r1, r4
  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 8001036:	4c5c      	ldr	r4, [pc, #368]	; (80011a8 <Proximity_Test+0x1f4>)
  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 8001038:	2263      	movs	r2, #99	; 0x63
 800103a:	a867      	add	r0, sp, #412	; 0x19c
 800103c:	f004 ffc5 	bl	8005fca <memset>
  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 8001040:	a967      	add	r1, sp, #412	; 0x19c
 8001042:	4620      	mov	r0, r4
 8001044:	f000 f944 	bl	80012d0 <VL53L0X_GetDeviceInfo>
 8001048:	2800      	cmp	r0, #0
 800104a:	d15d      	bne.n	8001108 <Proximity_Test+0x154>
    if (VL53L0X_ERROR_NONE == VL53L0X_RdWord(&Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, (uint16_t *) &vl53l0x_id))
 800104c:	f50d 72c1 	add.w	r2, sp, #386	; 0x182
 8001050:	21c0      	movs	r1, #192	; 0xc0
 8001052:	4620      	mov	r0, r4
 8001054:	f002 fc2e 	bl	80038b4 <VL53L0X_RdWord>
 8001058:	2800      	cmp	r0, #0
 800105a:	d153      	bne.n	8001104 <Proximity_Test+0x150>
      if (vl53l0x_id == VL53L0X_ID)
 800105c:	f8bd 2182 	ldrh.w	r2, [sp, #386]	; 0x182
 8001060:	f64e 63aa 	movw	r3, #61098	; 0xeeaa
 8001064:	429a      	cmp	r2, r3
 8001066:	d111      	bne.n	800108c <Proximity_Test+0xd8>
        if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&Dev))
 8001068:	4620      	mov	r0, r4
 800106a:	f000 fb11 	bl	8001690 <VL53L0X_DataInit>
 800106e:	2800      	cmp	r0, #0
 8001070:	d144      	bne.n	80010fc <Proximity_Test+0x148>
          SetupSingleShot(Dev);
 8001072:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8001076:	f104 0110 	add.w	r1, r4, #16
 800107a:	4668      	mov	r0, sp
          Dev.Present = 1;
 800107c:	f8c4 5164 	str.w	r5, [r4, #356]	; 0x164
          SetupSingleShot(Dev);
 8001080:	f004 ff98 	bl	8005fb4 <memcpy>
 8001084:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001088:	f002 fc98 	bl	80039bc <SetupSingleShot>
  BSP_TSENSOR_Init();
 800108c:	f002 ff12 	bl	8003eb4 <BSP_TSENSOR_Init>
  BSP_PSENSOR_Init();
 8001090:	f002 fef4 	bl	8003e7c <BSP_PSENSOR_Init>
  BSP_HSENSOR_Init();
 8001094:	f002 fea8 	bl	8003de8 <BSP_HSENSOR_Init>
  BSP_ACCELERO_Init();
 8001098:	f002 fe6a 	bl	8003d70 <BSP_ACCELERO_Init>
  BSP_GYRO_Init();
 800109c:	f002 fe86 	bl	8003dac <BSP_GYRO_Init>
  BSP_MAGNETO_Init();
 80010a0:	f002 febe 	bl	8003e20 <BSP_MAGNETO_Init>
  VL53L0X_PerformSingleRangingMeasurement(&Dev, &RangingMeasurementData);
 80010a4:	4e40      	ldr	r6, [pc, #256]	; (80011a8 <Proximity_Test+0x1f4>)
    default : printf("no sensor\n\r");
 80010a6:	4d41      	ldr	r5, [pc, #260]	; (80011ac <Proximity_Test+0x1f8>)
    case '7' :printf("DISTANCE is = %d mm \n\r", prox_value);
 80010a8:	4f41      	ldr	r7, [pc, #260]	; (80011b0 <Proximity_Test+0x1fc>)
    ret = Serial_Scanf(255);
 80010aa:	20ff      	movs	r0, #255	; 0xff
 80010ac:	f7ff ff64 	bl	8000f78 <Serial_Scanf>
  VL53L0X_PerformSingleRangingMeasurement(&Dev, &RangingMeasurementData);
 80010b0:	a967      	add	r1, sp, #412	; 0x19c
    ret = Serial_Scanf(255);
 80010b2:	4604      	mov	r4, r0
  VL53L0X_PerformSingleRangingMeasurement(&Dev, &RangingMeasurementData);
 80010b4:	4630      	mov	r0, r6
 80010b6:	f000 fd00 	bl	8001aba <VL53L0X_PerformSingleRangingMeasurement>
  return RangingMeasurementData.RangeMilliMeter;  
 80010ba:	f8bd 81a4 	ldrh.w	r8, [sp, #420]	; 0x1a4
    Pressure_Value = BSP_PSENSOR_ReadPressure();
 80010be:	f002 fef1 	bl	8003ea4 <BSP_PSENSOR_ReadPressure>
 80010c2:	ee10 aa10 	vmov	sl, s0
    tv = BSP_TSENSOR_ReadTemp();
 80010c6:	f002 ff07 	bl	8003ed8 <BSP_TSENSOR_ReadTemp>
 80010ca:	ee10 9a10 	vmov	r9, s0
    hv = BSP_HSENSOR_ReadHumidity();
 80010ce:	f002 fe9f 	bl	8003e10 <BSP_HSENSOR_ReadHumidity>
    BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 80010d2:	a861      	add	r0, sp, #388	; 0x184
    hv = BSP_HSENSOR_ReadHumidity();
 80010d4:	eeb0 8a40 	vmov.f32	s16, s0
    BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 80010d8:	f002 fe5e 	bl	8003d98 <BSP_ACCELERO_AccGetXYZ>
    BSP_MAGNETO_GetXYZ(pDataXYZ2);
 80010dc:	a863      	add	r0, sp, #396	; 0x18c
 80010de:	f002 fec3 	bl	8003e68 <BSP_MAGNETO_GetXYZ>
    BSP_GYRO_GetXYZ(pDataXYZ3);
 80010e2:	a865      	add	r0, sp, #404	; 0x194
 80010e4:	f002 fe76 	bl	8003dd4 <BSP_GYRO_GetXYZ>
    switch(ret) {
 80010e8:	f1a4 0031 	sub.w	r0, r4, #49	; 0x31
 80010ec:	2806      	cmp	r0, #6
 80010ee:	d844      	bhi.n	800117a <Proximity_Test+0x1c6>
 80010f0:	e8df f000 	tbb	[pc, r0]
 80010f4:	261f150c 	.word	0x261f150c
 80010f8:	3830      	.short	0x3830
 80010fa:	40          	.byte	0x40
 80010fb:	00          	.byte	0x00
          printf("VL53L0X Time of Flight Failed to send its ID!\n");
 80010fc:	482d      	ldr	r0, [pc, #180]	; (80011b4 <Proximity_Test+0x200>)
    printf("VL53L0X Time of Flight Failed to get infos!\n");
 80010fe:	f005 fc4d 	bl	800699c <puts>
 8001102:	e7c3      	b.n	800108c <Proximity_Test+0xd8>
      printf("VL53L0X Time of Flight Failed to Initialize!\n");
 8001104:	482c      	ldr	r0, [pc, #176]	; (80011b8 <Proximity_Test+0x204>)
 8001106:	e7fa      	b.n	80010fe <Proximity_Test+0x14a>
    printf("VL53L0X Time of Flight Failed to get infos!\n");
 8001108:	482c      	ldr	r0, [pc, #176]	; (80011bc <Proximity_Test+0x208>)
 800110a:	e7f8      	b.n	80010fe <Proximity_Test+0x14a>
    case '1' :printf("PRESSURE is = %.2f mBar\n\r", Pressure_Value);
 800110c:	4650      	mov	r0, sl
 800110e:	f7ff fa1b 	bl	8000548 <__aeabi_f2d>
 8001112:	4602      	mov	r2, r0
 8001114:	482a      	ldr	r0, [pc, #168]	; (80011c0 <Proximity_Test+0x20c>)
 8001116:	460b      	mov	r3, r1
    case '3' :printf("TEMPERATURE is = %.2f \370C\n\r", tv);
 8001118:	f005 fbcc 	bl	80068b4 <iprintf>
    			break;
 800111c:	e7c5      	b.n	80010aa <Proximity_Test+0xf6>
    hv = BSP_HSENSOR_ReadHumidity();
 800111e:	eefc 7ac8 	vcvt.u32.f32	s15, s16
    case '2' :printf("HUMIDITY is = %d %%\n\r", hv);
 8001122:	4828      	ldr	r0, [pc, #160]	; (80011c4 <Proximity_Test+0x210>)
    hv = BSP_HSENSOR_ReadHumidity();
 8001124:	edcd 7a5f 	vstr	s15, [sp, #380]	; 0x17c
    case '2' :printf("HUMIDITY is = %d %%\n\r", hv);
 8001128:	f8bd 117c 	ldrh.w	r1, [sp, #380]	; 0x17c
    case '7' :printf("DISTANCE is = %d mm \n\r", prox_value);
 800112c:	f005 fbc2 	bl	80068b4 <iprintf>
    			break;
 8001130:	e7bb      	b.n	80010aa <Proximity_Test+0xf6>
    case '3' :printf("TEMPERATURE is = %.2f \370C\n\r", tv);
 8001132:	4648      	mov	r0, r9
 8001134:	f7ff fa08 	bl	8000548 <__aeabi_f2d>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4822      	ldr	r0, [pc, #136]	; (80011c8 <Proximity_Test+0x214>)
 800113e:	e7eb      	b.n	8001118 <Proximity_Test+0x164>
    case '4' :printf("ACCELERO xyz = %d, %d, %d \n\r", pDataXYZ[0], pDataXYZ[1], pDataXYZ[2]);
 8001140:	f9bd 3188 	ldrsh.w	r3, [sp, #392]	; 0x188
 8001144:	f9bd 2186 	ldrsh.w	r2, [sp, #390]	; 0x186
 8001148:	f9bd 1184 	ldrsh.w	r1, [sp, #388]	; 0x184
 800114c:	481f      	ldr	r0, [pc, #124]	; (80011cc <Proximity_Test+0x218>)
    case '6' :printf("MAGNETO xyz = %d, %d, %d \n\r", pDataXYZ3[0], pDataXYZ3[1], pDataXYZ3[2]);
 800114e:	f005 fbb1 	bl	80068b4 <iprintf>
    			break;
 8001152:	e7aa      	b.n	80010aa <Proximity_Test+0xf6>
    case '5' :printf("GYRO xyz = %d, %d, %d \n\r", pDataXYZ2[0], pDataXYZ2[1], pDataXYZ2[2]);
 8001154:	f9bd 3190 	ldrsh.w	r3, [sp, #400]	; 0x190
 8001158:	f9bd 218e 	ldrsh.w	r2, [sp, #398]	; 0x18e
 800115c:	f9bd 118c 	ldrsh.w	r1, [sp, #396]	; 0x18c
 8001160:	481b      	ldr	r0, [pc, #108]	; (80011d0 <Proximity_Test+0x21c>)
 8001162:	e7f4      	b.n	800114e <Proximity_Test+0x19a>
    case '6' :printf("MAGNETO xyz = %d, %d, %d \n\r", pDataXYZ3[0], pDataXYZ3[1], pDataXYZ3[2]);
 8001164:	f9bd 3198 	ldrsh.w	r3, [sp, #408]	; 0x198
 8001168:	f9bd 2196 	ldrsh.w	r2, [sp, #406]	; 0x196
 800116c:	f9bd 1194 	ldrsh.w	r1, [sp, #404]	; 0x194
 8001170:	4818      	ldr	r0, [pc, #96]	; (80011d4 <Proximity_Test+0x220>)
 8001172:	e7ec      	b.n	800114e <Proximity_Test+0x19a>
    case '7' :printf("DISTANCE is = %d mm \n\r", prox_value);
 8001174:	4641      	mov	r1, r8
 8001176:	4638      	mov	r0, r7
 8001178:	e7d8      	b.n	800112c <Proximity_Test+0x178>
    default : printf("no sensor\n\r");
 800117a:	4628      	mov	r0, r5
 800117c:	f005 fb9a 	bl	80068b4 <iprintf>
    			break;
 8001180:	e793      	b.n	80010aa <Proximity_Test+0xf6>
 8001182:	bf00      	nop
 8001184:	08008a1f 	.word	0x08008a1f
 8001188:	08008a32 	.word	0x08008a32
 800118c:	08008a4c 	.word	0x08008a4c
 8001190:	08008a66 	.word	0x08008a66
 8001194:	08008a83 	.word	0x08008a83
 8001198:	08008a9d 	.word	0x08008a9d
 800119c:	08008ab3 	.word	0x08008ab3
 80011a0:	08008acc 	.word	0x08008acc
 80011a4:	48000800 	.word	0x48000800
 80011a8:	20000000 	.word	0x20000000
 80011ac:	08008c22 	.word	0x08008c22
 80011b0:	08008c0b 	.word	0x08008c0b
 80011b4:	08008ae7 	.word	0x08008ae7
 80011b8:	08008b15 	.word	0x08008b15
 80011bc:	08008b42 	.word	0x08008b42
 80011c0:	08008b6e 	.word	0x08008b6e
 80011c4:	08008b88 	.word	0x08008b88
 80011c8:	08008b9e 	.word	0x08008b9e
 80011cc:	08008bb9 	.word	0x08008bb9
 80011d0:	08008bd6 	.word	0x08008bd6
 80011d4:	08008bef 	.word	0x08008bef

080011d8 <main>:
{
 80011d8:	b500      	push	{lr}
 80011da:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 80011dc:	f003 f9d6 	bl	800458c <HAL_Init>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011e0:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011e2:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80011e4:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011e6:	2301      	movs	r3, #1
 80011e8:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011ea:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011ec:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80011ee:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011f0:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80011f2:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80011f4:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 40;
 80011f6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f8:	2202      	movs	r2, #2
  RCC_OscInitStruct.PLL.PLLP = 7;
 80011fa:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011fc:	2404      	movs	r4, #4
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fe:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001200:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001202:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 7;
 8001204:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001206:	9414      	str	r4, [sp, #80]	; 0x50
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001208:	f004 f884 	bl	8005314 <HAL_RCC_OscConfig>
 800120c:	b100      	cbz	r0, 8001210 <main+0x38>
 800120e:	e7fe      	b.n	800120e <main+0x36>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001210:	210f      	movs	r1, #15
 8001212:	2303      	movs	r3, #3
 8001214:	e88d 000a 	stmia.w	sp, {r1, r3}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001218:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;  
 800121a:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 800121c:	9004      	str	r0, [sp, #16]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800121e:	4621      	mov	r1, r4
 8001220:	4668      	mov	r0, sp
 8001222:	f004 fa9d 	bl	8005760 <HAL_RCC_ClockConfig>
 8001226:	4604      	mov	r4, r0
 8001228:	b100      	cbz	r0, 800122c <main+0x54>
 800122a:	e7fe      	b.n	800122a <main+0x52>
  BSP_LED_Init(LED2); 
 800122c:	f002 fcaa 	bl	8003b84 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8001230:	4621      	mov	r1, r4
 8001232:	4620      	mov	r0, r4
 8001234:	f002 fcc8 	bl	8003bc8 <BSP_PB_Init>
  hDiscoUart.Instance = DISCOVERY_COM1; 
 8001238:	4909      	ldr	r1, [pc, #36]	; (8001260 <main+0x88>)
  hDiscoUart.Init.BaudRate = 9600;
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <main+0x8c>)
  hDiscoUart.Init.WordLength = UART_WORDLENGTH_8B;
 800123c:	608c      	str	r4, [r1, #8]
  hDiscoUart.Init.BaudRate = 9600;
 800123e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001242:	e881 000c 	stmia.w	r1, {r2, r3}
  BSP_COM_Init(COM1, &hDiscoUart);
 8001246:	4620      	mov	r0, r4
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 8001248:	230c      	movs	r3, #12
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 800124a:	60cc      	str	r4, [r1, #12]
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 800124c:	610c      	str	r4, [r1, #16]
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 800124e:	614b      	str	r3, [r1, #20]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001250:	618c      	str	r4, [r1, #24]
  hDiscoUart.Init.OverSampling = UART_OVERSAMPLING_16;
 8001252:	61cc      	str	r4, [r1, #28]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001254:	620c      	str	r4, [r1, #32]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001256:	624c      	str	r4, [r1, #36]	; 0x24
  BSP_COM_Init(COM1, &hDiscoUart);
 8001258:	f002 fcf4 	bl	8003c44 <BSP_COM_Init>
    Proximity_Test();
 800125c:	f7ff feaa 	bl	8000fb4 <Proximity_Test>
 8001260:	20000784 	.word	0x20000784
 8001264:	40013800 	.word	0x40013800

08001268 <__io_putchar>:
  * @brief Retargets the C library msg_info function to the USART.
  * @param None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800126a:	ac02      	add	r4, sp, #8
  /* Place your implementation of fputc here */
  /* e.g. write a character to the serial port and Loop until the end of transmission */
  while (HAL_OK != HAL_UART_Transmit(&hDiscoUart, (uint8_t *) &ch, 1, 30000))
 800126c:	4d07      	ldr	r5, [pc, #28]	; (800128c <__io_putchar+0x24>)
{
 800126e:	f844 0d04 	str.w	r0, [r4, #-4]!
  while (HAL_OK != HAL_UART_Transmit(&hDiscoUart, (uint8_t *) &ch, 1, 30000))
 8001272:	f247 5330 	movw	r3, #30000	; 0x7530
 8001276:	2201      	movs	r2, #1
 8001278:	4621      	mov	r1, r4
 800127a:	4628      	mov	r0, r5
 800127c:	f004 fd45 	bl	8005d0a <HAL_UART_Transmit>
 8001280:	2800      	cmp	r0, #0
 8001282:	d1f6      	bne.n	8001272 <__io_putchar+0xa>
  {
    ;
  }
  return ch;
}
 8001284:	9801      	ldr	r0, [sp, #4]
 8001286:	b003      	add	sp, #12
 8001288:	bd30      	pop	{r4, r5, pc}
 800128a:	bf00      	nop
 800128c:	20000784 	.word	0x20000784

08001290 <__io_getchar>:
  * @brief Retargets the C library scanf function to the USART.
  * @param None
  * @retval None
  */
GETCHAR_PROTOTYPE
{
 8001290:	b537      	push	{r0, r1, r2, r4, r5, lr}
  /* Place your implementation of fgetc here */
  /* e.g. readwrite a character to the USART2 and Loop until the end of transmission */
  uint8_t ch = 0;
 8001292:	ac02      	add	r4, sp, #8
 8001294:	2300      	movs	r3, #0
 8001296:	f804 3d01 	strb.w	r3, [r4, #-1]!
  while (HAL_OK != HAL_UART_Receive(&hDiscoUart, (uint8_t *)&ch, 1, 30000))
 800129a:	4d07      	ldr	r5, [pc, #28]	; (80012b8 <__io_getchar+0x28>)
 800129c:	f247 5330 	movw	r3, #30000	; 0x7530
 80012a0:	2201      	movs	r2, #1
 80012a2:	4621      	mov	r1, r4
 80012a4:	4628      	mov	r0, r5
 80012a6:	f004 fd87 	bl	8005db8 <HAL_UART_Receive>
 80012aa:	2800      	cmp	r0, #0
 80012ac:	d1f6      	bne.n	800129c <__io_getchar+0xc>
  {
    ;
  }
  return ch;
}
 80012ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80012b2:	b003      	add	sp, #12
 80012b4:	bd30      	pop	{r4, r5, pc}
 80012b6:	bf00      	nop
 80012b8:	20000784 	.word	0x20000784

080012bc <NMI_Handler>:
 80012bc:	4770      	bx	lr

080012be <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80012be:	e7fe      	b.n	80012be <HardFault_Handler>

080012c0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80012c0:	e7fe      	b.n	80012c0 <MemManage_Handler>

080012c2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80012c2:	e7fe      	b.n	80012c2 <BusFault_Handler>

080012c4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80012c4:	e7fe      	b.n	80012c4 <UsageFault_Handler>

080012c6 <SVC_Handler>:
 80012c6:	4770      	bx	lr

080012c8 <DebugMon_Handler>:
 80012c8:	4770      	bx	lr

080012ca <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80012ca:	4770      	bx	lr

080012cc <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 80012cc:	f003 b96e 	b.w	80045ac <HAL_IncTick>

080012d0 <VL53L0X_GetDeviceInfo>:
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 80012d0:	f002 ba46 	b.w	8003760 <VL53L0X_get_device_info>

080012d4 <VL53L0X_SetDeviceMode>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80012d4:	2915      	cmp	r1, #21
 80012d6:	d807      	bhi.n	80012e8 <VL53L0X_SetDeviceMode+0x14>
 80012d8:	2201      	movs	r2, #1
 80012da:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <VL53L0X_SetDeviceMode+0x1c>)
 80012dc:	408a      	lsls	r2, r1
 80012de:	4013      	ands	r3, r2
 80012e0:	b113      	cbz	r3, 80012e8 <VL53L0X_SetDeviceMode+0x14>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80012e2:	7401      	strb	r1, [r0, #16]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80012e4:	2000      	movs	r0, #0
		break;
 80012e6:	4770      	bx	lr
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80012e8:	f06f 0007 	mvn.w	r0, #7
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	0030000b 	.word	0x0030000b

080012f4 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80012f4:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80012f6:	460a      	mov	r2, r1
{
 80012f8:	460c      	mov	r4, r1
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80012fa:	2109      	movs	r1, #9
 80012fc:	f002 fa91 	bl	8003822 <VL53L0X_RdByte>

	if (Status == VL53L0X_ERROR_NONE)
 8001300:	b918      	cbnz	r0, 800130a <VL53L0X_GetFractionEnable+0x16>
		*pEnabled = (*pEnabled & 1);
 8001302:	7823      	ldrb	r3, [r4, #0]
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	7023      	strb	r3, [r4, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 800130a:	bd10      	pop	{r4, pc}

0800130c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800130c:	f001 be7a 	b.w	8003004 <VL53L0X_set_measurement_timing_budget_micro_seconds>

08001310 <VL53L0X_SetVcselPulsePeriod>:
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8001310:	f001 bd54 	b.w	8002dbc <VL53L0X_set_vcsel_pulse_period>

08001314 <VL53L0X_GetVcselPulsePeriod>:
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8001314:	f001 be5d 	b.w	8002fd2 <VL53L0X_get_vcsel_pulse_period>

08001318 <VL53L0X_SetSequenceStepEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8001318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800131a:	4617      	mov	r7, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 800131c:	aa02      	add	r2, sp, #8
 800131e:	2300      	movs	r3, #0
{
 8001320:	460c      	mov	r4, r1
	uint8_t SequenceConfig = 0;
 8001322:	f802 3d01 	strb.w	r3, [r2, #-1]!
	uint8_t SequenceConfigNew = 0;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001326:	2101      	movs	r1, #1
{
 8001328:	4606      	mov	r6, r0
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800132a:	f002 fa7a 	bl	8003822 <VL53L0X_RdByte>
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;

	if (Status == VL53L0X_ERROR_NONE) {
 800132e:	4605      	mov	r5, r0
 8001330:	b9d8      	cbnz	r0, 800136a <VL53L0X_SetSequenceStepEnable+0x52>
		if (SequenceStepEnabled == 1) {
 8001332:	2f01      	cmp	r7, #1
	SequenceConfigNew = SequenceConfig;
 8001334:	f89d 3007 	ldrb.w	r3, [sp, #7]
		if (SequenceStepEnabled == 1) {
 8001338:	d126      	bne.n	8001388 <VL53L0X_SetSequenceStepEnable+0x70>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800133a:	2c04      	cmp	r4, #4
 800133c:	d83a      	bhi.n	80013b4 <VL53L0X_SetSequenceStepEnable+0x9c>
 800133e:	e8df f004 	tbb	[pc, r4]
 8001342:	1703      	.short	0x1703
 8001344:	1d1a      	.short	0x1d1a
 8001346:	20          	.byte	0x20
 8001347:	00          	.byte	0x00
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8001348:	f043 0410 	orr.w	r4, r3, #16
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 800134c:	42a3      	cmp	r3, r4
 800134e:	d00c      	beq.n	800136a <VL53L0X_SetSequenceStepEnable+0x52>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_WrByte(Dev,
 8001350:	4622      	mov	r2, r4
 8001352:	2101      	movs	r1, #1
 8001354:	4630      	mov	r0, r6
 8001356:	f002 faf3 	bl	8003940 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800135a:	4605      	mov	r5, r0
 800135c:	b928      	cbnz	r0, 800136a <VL53L0X_SetSequenceStepEnable+0x52>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800135e:	f886 4130 	strb.w	r4, [r6, #304]	; 0x130
		if (Status == VL53L0X_ERROR_NONE) {
			VL53L0X_GETPARAMETERFIELD(Dev,
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8001362:	6971      	ldr	r1, [r6, #20]
 8001364:	4630      	mov	r0, r6
 8001366:	f7ff ffd1 	bl	800130c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 800136a:	4628      	mov	r0, r5
 800136c:	b003      	add	sp, #12
 800136e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				SequenceConfigNew |= 0x28;
 8001370:	f043 0428 	orr.w	r4, r3, #40	; 0x28
				break;
 8001374:	e7ea      	b.n	800134c <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew |= 0x04;
 8001376:	f043 0404 	orr.w	r4, r3, #4
				break;
 800137a:	e7e7      	b.n	800134c <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew |= 0x40;
 800137c:	f043 0440 	orr.w	r4, r3, #64	; 0x40
				break;
 8001380:	e7e4      	b.n	800134c <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew |= 0x80;
 8001382:	f043 0480 	orr.w	r4, r3, #128	; 0x80
				break;
 8001386:	e7e1      	b.n	800134c <VL53L0X_SetSequenceStepEnable+0x34>
			switch (SequenceStepId) {
 8001388:	2c04      	cmp	r4, #4
 800138a:	d813      	bhi.n	80013b4 <VL53L0X_SetSequenceStepEnable+0x9c>
 800138c:	e8df f004 	tbb	[pc, r4]
 8001390:	0c090603 	.word	0x0c090603
 8001394:	0f          	.byte	0x0f
 8001395:	00          	.byte	0x00
				SequenceConfigNew &= 0xef;
 8001396:	f003 04ef 	and.w	r4, r3, #239	; 0xef
				break;
 800139a:	e7d7      	b.n	800134c <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0xd7;
 800139c:	f003 04d7 	and.w	r4, r3, #215	; 0xd7
				break;
 80013a0:	e7d4      	b.n	800134c <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0xfb;
 80013a2:	f003 04fb 	and.w	r4, r3, #251	; 0xfb
				break;
 80013a6:	e7d1      	b.n	800134c <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0xbf;
 80013a8:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
				break;
 80013ac:	e7ce      	b.n	800134c <VL53L0X_SetSequenceStepEnable+0x34>
				SequenceConfigNew &= 0x7f;
 80013ae:	f003 047f 	and.w	r4, r3, #127	; 0x7f
				break;
 80013b2:	e7cb      	b.n	800134c <VL53L0X_SetSequenceStepEnable+0x34>
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80013b4:	f06f 0503 	mvn.w	r5, #3
 80013b8:	e7d7      	b.n	800136a <VL53L0X_SetSequenceStepEnable+0x52>

080013ba <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80013ba:	b513      	push	{r0, r1, r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
 80013bc:	aa02      	add	r2, sp, #8
 80013be:	2300      	movs	r3, #0
{
 80013c0:	460c      	mov	r4, r1
	uint8_t SequenceConfig = 0;
 80013c2:	f802 3d01 	strb.w	r3, [r2, #-1]!
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80013c6:	2101      	movs	r1, #1
 80013c8:	f002 fa2b 	bl	8003822 <VL53L0X_RdByte>
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80013cc:	b978      	cbnz	r0, 80013ee <VL53L0X_GetSequenceStepEnables+0x34>
		Status = sequence_step_enabled(Dev,
 80013ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80013d2:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80013d6:	7022      	strb	r2, [r4, #0]
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80013d8:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 80013dc:	70a2      	strb	r2, [r4, #2]
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80013de:	f3c3 0280 	ubfx	r2, r3, #2, #1
 80013e2:	7062      	strb	r2, [r4, #1]
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80013e4:	f3c3 1280 	ubfx	r2, r3, #6, #1
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80013e8:	09db      	lsrs	r3, r3, #7
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80013ea:	70e2      	strb	r2, [r4, #3]
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80013ec:	7123      	strb	r3, [r4, #4]
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80013ee:	b002      	add	sp, #8
 80013f0:	bd10      	pop	{r4, pc}

080013f2 <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 80013f2:	b513      	push	{r0, r1, r4, lr}
 80013f4:	4614      	mov	r4, r2
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
	uint32_t Fraction_ms = 0;
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 80013f6:	aa01      	add	r2, sp, #4
 80013f8:	f001 fbd4 	bl	8002ba4 <get_sequence_step_timeout>
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 80013fc:	b978      	cbnz	r0, 800141e <VL53L0X_GetSequenceStepTimeout+0x2c>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 80013fe:	9b01      	ldr	r3, [sp, #4]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 8001400:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001404:	fbb3 f1f2 	udiv	r1, r3, r2
 8001408:	fb02 3311 	mls	r3, r2, r1, r3
 800140c:	ebc3 4303 	rsb	r3, r3, r3, lsl #16
 8001410:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001414:	fbb3 f3f2 	udiv	r3, r3, r2
 8001418:	eb03 4301 	add.w	r3, r3, r1, lsl #16
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 800141c:	6023      	str	r3, [r4, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800141e:	b002      	add	sp, #8
 8001420:	bd10      	pop	{r4, pc}

08001422 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8001422:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001424:	460d      	mov	r5, r1
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8001426:	f10d 0202 	add.w	r2, sp, #2
 800142a:	21f8      	movs	r1, #248	; 0xf8
{
 800142c:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800142e:	f002 fa41 	bl	80038b4 <VL53L0X_RdWord>
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8001432:	b970      	cbnz	r0, 8001452 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		Status = VL53L0X_RdDWord(Dev,
 8001434:	aa01      	add	r2, sp, #4
 8001436:	2104      	movs	r1, #4
 8001438:	4620      	mov	r0, r4
 800143a:	f002 fa5b 	bl	80038f4 <VL53L0X_RdDWord>
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800143e:	b940      	cbnz	r0, 8001452 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x30>
		if (osc_calibrate_val != 0) {
 8001440:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8001444:	b11a      	cbz	r2, 800144e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x2c>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8001446:	9b01      	ldr	r3, [sp, #4]
 8001448:	fbb3 f3f2 	udiv	r3, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800144c:	602b      	str	r3, [r5, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800144e:	682b      	ldr	r3, [r5, #0]
 8001450:	61a3      	str	r3, [r4, #24]
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001452:	b003      	add	sp, #12
 8001454:	bd30      	pop	{r4, r5, pc}

08001456 <VL53L0X_GetXTalkCompensationEnable>:
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8001456:	7f03      	ldrb	r3, [r0, #28]
	*pXTalkCompensationEnable = Temp8;
 8001458:	700b      	strb	r3, [r1, #0]

	LOG_FUNCTION_END(Status);
	return Status;
}
 800145a:	2000      	movs	r0, #0
 800145c:	4770      	bx	lr

0800145e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800145e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001460:	460d      	mov	r5, r1
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8001462:	f10d 0206 	add.w	r2, sp, #6
 8001466:	2120      	movs	r1, #32
{
 8001468:	4604      	mov	r4, r0
	Status = VL53L0X_RdWord(Dev,
 800146a:	f002 fa23 	bl	80038b4 <VL53L0X_RdWord>
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800146e:	b928      	cbnz	r0, 800147c <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>
		if (Value == 0) {
 8001470:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001474:	b923      	cbnz	r3, 8001480 <VL53L0X_GetXTalkCompensationRateMegaCps+0x22>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8001476:	6a23      	ldr	r3, [r4, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8001478:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800147a:	7720      	strb	r0, [r4, #28]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800147c:	b003      	add	sp, #12
 800147e:	bd30      	pop	{r4, r5, pc}
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8001480:	00db      	lsls	r3, r3, #3
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8001482:	602b      	str	r3, [r5, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8001484:	6223      	str	r3, [r4, #32]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8001486:	2301      	movs	r3, #1
 8001488:	7723      	strb	r3, [r4, #28]
 800148a:	e7f7      	b.n	800147c <VL53L0X_GetXTalkCompensationRateMegaCps+0x1e>

0800148c <VL53L0X_SetLimitCheckEnable>:
	uint8_t LimitCheckDisable = 0;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800148c:	2905      	cmp	r1, #5
{
 800148e:	b570      	push	{r4, r5, r6, lr}
 8001490:	4604      	mov	r4, r0
 8001492:	460d      	mov	r5, r1
 8001494:	4616      	mov	r6, r2
	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8001496:	d832      	bhi.n	80014fe <VL53L0X_SetLimitCheckEnable+0x72>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else {
		if (LimitCheckEnable == 0) {
 8001498:	b3a2      	cbz	r2, 8001504 <VL53L0X_SetLimitCheckEnable+0x78>
			TempFix1616 = 0;
			LimitCheckEnableInt = 0;
			LimitCheckDisable = 1;

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800149a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800149e:	2101      	movs	r1, #1
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80014a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
			LimitCheckDisable = 0;
 80014a2:	2300      	movs	r3, #0
		}

		switch (LimitCheckId) {
 80014a4:	1e68      	subs	r0, r5, #1
 80014a6:	2804      	cmp	r0, #4
 80014a8:	d804      	bhi.n	80014b4 <VL53L0X_SetLimitCheckEnable+0x28>
 80014aa:	e8df f000 	tbb	[pc, r0]
 80014ae:	140b      	.short	0x140b
 80014b0:	1a17      	.short	0x1a17
 80014b2:	21          	.byte	0x21
 80014b3:	00          	.byte	0x00

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80014b4:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 80014b8:	442c      	add	r4, r5
		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (LimitCheckEnable == 0) {
 80014ba:	b9e6      	cbnz	r6, 80014f6 <VL53L0X_SetLimitCheckEnable+0x6a>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80014bc:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80014c0:	2000      	movs	r0, #0
 80014c2:	bd70      	pop	{r4, r5, r6, pc}
			Status = VL53L0X_WrWord(Dev,
 80014c4:	f3c2 224f 	ubfx	r2, r2, #9, #16
 80014c8:	2144      	movs	r1, #68	; 0x44
 80014ca:	4620      	mov	r0, r4
 80014cc:	f002 fa48 	bl	8003960 <VL53L0X_WrWord>
	if (Status == VL53L0X_ERROR_NONE) {
 80014d0:	2800      	cmp	r0, #0
 80014d2:	d0f1      	beq.n	80014b8 <VL53L0X_SetLimitCheckEnable+0x2c>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80014d4:	bd70      	pop	{r4, r5, r6, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80014d6:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
			break;
 80014da:	e7ed      	b.n	80014b8 <VL53L0X_SetLimitCheckEnable+0x2c>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80014dc:	f884 102b 	strb.w	r1, [r4, #43]	; 0x2b
			break;
 80014e0:	e7ea      	b.n	80014b8 <VL53L0X_SetLimitCheckEnable+0x2c>
			Status = VL53L0X_UpdateByte(Dev,
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	22fe      	movs	r2, #254	; 0xfe
			Status = VL53L0X_UpdateByte(Dev,
 80014e6:	2160      	movs	r1, #96	; 0x60
 80014e8:	4620      	mov	r0, r4
 80014ea:	f002 fa4b 	bl	8003984 <VL53L0X_UpdateByte>
			break;
 80014ee:	e7ef      	b.n	80014d0 <VL53L0X_SetLimitCheckEnable+0x44>
			Status = VL53L0X_UpdateByte(Dev,
 80014f0:	011b      	lsls	r3, r3, #4
 80014f2:	22ef      	movs	r2, #239	; 0xef
 80014f4:	e7f7      	b.n	80014e6 <VL53L0X_SetLimitCheckEnable+0x5a>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80014f6:	2301      	movs	r3, #1
 80014f8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80014fc:	e7e0      	b.n	80014c0 <VL53L0X_SetLimitCheckEnable+0x34>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80014fe:	f06f 0003 	mvn.w	r0, #3
	return Status;
 8001502:	bd70      	pop	{r4, r5, r6, pc}
			LimitCheckEnableInt = 0;
 8001504:	4611      	mov	r1, r2
			LimitCheckDisable = 1;
 8001506:	2301      	movs	r3, #1
 8001508:	e7cc      	b.n	80014a4 <VL53L0X_SetLimitCheckEnable+0x18>

0800150a <VL53L0X_GetLimitCheckEnable>:
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800150a:	2905      	cmp	r1, #5
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800150c:	bf8c      	ite	hi
 800150e:	f06f 0003 	mvnhi.w	r0, #3
		*pLimitCheckEnable = 0;
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001512:	1840      	addls	r0, r0, r1
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	bf97      	itett	ls
 800151a:	f890 1028 	ldrbls.w	r1, [r0, #40]	; 0x28
		*pLimitCheckEnable = 0;
 800151e:	7013      	strbhi	r3, [r2, #0]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8001520:	7011      	strbls	r1, [r2, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8001522:	4618      	movls	r0, r3
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001524:	4770      	bx	lr

08001526 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8001526:	b570      	push	{r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8001528:	1843      	adds	r3, r0, r1
{
 800152a:	4604      	mov	r4, r0
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800152c:	f893 0028 	ldrb.w	r0, [r3, #40]	; 0x28
{
 8001530:	460e      	mov	r6, r1
 8001532:	4615      	mov	r5, r2
	if (Temp8 == 0) { /* disabled write only internal value */
 8001534:	b918      	cbnz	r0, 800153e <VL53L0X_SetLimitCheckValue+0x18>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001536:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800153a:	6362      	str	r2, [r4, #52]	; 0x34
 800153c:	bd70      	pop	{r4, r5, r6, pc}
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800153e:	2905      	cmp	r1, #5
 8001540:	d81b      	bhi.n	800157a <VL53L0X_SetLimitCheckValue+0x54>
 8001542:	e8df f001 	tbb	[pc, r1]
 8001546:	0903      	.short	0x0903
 8001548:	16161412 	.word	0x16161412

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800154c:	6362      	str	r2, [r4, #52]	; 0x34
			Status = VL53L0X_ERROR_INVALID_PARAMS;

		}

		if (Status == VL53L0X_ERROR_NONE) {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800154e:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8001552:	2000      	movs	r0, #0
 8001554:	6365      	str	r5, [r4, #52]	; 0x34
 8001556:	bd70      	pop	{r4, r5, r6, pc}
			Status = VL53L0X_WrWord(Dev,
 8001558:	f3c2 224f 	ubfx	r2, r2, #9, #16
 800155c:	2144      	movs	r1, #68	; 0x44
			Status = VL53L0X_WrWord(Dev,
 800155e:	4620      	mov	r0, r4
 8001560:	f002 f9fe 	bl	8003960 <VL53L0X_WrWord>
		if (Status == VL53L0X_ERROR_NONE) {
 8001564:	2800      	cmp	r0, #0
 8001566:	d0f2      	beq.n	800154e <VL53L0X_SetLimitCheckValue+0x28>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001568:	bd70      	pop	{r4, r5, r6, pc}
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800156a:	63e2      	str	r2, [r4, #60]	; 0x3c
			break;
 800156c:	e7ef      	b.n	800154e <VL53L0X_SetLimitCheckValue+0x28>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800156e:	6422      	str	r2, [r4, #64]	; 0x40
			break;
 8001570:	e7ed      	b.n	800154e <VL53L0X_SetLimitCheckValue+0x28>
			Status = VL53L0X_WrWord(Dev,
 8001572:	f3c2 224f 	ubfx	r2, r2, #9, #16
 8001576:	2164      	movs	r1, #100	; 0x64
 8001578:	e7f1      	b.n	800155e <VL53L0X_SetLimitCheckValue+0x38>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800157a:	f06f 0003 	mvn.w	r0, #3
 800157e:	e7f3      	b.n	8001568 <VL53L0X_SetLimitCheckValue+0x42>

08001580 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8001580:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001582:	4604      	mov	r4, r0
 8001584:	4615      	mov	r5, r2
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8001586:	2905      	cmp	r1, #5
 8001588:	d82c      	bhi.n	80015e4 <VL53L0X_GetLimitCheckValue+0x64>
 800158a:	e8df f001 	tbb	[pc, r1]
 800158e:	0703      	.short	0x0703
 8001590:	1b1b1917 	.word	0x1b1b1917

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8001594:	6b43      	ldr	r3, [r0, #52]	; 0x34
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8001596:	602b      	str	r3, [r5, #0]
 8001598:	2000      	movs	r0, #0
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800159a:	e021      	b.n	80015e0 <VL53L0X_GetLimitCheckValue+0x60>
		Status = VL53L0X_RdWord(Dev,
 800159c:	f10d 0206 	add.w	r2, sp, #6
 80015a0:	2144      	movs	r1, #68	; 0x44
 80015a2:	f002 f987 	bl	80038b4 <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 80015a6:	b9d8      	cbnz	r0, 80015e0 <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80015a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
			if (TempFix1616 == 0) {
 80015ac:	0253      	lsls	r3, r2, #9
 80015ae:	b19a      	cbz	r2, 80015d8 <VL53L0X_GetLimitCheckValue+0x58>
				*pLimitCheckValue = TempFix1616;
 80015b0:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80015b2:	63a3      	str	r3, [r4, #56]	; 0x38
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80015b4:	2301      	movs	r3, #1
 80015b6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 80015ba:	e011      	b.n	80015e0 <VL53L0X_GetLimitCheckValue+0x60>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80015bc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		break;
 80015be:	e7ea      	b.n	8001596 <VL53L0X_GetLimitCheckValue+0x16>
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80015c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
		break;
 80015c2:	e7e8      	b.n	8001596 <VL53L0X_GetLimitCheckValue+0x16>
		Status = VL53L0X_RdWord(Dev,
 80015c4:	f10d 0206 	add.w	r2, sp, #6
 80015c8:	2164      	movs	r1, #100	; 0x64
 80015ca:	f002 f973 	bl	80038b4 <VL53L0X_RdWord>
		if (Status == VL53L0X_ERROR_NONE)
 80015ce:	b938      	cbnz	r0, 80015e0 <VL53L0X_GetLimitCheckValue+0x60>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80015d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80015d4:	025b      	lsls	r3, r3, #9
 80015d6:	e7de      	b.n	8001596 <VL53L0X_GetLimitCheckValue+0x16>
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80015d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
				*pLimitCheckValue = TempFix1616;
 80015da:	602b      	str	r3, [r5, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80015dc:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29

}
 80015e0:	b003      	add	sp, #12
 80015e2:	bd30      	pop	{r4, r5, pc}
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80015e4:	f06f 0003 	mvn.w	r0, #3
 80015e8:	e7fa      	b.n	80015e0 <VL53L0X_GetLimitCheckValue+0x60>

080015ea <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80015ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80015ec:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80015ee:	f10d 0207 	add.w	r2, sp, #7
 80015f2:	2101      	movs	r1, #1
{
 80015f4:	4605      	mov	r5, r0
	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80015f6:	f002 f914 	bl	8003822 <VL53L0X_RdByte>
	if (Status == VL53L0X_ERROR_NONE) {
 80015fa:	b958      	cbnz	r0, 8001614 <VL53L0X_GetWrapAroundCheckEnable+0x2a>
		PALDevDataSet(Dev, SequenceConfig, data);
 80015fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001600:	f885 3130 	strb.w	r3, [r5, #304]	; 0x130
		if (data & (0x01 << 7))
 8001604:	061b      	lsls	r3, r3, #24
			*pWrapAroundCheckEnable = 0x01;
 8001606:	bf46      	itte	mi
 8001608:	2301      	movmi	r3, #1
 800160a:	7023      	strbmi	r3, [r4, #0]
		else
			*pWrapAroundCheckEnable = 0x00;
 800160c:	7020      	strbpl	r0, [r4, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800160e:	7823      	ldrb	r3, [r4, #0]
 8001610:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001614:	b003      	add	sp, #12
 8001616:	bd30      	pop	{r4, r5, pc}

08001618 <VL53L0X_GetDeviceParameters>:
{
 8001618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800161c:	7c03      	ldrb	r3, [r0, #16]
{
 800161e:	460c      	mov	r4, r1
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8001620:	f801 3b08 	strb.w	r3, [r1], #8
{
 8001624:	4605      	mov	r5, r0
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8001626:	f7ff fefc 	bl	8001422 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
	if (Status == VL53L0X_ERROR_NONE)
 800162a:	bb40      	cbnz	r0, 800167e <VL53L0X_GetDeviceParameters+0x66>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800162c:	7320      	strb	r0, [r4, #12]
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800162e:	f104 0110 	add.w	r1, r4, #16
 8001632:	4628      	mov	r0, r5
 8001634:	f7ff ff13 	bl	800145e <VL53L0X_GetXTalkCompensationRateMegaCps>
	if (Status == VL53L0X_ERROR_NONE)
 8001638:	bb08      	cbnz	r0, 800167e <VL53L0X_GetDeviceParameters+0x66>
	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800163a:	f104 0114 	add.w	r1, r4, #20
 800163e:	4628      	mov	r0, r5
 8001640:	f000 fc03 	bl	8001e4a <VL53L0X_get_offset_calibration_data_micro_meter>
	if (Status == VL53L0X_ERROR_NONE) {
 8001644:	b9d8      	cbnz	r0, 800167e <VL53L0X_GetDeviceParameters+0x66>
 8001646:	f104 0724 	add.w	r7, r4, #36	; 0x24
 800164a:	f105 0928 	add.w	r9, r5, #40	; 0x28
 800164e:	f104 0818 	add.w	r8, r4, #24
 8001652:	4606      	mov	r6, r0
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8001654:	463a      	mov	r2, r7
 8001656:	b2b1      	uxth	r1, r6
 8001658:	4628      	mov	r0, r5
 800165a:	f7ff ff91 	bl	8001580 <VL53L0X_GetLimitCheckValue>
			if (Status == VL53L0X_ERROR_NONE) {
 800165e:	b970      	cbnz	r0, 800167e <VL53L0X_GetDeviceParameters+0x66>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001660:	3601      	adds	r6, #1
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001662:	f819 3b01 	ldrb.w	r3, [r9], #1
		*pLimitCheckEnable = Temp8;
 8001666:	f808 3b01 	strb.w	r3, [r8], #1
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800166a:	2e06      	cmp	r6, #6
 800166c:	f107 0704 	add.w	r7, r7, #4
 8001670:	d1f0      	bne.n	8001654 <VL53L0X_GetDeviceParameters+0x3c>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8001672:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8001676:	4628      	mov	r0, r5
 8001678:	f7ff ffb7 	bl	80015ea <VL53L0X_GetWrapAroundCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 800167c:	b108      	cbz	r0, 8001682 <VL53L0X_GetDeviceParameters+0x6a>
}
 800167e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8001682:	1d21      	adds	r1, r4, #4
 8001684:	4628      	mov	r0, r5
}
 8001686:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800168a:	f001 bd1c 	b.w	80030c6 <VL53L0X_get_measurement_timing_budget_micro_seconds>
	...

08001690 <VL53L0X_DataInit>:
{
 8001690:	b5f0      	push	{r4, r5, r6, r7, lr}
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8001692:	2200      	movs	r2, #0
{
 8001694:	4605      	mov	r5, r0
 8001696:	b091      	sub	sp, #68	; 0x44
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8001698:	2188      	movs	r1, #136	; 0x88
 800169a:	f002 f951 	bl	8003940 <VL53L0X_WrByte>
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800169e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016a2:	f8a5 214e 	strh.w	r2, [r5, #334]	; 0x14e
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80016a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80016aa:	f8a5 2150 	strh.w	r2, [r5, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80016ae:	4a41      	ldr	r2, [pc, #260]	; (80017b4 <VL53L0X_DataInit+0x124>)
 80016b0:	f8c5 2154 	str.w	r2, [r5, #340]	; 0x154
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80016b4:	2300      	movs	r3, #0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80016b6:	4a40      	ldr	r2, [pc, #256]	; (80017b8 <VL53L0X_DataInit+0x128>)
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80016b8:	f885 30f0 	strb.w	r3, [r5, #240]	; 0xf0
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80016bc:	f8c5 20d4 	str.w	r2, [r5, #212]	; 0xd4
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80016c0:	622b      	str	r3, [r5, #32]
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80016c2:	4669      	mov	r1, sp
 80016c4:	4628      	mov	r0, r5
 80016c6:	f7ff ffa7 	bl	8001618 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 80016ca:	4604      	mov	r4, r0
 80016cc:	b980      	cbnz	r0, 80016f0 <VL53L0X_DataInit+0x60>
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80016ce:	f88d 0000 	strb.w	r0, [sp]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80016d2:	f88d 0001 	strb.w	r0, [sp, #1]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80016d6:	466e      	mov	r6, sp
 80016d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016da:	f105 0710 	add.w	r7, r5, #16
 80016de:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80016e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016e2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80016e4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016e6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80016e8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016ec:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80016f0:	2364      	movs	r3, #100	; 0x64
 80016f2:	f8a5 3134 	strh.w	r3, [r5, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80016f6:	f44f 7361 	mov.w	r3, #900	; 0x384
 80016fa:	f8a5 3136 	strh.w	r3, [r5, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80016fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001702:	f8a5 3138 	strh.w	r3, [r5, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8001706:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800170a:	f8a5 313a 	strh.w	r3, [r5, #314]	; 0x13a
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800170e:	2301      	movs	r3, #1
 8001710:	f885 314c 	strb.w	r3, [r5, #332]	; 0x14c
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001714:	2600      	movs	r6, #0
		if (Status == VL53L0X_ERROR_NONE)
 8001716:	2c00      	cmp	r4, #0
 8001718:	d149      	bne.n	80017ae <VL53L0X_DataInit+0x11e>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800171a:	b2b1      	uxth	r1, r6
 800171c:	2201      	movs	r2, #1
 800171e:	4628      	mov	r0, r5
 8001720:	f7ff feb4 	bl	800148c <VL53L0X_SetLimitCheckEnable>
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8001724:	3601      	adds	r6, #1
 8001726:	2e06      	cmp	r6, #6
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8001728:	4604      	mov	r4, r0
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800172a:	d1f4      	bne.n	8001716 <VL53L0X_DataInit+0x86>
	if (Status == VL53L0X_ERROR_NONE)
 800172c:	bbf8      	cbnz	r0, 80017ae <VL53L0X_DataInit+0x11e>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800172e:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8001732:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001736:	4602      	mov	r2, r0
 8001738:	2104      	movs	r1, #4
 800173a:	4628      	mov	r0, r5
 800173c:	f7ff fea6 	bl	800148c <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8001740:	4604      	mov	r4, r0
 8001742:	bba0      	cbnz	r0, 80017ae <VL53L0X_DataInit+0x11e>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8001744:	4602      	mov	r2, r0
 8001746:	2105      	movs	r1, #5
 8001748:	4628      	mov	r0, r5
 800174a:	f7ff fe9f 	bl	800148c <VL53L0X_SetLimitCheckEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 800174e:	4604      	mov	r4, r0
 8001750:	bb68      	cbnz	r0, 80017ae <VL53L0X_DataInit+0x11e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001752:	4601      	mov	r1, r0
 8001754:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8001758:	4628      	mov	r0, r5
 800175a:	f7ff fee4 	bl	8001526 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 800175e:	4604      	mov	r4, r0
 8001760:	bb28      	cbnz	r0, 80017ae <VL53L0X_DataInit+0x11e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001762:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001766:	2101      	movs	r1, #1
 8001768:	4628      	mov	r0, r5
 800176a:	f7ff fedc 	bl	8001526 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 800176e:	4604      	mov	r4, r0
 8001770:	b9e8      	cbnz	r0, 80017ae <VL53L0X_DataInit+0x11e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001772:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8001776:	2102      	movs	r1, #2
 8001778:	4628      	mov	r0, r5
 800177a:	f7ff fed4 	bl	8001526 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 800177e:	4604      	mov	r4, r0
 8001780:	b9a8      	cbnz	r0, 80017ae <VL53L0X_DataInit+0x11e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8001782:	4602      	mov	r2, r0
 8001784:	2103      	movs	r1, #3
 8001786:	4628      	mov	r0, r5
 8001788:	f7ff fecd 	bl	8001526 <VL53L0X_SetLimitCheckValue>
	if (Status == VL53L0X_ERROR_NONE) {
 800178c:	4604      	mov	r4, r0
 800178e:	b970      	cbnz	r0, 80017ae <VL53L0X_DataInit+0x11e>
		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8001790:	22ff      	movs	r2, #255	; 0xff
 8001792:	f885 2130 	strb.w	r2, [r5, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001796:	2101      	movs	r1, #1
 8001798:	4628      	mov	r0, r5
 800179a:	f002 f8d1 	bl	8003940 <VL53L0X_WrByte>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800179e:	2301      	movs	r3, #1
 80017a0:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	if (Status == VL53L0X_ERROR_NONE)
 80017a4:	4604      	mov	r4, r0
 80017a6:	b910      	cbnz	r0, 80017ae <VL53L0X_DataInit+0x11e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80017a8:	2300      	movs	r3, #0
 80017aa:	f885 3115 	strb.w	r3, [r5, #277]	; 0x115
}
 80017ae:	4620      	mov	r0, r4
 80017b0:	b011      	add	sp, #68	; 0x44
 80017b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017b4:	00016b85 	.word	0x00016b85
 80017b8:	000970a4 	.word	0x000970a4

080017bc <VL53L0X_PerformRefCalibration>:
	uint8_t *pPhaseCal)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80017bc:	2301      	movs	r3, #1
 80017be:	f000 bd66 	b.w	800228e <VL53L0X_perform_ref_calibration>

080017c2 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80017c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017c6:	b08e      	sub	sp, #56	; 0x38
 80017c8:	460c      	mov	r4, r1
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80017ca:	230c      	movs	r3, #12
 80017cc:	aa04      	add	r2, sp, #16
 80017ce:	2114      	movs	r1, #20
{
 80017d0:	4606      	mov	r6, r0
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80017d2:	f002 f859 	bl	8003888 <VL53L0X_ReadMulti>
 80017d6:	4686      	mov	lr, r0

	if (Status == VL53L0X_ERROR_NONE) {
 80017d8:	2800      	cmp	r0, #0
 80017da:	d175      	bne.n	80018c8 <VL53L0X_GetRangingMeasurementData+0x106>
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80017dc:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80017e0:	f89d 2017 	ldrb.w	r2, [sp, #23]
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80017e4:	f89d 1018 	ldrb.w	r1, [sp, #24]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80017e8:	f89d 501a 	ldrb.w	r5, [sp, #26]
 80017ec:	f89d 701b 	ldrb.w	r7, [sp, #27]
		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80017f0:	75a0      	strb	r0, [r4, #22]
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80017f2:	eb02 2203 	add.w	r2, r2, r3, lsl #8
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80017f6:	f89d 3019 	ldrb.w	r3, [sp, #25]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80017fa:	6020      	str	r0, [r4, #0]
		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80017fc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8001800:	b29b      	uxth	r3, r3
 8001802:	025b      	lsls	r3, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8001804:	6123      	str	r3, [r4, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8001806:	f89d 1012 	ldrb.w	r1, [sp, #18]
 800180a:	f89d 3013 	ldrb.w	r3, [sp, #19]
		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800180e:	6060      	str	r0, [r4, #4]
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8001810:	eb07 2705 	add.w	r7, r7, r5, lsl #8
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8001814:	eb03 2301 	add.w	r3, r3, r1, lsl #8
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8001818:	b292      	uxth	r2, r2
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800181a:	f8b6 514e 	ldrh.w	r5, [r6, #334]	; 0x14e
		DeviceRangeStatus = localBuffer[0];
 800181e:	f89d 1010 	ldrb.w	r1, [sp, #16]
		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8001822:	0252      	lsls	r2, r2, #9
		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8001824:	b29b      	uxth	r3, r3
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8001826:	60e2      	str	r2, [r4, #12]
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8001828:	82a3      	strh	r3, [r4, #20]

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800182a:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800182e:	b2bf      	uxth	r7, r7
		RangeFractionalEnable = PALDevDataGet(Dev,
 8001830:	f896 e131 	ldrb.w	lr, [r6, #305]	; 0x131
		if (LinearityCorrectiveGain != 1000) {
 8001834:	d00c      	beq.n	8001850 <VL53L0X_GetRangingMeasurementData+0x8e>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8001836:	fb07 f005 	mul.w	r0, r7, r5
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800183a:	7f37      	ldrb	r7, [r6, #28]
				* tmpuint16 + 500) / 1000);
 800183c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001840:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
 8001844:	fb90 f0f5 	sdiv	r0, r0, r5
			VL53L0X_GETPARAMETERFIELD(Dev,
 8001848:	6a35      	ldr	r5, [r6, #32]
			if (XTalkCompensationEnable) {
 800184a:	2f00      	cmp	r7, #0
 800184c:	d140      	bne.n	80018d0 <VL53L0X_GetRangingMeasurementData+0x10e>
						XtalkRangeMilliMeter = 8888;
					else
						XtalkRangeMilliMeter = 8888
							<< 2;
				} else {
					XtalkRangeMilliMeter =
 800184e:	b287      	uxth	r7, r0
				tmpuint16 = XtalkRangeMilliMeter;
			}

		}

		if (RangeFractionalEnable) {
 8001850:	f1be 0f00 	cmp.w	lr, #0
 8001854:	d046      	beq.n	80018e4 <VL53L0X_GetRangingMeasurementData+0x122>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8001856:	08b8      	lsrs	r0, r7, #2
			pRangingMeasurementData->RangeMilliMeter =
 8001858:	8120      	strh	r0, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800185a:	01b8      	lsls	r0, r7, #6
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
			pRangingMeasurementData->RangeFractionalPart = 0;
 800185c:	75e0      	strb	r0, [r4, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800185e:	f10d 000f 	add.w	r0, sp, #15
 8001862:	9001      	str	r0, [sp, #4]
 8001864:	9400      	str	r4, [sp, #0]
 8001866:	4630      	mov	r0, r6
 8001868:	f001 fe5c 	bl	8003524 <VL53L0X_get_pal_range_status>
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800186c:	4686      	mov	lr, r0
 800186e:	bb58      	cbnz	r0, 80018c8 <VL53L0X_GetRangingMeasurementData+0x106>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8001870:	f89d c00f 	ldrb.w	ip, [sp, #15]
 8001874:	f884 c018 	strb.w	ip, [r4, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8001878:	f106 0550 	add.w	r5, r6, #80	; 0x50
 800187c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187e:	af07      	add	r7, sp, #28
 8001880:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001882:	e895 0007 	ldmia.w	r5, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8001886:	f8b4 a008 	ldrh.w	sl, [r4, #8]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800188a:	7de3      	ldrb	r3, [r4, #23]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800188c:	f8b4 900a 	ldrh.w	r9, [r4, #10]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8001890:	f8b4 8014 	ldrh.w	r8, [r4, #20]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8001894:	f8ad a024 	strh.w	sl, [sp, #36]	; 0x24
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8001898:	e887 0007 	stmia.w	r7, {r0, r1, r2}
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800189c:	68e1      	ldr	r1, [r4, #12]
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800189e:	6922      	ldr	r2, [r4, #16]
		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80018a0:	6860      	ldr	r0, [r4, #4]
 80018a2:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
 80018a6:	910a      	str	r1, [sp, #40]	; 0x28
 80018a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80018aa:	f8ad 8030 	strh.w	r8, [sp, #48]	; 0x30
 80018ae:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80018b2:	f88d c034 	strb.w	ip, [sp, #52]	; 0x34
 80018b6:	ac07      	add	r4, sp, #28
 80018b8:	9008      	str	r0, [sp, #32]
 80018ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018bc:	3650      	adds	r6, #80	; 0x50
 80018be:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80018c0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80018c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80018c8:	4670      	mov	r0, lr
 80018ca:	b00e      	add	sp, #56	; 0x38
 80018cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					* EffectiveSpadRtnCount) >> 8))
 80018d0:	b2ad      	uxth	r5, r5
 80018d2:	435d      	muls	r5, r3
 80018d4:	122d      	asrs	r5, r5, #8
				if ((SignalRate
 80018d6:	42aa      	cmp	r2, r5
 80018d8:	d107      	bne.n	80018ea <VL53L0X_GetRangingMeasurementData+0x128>
					if (RangeFractionalEnable)
 80018da:	f1be 0f00 	cmp.w	lr, #0
 80018de:	d10a      	bne.n	80018f6 <VL53L0X_GetRangingMeasurementData+0x134>
						XtalkRangeMilliMeter = 8888
 80018e0:	f648 27e0 	movw	r7, #35552	; 0x8ae0
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80018e4:	8127      	strh	r7, [r4, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80018e6:	2000      	movs	r0, #0
 80018e8:	e7b8      	b.n	800185c <VL53L0X_GetRangingMeasurementData+0x9a>
					(tmpuint16 * SignalRate)
 80018ea:	b280      	uxth	r0, r0
 80018ec:	4350      	muls	r0, r2
						- ((XTalkCompensationRateMegaCps
 80018ee:	1b55      	subs	r5, r2, r5
						/ (SignalRate
 80018f0:	fbb0 f0f5 	udiv	r0, r0, r5
 80018f4:	e7ab      	b.n	800184e <VL53L0X_GetRangingMeasurementData+0x8c>
						XtalkRangeMilliMeter = 8888;
 80018f6:	f242 27b8 	movw	r7, #8888	; 0x22b8
 80018fa:	e7ac      	b.n	8001856 <VL53L0X_GetRangingMeasurementData+0x94>

080018fc <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 80018fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80018fe:	4617      	mov	r7, r2
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8001900:	210e      	movs	r1, #14
 8001902:	f10d 0206 	add.w	r2, sp, #6
{
 8001906:	461d      	mov	r5, r3
 8001908:	4606      	mov	r6, r0
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800190a:	4c0b      	ldr	r4, [pc, #44]	; (8001938 <VL53L0X_GetInterruptThresholds+0x3c>)
	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800190c:	f001 ffd2 	bl	80038b4 <VL53L0X_RdWord>
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8001910:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001914:	ea04 4343 	and.w	r3, r4, r3, lsl #17
 8001918:	603b      	str	r3, [r7, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800191a:	b950      	cbnz	r0, 8001932 <VL53L0X_GetInterruptThresholds+0x36>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800191c:	f10d 0206 	add.w	r2, sp, #6
 8001920:	210c      	movs	r1, #12
 8001922:	4630      	mov	r0, r6
 8001924:	f001 ffc6 	bl	80038b4 <VL53L0X_RdWord>
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8001928:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800192c:	ea04 4443 	and.w	r4, r4, r3, lsl #17
		*pThresholdHigh =
 8001930:	602c      	str	r4, [r5, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001932:	b003      	add	sp, #12
 8001934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001936:	bf00      	nop
 8001938:	1ffe0000 	.word	0x1ffe0000

0800193c <VL53L0X_CheckAndLoadInterruptSettings>:
{
 800193c:	b573      	push	{r0, r1, r4, r5, r6, lr}
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800193e:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
	if ((InterruptConfig ==
 8001942:	3b01      	subs	r3, #1
 8001944:	2b02      	cmp	r3, #2
{
 8001946:	4606      	mov	r6, r0
 8001948:	460c      	mov	r4, r1
	if ((InterruptConfig ==
 800194a:	d833      	bhi.n	80019b4 <VL53L0X_CheckAndLoadInterruptSettings+0x78>
		Status = VL53L0X_GetInterruptThresholds(Dev,
 800194c:	ab01      	add	r3, sp, #4
 800194e:	466a      	mov	r2, sp
 8001950:	2101      	movs	r1, #1
 8001952:	f7ff ffd3 	bl	80018fc <VL53L0X_GetInterruptThresholds>
		if (((ThresholdLow > 255*65536) ||
 8001956:	9b00      	ldr	r3, [sp, #0]
 8001958:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
		Status = VL53L0X_GetInterruptThresholds(Dev,
 800195c:	4605      	mov	r5, r0
		if (((ThresholdLow > 255*65536) ||
 800195e:	d803      	bhi.n	8001968 <VL53L0X_CheckAndLoadInterruptSettings+0x2c>
 8001960:	9b01      	ldr	r3, [sp, #4]
 8001962:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8001966:	d906      	bls.n	8001976 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			(ThresholdHigh > 255*65536)) &&
 8001968:	b92d      	cbnz	r5, 8001976 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
			if (StartNotStopFlag != 0) {
 800196a:	b13c      	cbz	r4, 800197c <VL53L0X_CheckAndLoadInterruptSettings+0x40>
				Status = VL53L0X_load_tuning_settings(Dev,
 800196c:	4912      	ldr	r1, [pc, #72]	; (80019b8 <VL53L0X_CheckAndLoadInterruptSettings+0x7c>)
 800196e:	4630      	mov	r0, r6
 8001970:	f001 fc0e 	bl	8003190 <VL53L0X_load_tuning_settings>
 8001974:	4605      	mov	r5, r0
}
 8001976:	4628      	mov	r0, r5
 8001978:	b002      	add	sp, #8
 800197a:	bd70      	pop	{r4, r5, r6, pc}
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800197c:	2204      	movs	r2, #4
 800197e:	21ff      	movs	r1, #255	; 0xff
 8001980:	4630      	mov	r0, r6
 8001982:	f001 ffdd 	bl	8003940 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8001986:	462a      	mov	r2, r5
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8001988:	4604      	mov	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800198a:	2170      	movs	r1, #112	; 0x70
 800198c:	4630      	mov	r0, r6
 800198e:	f001 ffd7 	bl	8003940 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001992:	462a      	mov	r2, r5
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8001994:	4304      	orrs	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001996:	21ff      	movs	r1, #255	; 0xff
 8001998:	4630      	mov	r0, r6
 800199a:	f001 ffd1 	bl	8003940 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800199e:	b264      	sxtb	r4, r4
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80019a0:	4304      	orrs	r4, r0
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80019a2:	462a      	mov	r2, r5
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	4630      	mov	r0, r6
 80019a8:	f001 ffca 	bl	8003940 <VL53L0X_WrByte>
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80019ac:	b264      	sxtb	r4, r4
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80019ae:	4320      	orrs	r0, r4
 80019b0:	b245      	sxtb	r5, r0
 80019b2:	e7e0      	b.n	8001976 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80019b4:	2500      	movs	r5, #0
 80019b6:	e7de      	b.n	8001976 <VL53L0X_CheckAndLoadInterruptSettings+0x3a>
 80019b8:	20000188 	.word	0x20000188

080019bc <VL53L0X_StartMeasurement>:
{
 80019bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	switch (DeviceMode) {
 80019be:	7c01      	ldrb	r1, [r0, #16]
 80019c0:	2901      	cmp	r1, #1
{
 80019c2:	4604      	mov	r4, r0
	switch (DeviceMode) {
 80019c4:	d027      	beq.n	8001a16 <VL53L0X_StartMeasurement+0x5a>
 80019c6:	d304      	bcc.n	80019d2 <VL53L0X_StartMeasurement+0x16>
 80019c8:	2903      	cmp	r1, #3
 80019ca:	d031      	beq.n	8001a30 <VL53L0X_StartMeasurement+0x74>
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80019cc:	f06f 0007 	mvn.w	r0, #7
 80019d0:	e013      	b.n	80019fa <VL53L0X_StartMeasurement+0x3e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80019d2:	2201      	movs	r2, #1
 80019d4:	2100      	movs	r1, #0
 80019d6:	f001 ffb3 	bl	8003940 <VL53L0X_WrByte>
		Byte = StartStopByte;
 80019da:	2301      	movs	r3, #1
 80019dc:	f88d 3007 	strb.w	r3, [sp, #7]
		if (Status == VL53L0X_ERROR_NONE) {
 80019e0:	b958      	cbnz	r0, 80019fa <VL53L0X_StartMeasurement+0x3e>
 80019e2:	4605      	mov	r5, r0
			} while (((Byte & StartStopByte) == StartStopByte)
 80019e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80019e8:	07db      	lsls	r3, r3, #31
				LoopNb = LoopNb + 1;
 80019ea:	f105 0501 	add.w	r5, r5, #1
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80019ee:	d50d      	bpl.n	8001a0c <VL53L0X_StartMeasurement+0x50>
				&& (Status == VL53L0X_ERROR_NONE)
 80019f0:	b960      	cbnz	r0, 8001a0c <VL53L0X_StartMeasurement+0x50>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80019f2:	2dc8      	cmp	r5, #200	; 0xc8
 80019f4:	d103      	bne.n	80019fe <VL53L0X_StartMeasurement+0x42>
				Status = VL53L0X_ERROR_TIME_OUT;
 80019f6:	f06f 0006 	mvn.w	r0, #6
}
 80019fa:	b003      	add	sp, #12
 80019fc:	bd30      	pop	{r4, r5, pc}
					Status = VL53L0X_RdByte(Dev,
 80019fe:	4601      	mov	r1, r0
 8001a00:	f10d 0207 	add.w	r2, sp, #7
 8001a04:	4620      	mov	r0, r4
 8001a06:	f001 ff0c 	bl	8003822 <VL53L0X_RdByte>
 8001a0a:	e7eb      	b.n	80019e4 <VL53L0X_StartMeasurement+0x28>
				Status = VL53L0X_ERROR_TIME_OUT;
 8001a0c:	2dc8      	cmp	r5, #200	; 0xc8
 8001a0e:	bf08      	it	eq
 8001a10:	f06f 0006 	mvneq.w	r0, #6
 8001a14:	e7f1      	b.n	80019fa <VL53L0X_StartMeasurement+0x3e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8001a16:	f7ff ff91 	bl	800193c <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 8001a1a:	2202      	movs	r2, #2
		Status = VL53L0X_WrByte(Dev,
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4620      	mov	r0, r4
 8001a20:	f001 ff8e 	bl	8003940 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8001a24:	2800      	cmp	r0, #0
 8001a26:	d1e8      	bne.n	80019fa <VL53L0X_StartMeasurement+0x3e>
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8001a28:	2304      	movs	r3, #4
 8001a2a:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 8001a2e:	e7e4      	b.n	80019fa <VL53L0X_StartMeasurement+0x3e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8001a30:	2101      	movs	r1, #1
 8001a32:	f7ff ff83 	bl	800193c <VL53L0X_CheckAndLoadInterruptSettings>
		Status = VL53L0X_WrByte(Dev,
 8001a36:	2204      	movs	r2, #4
 8001a38:	e7f0      	b.n	8001a1c <VL53L0X_StartMeasurement+0x60>

08001a3a <VL53L0X_PerformSingleMeasurement>:
{
 8001a3a:	b538      	push	{r3, r4, r5, lr}
	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8001a3c:	7c05      	ldrb	r5, [r0, #16]
{
 8001a3e:	4604      	mov	r4, r0
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8001a40:	b125      	cbz	r5, 8001a4c <VL53L0X_PerformSingleMeasurement+0x12>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8001a42:	4620      	mov	r0, r4
 8001a44:	f000 fd76 	bl	8002534 <VL53L0X_measurement_poll_for_completion>
	if (Status == VL53L0X_ERROR_NONE
 8001a48:	b128      	cbz	r0, 8001a56 <VL53L0X_PerformSingleMeasurement+0x1c>
 8001a4a:	bd38      	pop	{r3, r4, r5, pc}
		Status = VL53L0X_StartMeasurement(Dev);
 8001a4c:	f7ff ffb6 	bl	80019bc <VL53L0X_StartMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 8001a50:	2800      	cmp	r0, #0
 8001a52:	d0f6      	beq.n	8001a42 <VL53L0X_PerformSingleMeasurement+0x8>
}
 8001a54:	bd38      	pop	{r3, r4, r5, pc}
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8001a56:	2d00      	cmp	r5, #0
 8001a58:	d1fc      	bne.n	8001a54 <VL53L0X_PerformSingleMeasurement+0x1a>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
 8001a60:	e7f8      	b.n	8001a54 <VL53L0X_PerformSingleMeasurement+0x1a>

08001a62 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8001a62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a64:	4606      	mov	r6, r0
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8001a66:	2500      	movs	r5, #0
	do {
		Status = VL53L0X_WrByte(Dev,
 8001a68:	2201      	movs	r2, #1
 8001a6a:	210b      	movs	r1, #11
 8001a6c:	4630      	mov	r0, r6
 8001a6e:	f001 ff67 	bl	8003940 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8001a72:	2200      	movs	r2, #0
		Status = VL53L0X_WrByte(Dev,
 8001a74:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev,
 8001a76:	210b      	movs	r1, #11
 8001a78:	4630      	mov	r0, r6
 8001a7a:	f001 ff61 	bl	8003940 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8001a7e:	f10d 0207 	add.w	r2, sp, #7
		Status |= VL53L0X_WrByte(Dev,
 8001a82:	4304      	orrs	r4, r0
		Status |= VL53L0X_RdByte(Dev,
 8001a84:	2113      	movs	r1, #19
 8001a86:	4630      	mov	r0, r6
 8001a88:	f001 fecb 	bl	8003822 <VL53L0X_RdByte>
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
	} while (((Byte & 0x07) != 0x00)
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8001a8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		Status |= VL53L0X_WrByte(Dev,
 8001a90:	b264      	sxtb	r4, r4
		Status |= VL53L0X_RdByte(Dev,
 8001a92:	4320      	orrs	r0, r4
		LoopCount++;
 8001a94:	3501      	adds	r5, #1
			&& (Status == VL53L0X_ERROR_NONE));
 8001a96:	075b      	lsls	r3, r3, #29
		Status |= VL53L0X_RdByte(Dev,
 8001a98:	b240      	sxtb	r0, r0
		LoopCount++;
 8001a9a:	b2ed      	uxtb	r5, r5
			&& (Status == VL53L0X_ERROR_NONE));
 8001a9c:	d005      	beq.n	8001aaa <VL53L0X_ClearInterruptMask+0x48>
			&& (LoopCount < 3)
 8001a9e:	2d03      	cmp	r5, #3
 8001aa0:	d008      	beq.n	8001ab4 <VL53L0X_ClearInterruptMask+0x52>
			&& (Status == VL53L0X_ERROR_NONE));
 8001aa2:	2800      	cmp	r0, #0
 8001aa4:	d0e0      	beq.n	8001a68 <VL53L0X_ClearInterruptMask+0x6>
	if (LoopCount >= 3)
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001aa6:	b002      	add	sp, #8
 8001aa8:	bd70      	pop	{r4, r5, r6, pc}
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8001aaa:	2d03      	cmp	r5, #3
 8001aac:	bf08      	it	eq
 8001aae:	f06f 000b 	mvneq.w	r0, #11
 8001ab2:	e7f8      	b.n	8001aa6 <VL53L0X_ClearInterruptMask+0x44>
 8001ab4:	f06f 000b 	mvn.w	r0, #11
 8001ab8:	e7f5      	b.n	8001aa6 <VL53L0X_ClearInterruptMask+0x44>

08001aba <VL53L0X_PerformSingleRangingMeasurement>:
{
 8001aba:	b538      	push	{r3, r4, r5, lr}
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8001abc:	2300      	movs	r3, #0
 8001abe:	7403      	strb	r3, [r0, #16]
{
 8001ac0:	4604      	mov	r4, r0
 8001ac2:	460d      	mov	r5, r1
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8001ac4:	f7ff ffb9 	bl	8001a3a <VL53L0X_PerformSingleMeasurement>
	if (Status == VL53L0X_ERROR_NONE)
 8001ac8:	b950      	cbnz	r0, 8001ae0 <VL53L0X_PerformSingleRangingMeasurement+0x26>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8001aca:	4629      	mov	r1, r5
 8001acc:	4620      	mov	r0, r4
 8001ace:	f7ff fe78 	bl	80017c2 <VL53L0X_GetRangingMeasurementData>
	if (Status == VL53L0X_ERROR_NONE)
 8001ad2:	b928      	cbnz	r0, 8001ae0 <VL53L0X_PerformSingleRangingMeasurement+0x26>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8001ad4:	4601      	mov	r1, r0
 8001ad6:	4620      	mov	r0, r4
}
 8001ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8001adc:	f7ff bfc1 	b.w	8001a62 <VL53L0X_ClearInterruptMask>
}
 8001ae0:	bd38      	pop	{r3, r4, r5, pc}

08001ae2 <VL53L0X_SetGpioConfig>:
{
 8001ae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ae4:	4605      	mov	r5, r0
 8001ae6:	461c      	mov	r4, r3
 8001ae8:	f89d 7018 	ldrb.w	r7, [sp, #24]
	if (Pin != 0) {
 8001aec:	460e      	mov	r6, r1
 8001aee:	2900      	cmp	r1, #0
 8001af0:	f040 809a 	bne.w	8001c28 <VL53L0X_SetGpioConfig+0x146>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8001af4:	2a14      	cmp	r2, #20
 8001af6:	d108      	bne.n	8001b0a <VL53L0X_SetGpioConfig+0x28>
			data = 1;
 8001af8:	2f00      	cmp	r7, #0
		Status = VL53L0X_WrByte(Dev,
 8001afa:	bf0c      	ite	eq
 8001afc:	2210      	moveq	r2, #16
 8001afe:	2201      	movne	r2, #1
 8001b00:	2184      	movs	r1, #132	; 0x84
}
 8001b02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		Status = VL53L0X_WrByte(Dev,
 8001b06:	f001 bf1b 	b.w	8003940 <VL53L0X_WrByte>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8001b0a:	2a15      	cmp	r2, #21
 8001b0c:	d167      	bne.n	8001bde <VL53L0X_SetGpioConfig+0xfc>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	21ff      	movs	r1, #255	; 0xff
 8001b12:	f001 ff15 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001b16:	4632      	mov	r2, r6
 8001b18:	4631      	mov	r1, r6
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8001b1a:	4604      	mov	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001b1c:	4628      	mov	r0, r5
 8001b1e:	f001 ff0f 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8001b22:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001b24:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8001b26:	21ff      	movs	r1, #255	; 0xff
 8001b28:	4628      	mov	r0, r5
 8001b2a:	f001 ff09 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001b2e:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8001b30:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8001b32:	2201      	movs	r2, #1
 8001b34:	2180      	movs	r1, #128	; 0x80
 8001b36:	4628      	mov	r0, r5
 8001b38:	f001 ff02 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8001b3c:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8001b3e:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8001b40:	2202      	movs	r2, #2
 8001b42:	2185      	movs	r1, #133	; 0x85
 8001b44:	4628      	mov	r0, r5
 8001b46:	f001 fefb 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8001b4a:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8001b4c:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8001b4e:	2204      	movs	r2, #4
 8001b50:	21ff      	movs	r1, #255	; 0xff
 8001b52:	4628      	mov	r0, r5
 8001b54:	f001 fef4 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8001b58:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8001b5a:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8001b5c:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8001b5e:	21cd      	movs	r1, #205	; 0xcd
 8001b60:	4628      	mov	r0, r5
 8001b62:	f001 feed 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8001b66:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8001b68:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8001b6a:	2211      	movs	r2, #17
 8001b6c:	21cc      	movs	r1, #204	; 0xcc
 8001b6e:	4628      	mov	r0, r5
 8001b70:	f001 fee6 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8001b74:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8001b76:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8001b78:	2207      	movs	r2, #7
 8001b7a:	21ff      	movs	r1, #255	; 0xff
 8001b7c:	4628      	mov	r0, r5
 8001b7e:	f001 fedf 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8001b82:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8001b84:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8001b86:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8001b88:	21be      	movs	r1, #190	; 0xbe
 8001b8a:	4628      	mov	r0, r5
 8001b8c:	f001 fed8 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8001b90:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8001b92:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8001b94:	2206      	movs	r2, #6
 8001b96:	21ff      	movs	r1, #255	; 0xff
 8001b98:	4628      	mov	r0, r5
 8001b9a:	f001 fed1 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8001b9e:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8001ba0:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8001ba2:	2209      	movs	r2, #9
 8001ba4:	21cc      	movs	r1, #204	; 0xcc
 8001ba6:	4628      	mov	r0, r5
 8001ba8:	f001 feca 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8001bac:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8001bae:	4632      	mov	r2, r6
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8001bb0:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8001bb2:	21ff      	movs	r1, #255	; 0xff
 8001bb4:	4628      	mov	r0, r5
 8001bb6:	f001 fec3 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8001bba:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8001bbc:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	21ff      	movs	r1, #255	; 0xff
 8001bc2:	4628      	mov	r0, r5
 8001bc4:	f001 febc 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8001bc8:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8001bca:	4304      	orrs	r4, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001bcc:	4632      	mov	r2, r6
 8001bce:	4631      	mov	r1, r6
 8001bd0:	4628      	mov	r0, r5
 8001bd2:	f001 feb5 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8001bd6:	b264      	sxtb	r4, r4
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8001bd8:	4320      	orrs	r0, r4
 8001bda:	b240      	sxtb	r0, r0
 8001bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			switch (Functionality) {
 8001bde:	2c04      	cmp	r4, #4
 8001be0:	d825      	bhi.n	8001c2e <VL53L0X_SetGpioConfig+0x14c>
 8001be2:	e8df f004 	tbb	[pc, r4]
 8001be6:	2729      	.short	0x2729
 8001be8:	0a03      	.short	0x0a03
 8001bea:	0c          	.byte	0x0c
 8001beb:	00          	.byte	0x00
				data = 0x02;
 8001bec:	2202      	movs	r2, #2
			Status = VL53L0X_WrByte(Dev,
 8001bee:	210a      	movs	r1, #10
 8001bf0:	4628      	mov	r0, r5
 8001bf2:	f001 fea5 	bl	8003940 <VL53L0X_WrByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8001bf6:	b120      	cbz	r0, 8001c02 <VL53L0X_SetGpioConfig+0x120>
}
 8001bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data = 0x03;
 8001bfa:	2203      	movs	r2, #3
				break;
 8001bfc:	e7f7      	b.n	8001bee <VL53L0X_SetGpioConfig+0x10c>
				data = 0x04;
 8001bfe:	2204      	movs	r2, #4
				break;
 8001c00:	e7f5      	b.n	8001bee <VL53L0X_SetGpioConfig+0x10c>
				data = (uint8_t)(1 << 4);
 8001c02:	2f00      	cmp	r7, #0
			Status = VL53L0X_UpdateByte(Dev,
 8001c04:	bf0c      	ite	eq
 8001c06:	4633      	moveq	r3, r6
 8001c08:	2310      	movne	r3, #16
 8001c0a:	22ef      	movs	r2, #239	; 0xef
 8001c0c:	2184      	movs	r1, #132	; 0x84
 8001c0e:	4628      	mov	r0, r5
 8001c10:	f001 feb8 	bl	8003984 <VL53L0X_UpdateByte>
		if (Status == VL53L0X_ERROR_NONE)
 8001c14:	2800      	cmp	r0, #0
 8001c16:	d1ef      	bne.n	8001bf8 <VL53L0X_SetGpioConfig+0x116>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8001c18:	f885 40da 	strb.w	r4, [r5, #218]	; 0xda
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8001c1c:	4601      	mov	r1, r0
 8001c1e:	4628      	mov	r0, r5
}
 8001c20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8001c24:	f7ff bf1d 	b.w	8001a62 <VL53L0X_ClearInterruptMask>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8001c28:	f06f 0009 	mvn.w	r0, #9
 8001c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				Status =
 8001c2e:	f06f 000a 	mvn.w	r0, #10
 8001c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				data = 0x01;
 8001c34:	2201      	movs	r2, #1
 8001c36:	e7da      	b.n	8001bee <VL53L0X_SetGpioConfig+0x10c>
				data = 0x00;
 8001c38:	2200      	movs	r2, #0
 8001c3a:	e7d8      	b.n	8001bee <VL53L0X_SetGpioConfig+0x10c>

08001c3c <VL53L0X_StaticInit>:
{
 8001c3c:	b570      	push	{r4, r5, r6, lr}
 8001c3e:	b096      	sub	sp, #88	; 0x58
 8001c40:	4605      	mov	r5, r0
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8001c42:	2240      	movs	r2, #64	; 0x40
 8001c44:	2100      	movs	r1, #0
 8001c46:	a806      	add	r0, sp, #24
 8001c48:	f004 f9bf 	bl	8005fca <memset>
	uint16_t tempword = 0;
 8001c4c:	2300      	movs	r3, #0
	Status = VL53L0X_get_info_from_device(Dev, 1);
 8001c4e:	2101      	movs	r1, #1
 8001c50:	4628      	mov	r0, r5
	uint16_t tempword = 0;
 8001c52:	f8ad 300e 	strh.w	r3, [sp, #14]
	uint8_t tempbyte = 0;
 8001c56:	f88d 300b 	strb.w	r3, [sp, #11]
	uint8_t isApertureSpads = 0;
 8001c5a:	f88d 300c 	strb.w	r3, [sp, #12]
	uint32_t refSpadCount = 0;
 8001c5e:	9304      	str	r3, [sp, #16]
	Status = VL53L0X_get_info_from_device(Dev, 1);
 8001c60:	f000 fcb8 	bl	80025d4 <VL53L0X_get_info_from_device>
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001c64:	f895 2114 	ldrb.w	r2, [r5, #276]	; 0x114
	if ((ApertureSpads > 1) ||
 8001c68:	2a01      	cmp	r2, #1
 8001c6a:	d806      	bhi.n	8001c7a <VL53L0X_StaticInit+0x3e>
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8001c6c:	f895 1113 	ldrb.w	r1, [r5, #275]	; 0x113
	if ((ApertureSpads > 1) ||
 8001c70:	f040 80ae 	bne.w	8001dd0 <VL53L0X_StaticInit+0x194>
		((ApertureSpads == 1) && (count > 32)) ||
 8001c74:	2920      	cmp	r1, #32
		((ApertureSpads == 0) && (count > 12)))
 8001c76:	f240 80ad 	bls.w	8001dd4 <VL53L0X_StaticInit+0x198>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8001c7a:	aa03      	add	r2, sp, #12
 8001c7c:	a904      	add	r1, sp, #16
 8001c7e:	4628      	mov	r0, r5
 8001c80:	f000 fb20 	bl	80022c4 <VL53L0X_perform_ref_spad_management>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8001c84:	4604      	mov	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 8001c86:	2800      	cmp	r0, #0
 8001c88:	f040 809f 	bne.w	8001dca <VL53L0X_StaticInit+0x18e>
		if (UseInternalTuningSettings == 0)
 8001c8c:	f895 314c 	ldrb.w	r3, [r5, #332]	; 0x14c
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f040 80a3 	bne.w	8001ddc <VL53L0X_StaticInit+0x1a0>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8001c96:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8001c9a:	4628      	mov	r0, r5
 8001c9c:	f001 fa78 	bl	8003190 <VL53L0X_load_tuning_settings>
	if (Status == VL53L0X_ERROR_NONE) {
 8001ca0:	4604      	mov	r4, r0
 8001ca2:	2800      	cmp	r0, #0
 8001ca4:	f040 8091 	bne.w	8001dca <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8001ca8:	9400      	str	r4, [sp, #0]
 8001caa:	4622      	mov	r2, r4
 8001cac:	4621      	mov	r1, r4
 8001cae:	2304      	movs	r3, #4
 8001cb0:	4628      	mov	r0, r5
 8001cb2:	f7ff ff16 	bl	8001ae2 <VL53L0X_SetGpioConfig>
	if (Status == VL53L0X_ERROR_NONE) {
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	2800      	cmp	r0, #0
 8001cba:	f040 8086 	bne.w	8001dca <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	21ff      	movs	r1, #255	; 0xff
 8001cc2:	4628      	mov	r0, r5
 8001cc4:	f001 fe3c 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8001cc8:	f10d 020e 	add.w	r2, sp, #14
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001ccc:	4606      	mov	r6, r0
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8001cce:	2184      	movs	r1, #132	; 0x84
 8001cd0:	4628      	mov	r0, r5
 8001cd2:	f001 fdef 	bl	80038b4 <VL53L0X_RdWord>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001cd6:	4622      	mov	r2, r4
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8001cd8:	4306      	orrs	r6, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001cda:	21ff      	movs	r1, #255	; 0xff
 8001cdc:	4628      	mov	r0, r5
 8001cde:	f001 fe2f 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8001ce2:	b276      	sxtb	r6, r6
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001ce4:	4330      	orrs	r0, r6
 8001ce6:	b244      	sxtb	r4, r0
	if (Status == VL53L0X_ERROR_NONE) {
 8001ce8:	2c00      	cmp	r4, #0
 8001cea:	d16e      	bne.n	8001dca <VL53L0X_StaticInit+0x18e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8001cec:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8001cf6:	a906      	add	r1, sp, #24
 8001cf8:	4628      	mov	r0, r5
 8001cfa:	f7ff fc8d 	bl	8001618 <VL53L0X_GetDeviceParameters>
	if (Status == VL53L0X_ERROR_NONE) {
 8001cfe:	4604      	mov	r4, r0
 8001d00:	2800      	cmp	r0, #0
 8001d02:	d162      	bne.n	8001dca <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8001d04:	f10d 010b 	add.w	r1, sp, #11
 8001d08:	4628      	mov	r0, r5
 8001d0a:	f7ff faf3 	bl	80012f4 <VL53L0X_GetFractionEnable>
		if (Status == VL53L0X_ERROR_NONE)
 8001d0e:	4604      	mov	r4, r0
 8001d10:	2800      	cmp	r0, #0
 8001d12:	d15a      	bne.n	8001dca <VL53L0X_StaticInit+0x18e>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8001d14:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001d18:	f885 3131 	strb.w	r3, [r5, #305]	; 0x131
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8001d1c:	ae06      	add	r6, sp, #24
 8001d1e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d20:	f105 0410 	add.w	r4, r5, #16
 8001d24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d26:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d2a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d2e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Status = VL53L0X_RdByte(Dev,
 8001d36:	f10d 020b 	add.w	r2, sp, #11
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	4628      	mov	r0, r5
 8001d3e:	f001 fd70 	bl	8003822 <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE)
 8001d42:	4604      	mov	r4, r0
 8001d44:	2800      	cmp	r0, #0
 8001d46:	d140      	bne.n	8001dca <VL53L0X_StaticInit+0x18e>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8001d48:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001d4c:	f885 3130 	strb.w	r3, [r5, #304]	; 0x130
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8001d50:	4602      	mov	r2, r0
 8001d52:	4601      	mov	r1, r0
 8001d54:	4628      	mov	r0, r5
 8001d56:	f7ff fadf 	bl	8001318 <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8001d5a:	4604      	mov	r4, r0
 8001d5c:	bba8      	cbnz	r0, 8001dca <VL53L0X_StaticInit+0x18e>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8001d5e:	4602      	mov	r2, r0
 8001d60:	2102      	movs	r1, #2
 8001d62:	4628      	mov	r0, r5
 8001d64:	f7ff fad8 	bl	8001318 <VL53L0X_SetSequenceStepEnable>
	if (Status == VL53L0X_ERROR_NONE)
 8001d68:	4604      	mov	r4, r0
 8001d6a:	bb70      	cbnz	r0, 8001dca <VL53L0X_StaticInit+0x18e>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8001d6c:	2303      	movs	r3, #3
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8001d6e:	4601      	mov	r1, r0
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8001d70:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8001d74:	f10d 020d 	add.w	r2, sp, #13
 8001d78:	4628      	mov	r0, r5
 8001d7a:	f001 f92a 	bl	8002fd2 <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 8001d7e:	4604      	mov	r4, r0
 8001d80:	bb18      	cbnz	r0, 8001dca <VL53L0X_StaticInit+0x18e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8001d82:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001d86:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8001d8a:	f10d 020d 	add.w	r2, sp, #13
 8001d8e:	2101      	movs	r1, #1
 8001d90:	4628      	mov	r0, r5
 8001d92:	f001 f91e 	bl	8002fd2 <VL53L0X_get_vcsel_pulse_period>
	if (Status == VL53L0X_ERROR_NONE) {
 8001d96:	4604      	mov	r4, r0
 8001d98:	b9b8      	cbnz	r0, 8001dca <VL53L0X_StaticInit+0x18e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8001d9a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8001d9e:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		Status = VL53L0X_GetSequenceStepTimeout(
 8001da2:	aa05      	add	r2, sp, #20
 8001da4:	2103      	movs	r1, #3
 8001da6:	4628      	mov	r0, r5
 8001da8:	f7ff fb23 	bl	80013f2 <VL53L0X_GetSequenceStepTimeout>
	if (Status == VL53L0X_ERROR_NONE) {
 8001dac:	4604      	mov	r4, r0
 8001dae:	b960      	cbnz	r0, 8001dca <VL53L0X_StaticInit+0x18e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8001db0:	9b05      	ldr	r3, [sp, #20]
 8001db2:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
		Status = VL53L0X_GetSequenceStepTimeout(
 8001db6:	aa05      	add	r2, sp, #20
 8001db8:	2104      	movs	r1, #4
 8001dba:	4628      	mov	r0, r5
 8001dbc:	f7ff fb19 	bl	80013f2 <VL53L0X_GetSequenceStepTimeout>
	if (Status == VL53L0X_ERROR_NONE) {
 8001dc0:	4604      	mov	r4, r0
 8001dc2:	b910      	cbnz	r0, 8001dca <VL53L0X_StaticInit+0x18e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8001dc4:	9b05      	ldr	r3, [sp, #20]
 8001dc6:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
}
 8001dca:	4620      	mov	r0, r4
 8001dcc:	b016      	add	sp, #88	; 0x58
 8001dce:	bd70      	pop	{r4, r5, r6, pc}
		((ApertureSpads == 0) && (count > 12)))
 8001dd0:	290c      	cmp	r1, #12
 8001dd2:	e750      	b.n	8001c76 <VL53L0X_StaticInit+0x3a>
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8001dd4:	4628      	mov	r0, r5
 8001dd6:	f000 f913 	bl	8002000 <VL53L0X_set_reference_spads>
 8001dda:	e753      	b.n	8001c84 <VL53L0X_StaticInit+0x48>
			pTuningSettingBuffer = DefaultTuningSettings;
 8001ddc:	4900      	ldr	r1, [pc, #0]	; (8001de0 <VL53L0X_StaticInit+0x1a4>)
 8001dde:	e75c      	b.n	8001c9a <VL53L0X_StaticInit+0x5e>
 8001de0:	2000033e 	.word	0x2000033e

08001de4 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8001de4:	b513      	push	{r0, r1, r4, lr}
 8001de6:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8001de8:	f10d 0207 	add.w	r2, sp, #7
 8001dec:	2113      	movs	r1, #19
 8001dee:	f001 fd18 	bl	8003822 <VL53L0X_RdByte>
	*pInterruptMaskStatus = Byte & 0x07;
 8001df2:	f89d 3007 	ldrb.w	r3, [sp, #7]

	if (Byte & 0x18)
 8001df6:	f013 0f18 	tst.w	r3, #24
	*pInterruptMaskStatus = Byte & 0x07;
 8001dfa:	f003 0207 	and.w	r2, r3, #7
		Status = VL53L0X_ERROR_RANGE_ERROR;

	LOG_FUNCTION_END(Status);
	return Status;
}
 8001dfe:	bf18      	it	ne
 8001e00:	f06f 0005 	mvnne.w	r0, #5
	*pInterruptMaskStatus = Byte & 0x07;
 8001e04:	6022      	str	r2, [r4, #0]
}
 8001e06:	b002      	add	sp, #8
 8001e08:	bd10      	pop	{r4, pc}

08001e0a <VL53L0X_GetMeasurementDataReady>:
{
 8001e0a:	b513      	push	{r0, r1, r4, lr}
	if (InterruptConfig ==
 8001e0c:	f890 30da 	ldrb.w	r3, [r0, #218]	; 0xda
 8001e10:	2b04      	cmp	r3, #4
{
 8001e12:	460c      	mov	r4, r1
	if (InterruptConfig ==
 8001e14:	d10b      	bne.n	8001e2e <VL53L0X_GetMeasurementDataReady+0x24>
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8001e16:	a901      	add	r1, sp, #4
 8001e18:	f7ff ffe4 	bl	8001de4 <VL53L0X_GetInterruptMaskStatus>
		if (InterruptMask ==
 8001e1c:	9b01      	ldr	r3, [sp, #4]
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d101      	bne.n	8001e26 <VL53L0X_GetMeasurementDataReady+0x1c>
				*pMeasurementDataReady = 1;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <VL53L0X_GetMeasurementDataReady+0x1e>
			*pMeasurementDataReady = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	7023      	strb	r3, [r4, #0]
}
 8001e2a:	b002      	add	sp, #8
 8001e2c:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8001e2e:	aa01      	add	r2, sp, #4
 8001e30:	2114      	movs	r1, #20
 8001e32:	f001 fcf6 	bl	8003822 <VL53L0X_RdByte>
		if (Status == VL53L0X_ERROR_NONE) {
 8001e36:	2800      	cmp	r0, #0
 8001e38:	d1f7      	bne.n	8001e2a <VL53L0X_GetMeasurementDataReady+0x20>
			if (SysRangeStatusRegister & 0x01)
 8001e3a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001e3e:	07db      	lsls	r3, r3, #31
 8001e40:	d4ef      	bmi.n	8001e22 <VL53L0X_GetMeasurementDataReady+0x18>
				*pMeasurementDataReady = 0;
 8001e42:	7020      	strb	r0, [r4, #0]
 8001e44:	e7f1      	b.n	8001e2a <VL53L0X_GetMeasurementDataReady+0x20>

08001e46 <VL53L0X_PerformRefSpadManagement>:
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8001e46:	f000 ba3d 	b.w	80022c4 <VL53L0X_perform_ref_spad_management>

08001e4a <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8001e4a:	b513      	push	{r0, r1, r4, lr}
 8001e4c:	460c      	mov	r4, r1
	int16_t cMaxOffset = 2047;
	int16_t cOffsetRange = 4096;

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8001e4e:	f10d 0206 	add.w	r2, sp, #6
 8001e52:	2128      	movs	r1, #40	; 0x28
 8001e54:	f001 fd2e 	bl	80038b4 <VL53L0X_RdWord>
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8001e58:	b970      	cbnz	r0, 8001e78 <VL53L0X_get_offset_calibration_data_micro_meter+0x2e>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8001e5a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001e5e:	f3c3 030b 	ubfx	r3, r3, #0, #12

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8001e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e66:	f04f 02fa 	mov.w	r2, #250	; 0xfa
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8001e6a:	bf26      	itte	cs
 8001e6c:	f5a3 5380 	subcs.w	r3, r3, #4096	; 0x1000
					* 250;
 8001e70:	fb13 f302 	smulbbcs	r3, r3, r2
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8001e74:	4353      	mulcc	r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8001e76:	6023      	str	r3, [r4, #0]

	}

	return Status;
}
 8001e78:	b002      	add	sp, #8
 8001e7a:	bd10      	pop	{r4, pc}

08001e7c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8001e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * the index of the bit within each byte.
	 */

	*next = -1;

	startIndex = curr / cSpadsPerByte;
 8001e7e:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
	*next = -1;
 8001e82:	f04f 34ff 	mov.w	r4, #4294967295
 8001e86:	601c      	str	r4, [r3, #0]
	fineOffset = curr % cSpadsPerByte;
 8001e88:	f002 0207 	and.w	r2, r2, #7
 8001e8c:	ea4f 0cce 	mov.w	ip, lr, lsl #3

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8001e90:	4676      	mov	r6, lr
	uint8_t success = 0;
 8001e92:	2700      	movs	r7, #0
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8001e94:	428e      	cmp	r6, r1
 8001e96:	d200      	bcs.n	8001e9a <get_next_good_spad+0x1e>
 8001e98:	b107      	cbz	r7, 8001e9c <get_next_good_spad+0x20>
 8001e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				coarseIndex++) {
		fineIndex = 0;
		dataByte = goodSpadArray[coarseIndex];
 8001e9c:	5d85      	ldrb	r5, [r0, r6]

		if (coarseIndex == startIndex) {
 8001e9e:	4576      	cmp	r6, lr
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8001ea0:	bf03      	ittte	eq
 8001ea2:	4115      	asreq	r5, r2
 8001ea4:	b2ed      	uxtbeq	r5, r5
			fineIndex = fineOffset;
 8001ea6:	4614      	moveq	r4, r2
		fineIndex = 0;
 8001ea8:	463c      	movne	r4, r7
		}

		while (fineIndex < cSpadsPerByte) {
			if ((dataByte & 0x1) == 1) {
 8001eaa:	f015 0f01 	tst.w	r5, #1
 8001eae:	d006      	beq.n	8001ebe <get_next_good_spad+0x42>
				success = 1;
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8001eb0:	4464      	add	r4, ip
 8001eb2:	601c      	str	r4, [r3, #0]
				success = 1;
 8001eb4:	2701      	movs	r7, #1
				coarseIndex++) {
 8001eb6:	3601      	adds	r6, #1
 8001eb8:	f10c 0c08 	add.w	ip, ip, #8
 8001ebc:	e7ea      	b.n	8001e94 <get_next_good_spad+0x18>
				break;
			}
			dataByte >>= 1;
			fineIndex++;
 8001ebe:	3401      	adds	r4, #1
		while (fineIndex < cSpadsPerByte) {
 8001ec0:	2c08      	cmp	r4, #8
			dataByte >>= 1;
 8001ec2:	ea4f 0555 	mov.w	r5, r5, lsr #1
		while (fineIndex < cSpadsPerByte) {
 8001ec6:	d1f0      	bne.n	8001eaa <get_next_good_spad+0x2e>
 8001ec8:	e7f5      	b.n	8001eb6 <get_next_good_spad+0x3a>
	...

08001ecc <is_aperture>:
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
	quadrant = spadIndex >> 6;
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8001ecc:	4b03      	ldr	r3, [pc, #12]	; (8001edc <is_aperture+0x10>)
	quadrant = spadIndex >> 6;
 8001ece:	0980      	lsrs	r0, r0, #6
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8001ed0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
		isAperture = 0;

	return isAperture;
}
 8001ed4:	3000      	adds	r0, #0
 8001ed6:	bf18      	it	ne
 8001ed8:	2001      	movne	r0, #1
 8001eda:	4770      	bx	lr
 8001edc:	20000434 	.word	0x20000434

08001ee0 <enable_spad_bit>:
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t cSpadsPerByte = 8;
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8001ee0:	08d3      	lsrs	r3, r2, #3
	fineIndex = spadIndex % cSpadsPerByte;
	if (coarseIndex >= size)
 8001ee2:	428b      	cmp	r3, r1
	fineIndex = spadIndex % cSpadsPerByte;
 8001ee4:	f002 0207 	and.w	r2, r2, #7
		status = VL53L0X_ERROR_REF_SPAD_INIT;
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8001ee8:	bf3f      	itttt	cc
 8001eea:	2101      	movcc	r1, #1
 8001eec:	4091      	lslcc	r1, r2
 8001eee:	5cc2      	ldrbcc	r2, [r0, r3]
 8001ef0:	430a      	orrcc	r2, r1
 8001ef2:	bf3a      	itte	cc
 8001ef4:	54c2      	strbcc	r2, [r0, r3]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8001ef6:	2000      	movcc	r0, #0
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8001ef8:	f06f 0031 	mvncs.w	r0, #49	; 0x31

	return status;
}
 8001efc:	4770      	bx	lr

08001efe <set_ref_spad_map>:
	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8001efe:	460a      	mov	r2, r1
 8001f00:	2306      	movs	r3, #6
 8001f02:	21b0      	movs	r1, #176	; 0xb0
 8001f04:	f001 bca2 	b.w	800384c <VL53L0X_WriteMulti>

08001f08 <get_ref_spad_map>:
	return status;
}

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8001f08:	460a      	mov	r2, r1
 8001f0a:	2306      	movs	r3, #6
 8001f0c:	21b0      	movs	r1, #176	; 0xb0
 8001f0e:	f001 bcbb 	b.w	8003888 <VL53L0X_ReadMulti>

08001f12 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8001f12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f16:	b087      	sub	sp, #28
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8001f18:	f10d 0918 	add.w	r9, sp, #24
{
 8001f1c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8001f1e:	9f10      	ldr	r7, [sp, #64]	; 0x40
	int32_t nextGoodSpad = offset;
 8001f20:	f849 4d0c 	str.w	r4, [r9, #-12]!
{
 8001f24:	4682      	mov	sl, r0
 8001f26:	468b      	mov	fp, r1
 8001f28:	9201      	str	r2, [sp, #4]
 8001f2a:	461d      	mov	r5, r3
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
	for (index = 0; index < spadCount; index++) {
 8001f2c:	f04f 0800 	mov.w	r8, #0
 8001f30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001f32:	4598      	cmp	r8, r3
 8001f34:	d114      	bne.n	8001f60 <enable_ref_spads+0x4e>
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8001f36:	2000      	movs	r0, #0
		}
		currentSpad = (uint32_t)nextGoodSpad;
		enable_spad_bit(spadArray, size, currentSpad);
		currentSpad++;
	}
	*lastSpad = currentSpad;
 8001f38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001f3a:	601c      	str	r4, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8001f3c:	b968      	cbnz	r0, 8001f5a <enable_ref_spads+0x48>
		status = set_ref_spad_map(Dev, spadArray);
 8001f3e:	4629      	mov	r1, r5
 8001f40:	4650      	mov	r0, sl
 8001f42:	f7ff ffdc 	bl	8001efe <set_ref_spad_map>
 8001f46:	4604      	mov	r4, r0


	if (status == VL53L0X_ERROR_NONE) {
 8001f48:	b938      	cbnz	r0, 8001f5a <enable_ref_spads+0x48>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8001f4a:	ae04      	add	r6, sp, #16
 8001f4c:	4631      	mov	r1, r6
 8001f4e:	4650      	mov	r0, sl
 8001f50:	f7ff ffda 	bl	8001f08 <get_ref_spad_map>

		i = 0;
 8001f54:	4623      	mov	r3, r4

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8001f56:	429f      	cmp	r7, r3
 8001f58:	d11d      	bne.n	8001f96 <enable_ref_spads+0x84>
			}
			i++;
		}
	}
	return status;
}
 8001f5a:	b007      	add	sp, #28
 8001f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8001f60:	464b      	mov	r3, r9
 8001f62:	4622      	mov	r2, r4
 8001f64:	4639      	mov	r1, r7
 8001f66:	9801      	ldr	r0, [sp, #4]
 8001f68:	f7ff ff88 	bl	8001e7c <get_next_good_spad>
		if (nextGoodSpad == -1) {
 8001f6c:	9e03      	ldr	r6, [sp, #12]
 8001f6e:	1c73      	adds	r3, r6, #1
 8001f70:	d00e      	beq.n	8001f90 <enable_ref_spads+0x7e>
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8001f72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001f74:	18f0      	adds	r0, r6, r3
 8001f76:	f7ff ffa9 	bl	8001ecc <is_aperture>
 8001f7a:	4558      	cmp	r0, fp
 8001f7c:	d108      	bne.n	8001f90 <enable_ref_spads+0x7e>
		enable_spad_bit(spadArray, size, currentSpad);
 8001f7e:	4632      	mov	r2, r6
 8001f80:	4639      	mov	r1, r7
 8001f82:	4628      	mov	r0, r5
 8001f84:	f7ff ffac 	bl	8001ee0 <enable_spad_bit>
		currentSpad++;
 8001f88:	1c74      	adds	r4, r6, #1
	for (index = 0; index < spadCount; index++) {
 8001f8a:	f108 0801 	add.w	r8, r8, #1
 8001f8e:	e7cf      	b.n	8001f30 <enable_ref_spads+0x1e>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8001f90:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001f94:	e7d0      	b.n	8001f38 <enable_ref_spads+0x26>
			if (spadArray[i] != checkSpadArray[i]) {
 8001f96:	5ce9      	ldrb	r1, [r5, r3]
 8001f98:	5cf2      	ldrb	r2, [r6, r3]
 8001f9a:	4291      	cmp	r1, r2
 8001f9c:	d101      	bne.n	8001fa2 <enable_ref_spads+0x90>
			i++;
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	e7d9      	b.n	8001f56 <enable_ref_spads+0x44>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8001fa2:	f06f 0031 	mvn.w	r0, #49	; 0x31
 8001fa6:	e7d8      	b.n	8001f5a <enable_ref_spads+0x48>

08001fa8 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8001fa8:	b570      	push	{r4, r5, r6, lr}

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
		status = VL53L0X_WrByte(Dev,
 8001faa:	22c0      	movs	r2, #192	; 0xc0
{
 8001fac:	b088      	sub	sp, #32
 8001fae:	460e      	mov	r6, r1
		status = VL53L0X_WrByte(Dev,
 8001fb0:	2101      	movs	r1, #1
{
 8001fb2:	4604      	mov	r4, r0
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8001fb4:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130
		status = VL53L0X_WrByte(Dev,
 8001fb8:	f001 fcc2 	bl	8003940 <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8001fbc:	b9f0      	cbnz	r0, 8001ffc <perform_ref_signal_measurement+0x54>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8001fbe:	a901      	add	r1, sp, #4
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	f7ff fd7a 	bl	8001aba <VL53L0X_PerformSingleRangingMeasurement>
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8001fc6:	b9c8      	cbnz	r0, 8001ffc <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8001fc8:	2201      	movs	r2, #1
 8001fca:	21ff      	movs	r1, #255	; 0xff
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f001 fcb7 	bl	8003940 <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE)
 8001fd2:	b998      	cbnz	r0, 8001ffc <perform_ref_signal_measurement+0x54>
		status = VL53L0X_RdWord(Dev,
 8001fd4:	4632      	mov	r2, r6
 8001fd6:	21b6      	movs	r1, #182	; 0xb6
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f001 fc6b 	bl	80038b4 <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8001fde:	b968      	cbnz	r0, 8001ffc <perform_ref_signal_measurement+0x54>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	21ff      	movs	r1, #255	; 0xff
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f001 fcab 	bl	8003940 <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE) {
 8001fea:	b938      	cbnz	r0, 8001ffc <perform_ref_signal_measurement+0x54>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8001fec:	462a      	mov	r2, r5
 8001fee:	2101      	movs	r1, #1
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	f001 fca5 	bl	8003940 <VL53L0X_WrByte>
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8001ff6:	b908      	cbnz	r0, 8001ffc <perform_ref_signal_measurement+0x54>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8001ff8:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
	}

	return status;
}
 8001ffc:	b008      	add	sp, #32
 8001ffe:	bd70      	pop	{r4, r5, r6, pc}

08002000 <VL53L0X_set_reference_spads>:
	return Status;
}

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8002000:	b570      	push	{r4, r5, r6, lr}
 8002002:	460e      	mov	r6, r1
 8002004:	b088      	sub	sp, #32
 8002006:	4615      	mov	r5, r2
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002008:	21ff      	movs	r1, #255	; 0xff
 800200a:	2201      	movs	r2, #1
{
 800200c:	4604      	mov	r4, r0
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800200e:	f001 fc97 	bl	8003940 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8002012:	4602      	mov	r2, r0
 8002014:	b9a8      	cbnz	r0, 8002042 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8002016:	214f      	movs	r1, #79	; 0x4f
 8002018:	4620      	mov	r0, r4
 800201a:	f001 fc91 	bl	8003940 <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800201e:	b980      	cbnz	r0, 8002042 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8002020:	222c      	movs	r2, #44	; 0x2c
 8002022:	214e      	movs	r1, #78	; 0x4e
 8002024:	4620      	mov	r0, r4
 8002026:	f001 fc8b 	bl	8003940 <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800202a:	4602      	mov	r2, r0
 800202c:	b948      	cbnz	r0, 8002042 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800202e:	21ff      	movs	r1, #255	; 0xff
 8002030:	4620      	mov	r0, r4
 8002032:	f001 fc85 	bl	8003940 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8002036:	b920      	cbnz	r0, 8002042 <VL53L0X_set_reference_spads+0x42>
		Status = VL53L0X_WrByte(Dev,
 8002038:	22b4      	movs	r2, #180	; 0xb4
 800203a:	21b6      	movs	r1, #182	; 0xb6
 800203c:	4620      	mov	r0, r4
 800203e:	f001 fc7f 	bl	8003940 <VL53L0X_WrByte>
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
 8002048:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
 800204c:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
 8002050:	f884 3127 	strb.w	r3, [r4, #295]	; 0x127
 8002054:	f884 3128 	strb.w	r3, [r4, #296]	; 0x128
 8002058:	f884 3129 	strb.w	r3, [r4, #297]	; 0x129

	if (isApertureSpads) {
 800205c:	b31d      	cbz	r5, 80020a6 <VL53L0X_set_reference_spads+0xa6>
 800205e:	461a      	mov	r2, r3
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8002060:	f102 00b4 	add.w	r0, r2, #180	; 0xb4
 8002064:	f7ff ff32 	bl	8001ecc <is_aperture>
 8002068:	b908      	cbnz	r0, 800206e <VL53L0X_set_reference_spads+0x6e>
 800206a:	2a2c      	cmp	r2, #44	; 0x2c
 800206c:	d119      	bne.n	80020a2 <VL53L0X_set_reference_spads+0xa2>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
		}
	}
	Status = enable_ref_spads(Dev,
 800206e:	ab07      	add	r3, sp, #28
 8002070:	9304      	str	r3, [sp, #16]
 8002072:	9202      	str	r2, [sp, #8]
 8002074:	23b4      	movs	r3, #180	; 0xb4
 8002076:	2206      	movs	r2, #6
 8002078:	e88d 000c 	stmia.w	sp, {r2, r3}
 800207c:	9603      	str	r6, [sp, #12]
 800207e:	f504 7392 	add.w	r3, r4, #292	; 0x124
 8002082:	f504 7295 	add.w	r2, r4, #298	; 0x12a
 8002086:	4629      	mov	r1, r5
 8002088:	4620      	mov	r0, r4
 800208a:	f7ff ff42 	bl	8001f12 <enable_ref_spads>
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800208e:	b930      	cbnz	r0, 800209e <VL53L0X_set_reference_spads+0x9e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8002090:	2301      	movs	r3, #1
 8002092:	f884 3115 	strb.w	r3, [r4, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002096:	f884 6113 	strb.w	r6, [r4, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800209a:	f884 5114 	strb.w	r5, [r4, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
}
 800209e:	b008      	add	sp, #32
 80020a0:	bd70      	pop	{r4, r5, r6, pc}
			currentSpadIndex++;
 80020a2:	3201      	adds	r2, #1
 80020a4:	e7dc      	b.n	8002060 <VL53L0X_set_reference_spads+0x60>
	uint32_t currentSpadIndex = 0;
 80020a6:	462a      	mov	r2, r5
 80020a8:	e7e1      	b.n	800206e <VL53L0X_set_reference_spads+0x6e>

080020aa <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80020aa:	b510      	push	{r4, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80020ac:	f041 0201 	orr.w	r2, r1, #1
 80020b0:	2100      	movs	r1, #0
{
 80020b2:	4604      	mov	r4, r0
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80020b4:	f001 fc44 	bl	8003940 <VL53L0X_WrByte>
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80020b8:	b978      	cbnz	r0, 80020da <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80020ba:	4620      	mov	r0, r4
 80020bc:	f000 fa3a 	bl	8002534 <VL53L0X_measurement_poll_for_completion>

	if (Status == VL53L0X_ERROR_NONE)
 80020c0:	b958      	cbnz	r0, 80020da <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80020c2:	4601      	mov	r1, r0
 80020c4:	4620      	mov	r0, r4
 80020c6:	f7ff fccc 	bl	8001a62 <VL53L0X_ClearInterruptMask>

	if (Status == VL53L0X_ERROR_NONE)
 80020ca:	b930      	cbnz	r0, 80020da <VL53L0X_perform_single_ref_calibration+0x30>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80020cc:	4602      	mov	r2, r0
 80020ce:	4601      	mov	r1, r0
 80020d0:	4620      	mov	r0, r4

	return Status;
}
 80020d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80020d6:	f001 bc33 	b.w	8003940 <VL53L0X_WrByte>
}
 80020da:	bd10      	pop	{r4, pc}

080020dc <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 80020dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t PhaseCalint = 0;
 80020e0:	f04f 0b00 	mov.w	fp, #0
{
 80020e4:	4689      	mov	r9, r1
 80020e6:	4690      	mov	r8, r2

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80020e8:	21ff      	movs	r1, #255	; 0xff
 80020ea:	2201      	movs	r2, #1
{
 80020ec:	4605      	mov	r5, r0
 80020ee:	461f      	mov	r7, r3
 80020f0:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 80020f4:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
	uint8_t PhaseCalint = 0;
 80020f8:	f88d b007 	strb.w	fp, [sp, #7]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80020fc:	f001 fc20 	bl	8003940 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002100:	465a      	mov	r2, fp
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002102:	4604      	mov	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002104:	4659      	mov	r1, fp
 8002106:	4628      	mov	r0, r5
 8002108:	f001 fc1a 	bl	8003940 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800210c:	465a      	mov	r2, fp
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800210e:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002110:	21ff      	movs	r1, #255	; 0xff
 8002112:	4628      	mov	r0, r5
 8002114:	f001 fc14 	bl	8003940 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002118:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800211a:	4304      	orrs	r4, r0
 800211c:	b264      	sxtb	r4, r4

	if (read_not_write) {
 800211e:	f1b9 0f00 	cmp.w	r9, #0
 8002122:	d030      	beq.n	8002186 <VL53L0X_ref_calibration_io+0xaa>
		if (vhv_enable)
 8002124:	f1ba 0f00 	cmp.w	sl, #0
 8002128:	d006      	beq.n	8002138 <VL53L0X_ref_calibration_io+0x5c>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800212a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800212c:	21cb      	movs	r1, #203	; 0xcb
 800212e:	4628      	mov	r0, r5
 8002130:	f001 fb77 	bl	8003822 <VL53L0X_RdByte>
 8002134:	4304      	orrs	r4, r0
 8002136:	b264      	sxtb	r4, r4
		if (phase_enable)
 8002138:	b13e      	cbz	r6, 800214a <VL53L0X_ref_calibration_io+0x6e>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800213a:	f10d 0207 	add.w	r2, sp, #7
 800213e:	21ee      	movs	r1, #238	; 0xee
 8002140:	4628      	mov	r0, r5
 8002142:	f001 fb6e 	bl	8003822 <VL53L0X_RdByte>
	} else {
		if (vhv_enable)
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
		if (phase_enable)
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8002146:	4304      	orrs	r4, r0
 8002148:	b264      	sxtb	r4, r4
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800214a:	2201      	movs	r2, #1
 800214c:	21ff      	movs	r1, #255	; 0xff
 800214e:	4628      	mov	r0, r5
 8002150:	f001 fbf6 	bl	8003940 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002154:	2201      	movs	r2, #1
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002156:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002158:	2100      	movs	r1, #0
 800215a:	4628      	mov	r0, r5
 800215c:	f001 fbf0 	bl	8003940 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002160:	b264      	sxtb	r4, r4
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002162:	4304      	orrs	r4, r0
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002164:	2200      	movs	r2, #0
 8002166:	21ff      	movs	r1, #255	; 0xff
 8002168:	4628      	mov	r0, r5
 800216a:	f001 fbe9 	bl	8003940 <VL53L0X_WrByte>
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800216e:	b264      	sxtb	r4, r4

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8002170:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002174:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002176:	4320      	orrs	r0, r4
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8002178:	f023 0310 	bic.w	r3, r3, #16

	return Status;
}
 800217c:	b240      	sxtb	r0, r0
	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800217e:	7013      	strb	r3, [r2, #0]
}
 8002180:	b003      	add	sp, #12
 8002182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (vhv_enable)
 8002186:	f1ba 0f00 	cmp.w	sl, #0
 800218a:	d006      	beq.n	800219a <VL53L0X_ref_calibration_io+0xbe>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800218c:	4642      	mov	r2, r8
 800218e:	21cb      	movs	r1, #203	; 0xcb
 8002190:	4628      	mov	r0, r5
 8002192:	f001 fbd5 	bl	8003940 <VL53L0X_WrByte>
 8002196:	4304      	orrs	r4, r0
 8002198:	b264      	sxtb	r4, r4
		if (phase_enable)
 800219a:	2e00      	cmp	r6, #0
 800219c:	d0d5      	beq.n	800214a <VL53L0X_ref_calibration_io+0x6e>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800219e:	463b      	mov	r3, r7
 80021a0:	2280      	movs	r2, #128	; 0x80
 80021a2:	21ee      	movs	r1, #238	; 0xee
 80021a4:	4628      	mov	r0, r5
 80021a6:	f001 fbed 	bl	8003984 <VL53L0X_UpdateByte>
 80021aa:	e7cc      	b.n	8002146 <VL53L0X_ref_calibration_io+0x6a>

080021ac <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80021ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	4617      	mov	r7, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint8_t PhaseCalInt = 0;
 80021b4:	2200      	movs	r2, #0
{
 80021b6:	4604      	mov	r4, r0
 80021b8:	4688      	mov	r8, r1
	uint8_t PhaseCalInt = 0;
 80021ba:	f88d 2017 	strb.w	r2, [sp, #23]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80021be:	461e      	mov	r6, r3
 80021c0:	b343      	cbz	r3, 8002214 <VL53L0X_perform_vhv_calibration+0x68>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80021c2:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80021c6:	2201      	movs	r2, #1
 80021c8:	4611      	mov	r1, r2
 80021ca:	4620      	mov	r0, r4
 80021cc:	f001 fbb8 	bl	8003940 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 80021d0:	bb10      	cbnz	r0, 8002218 <VL53L0X_perform_vhv_calibration+0x6c>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80021d2:	2140      	movs	r1, #64	; 0x40
 80021d4:	4620      	mov	r0, r4
 80021d6:	f7ff ff68 	bl	80020aa <VL53L0X_perform_single_ref_calibration>

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80021da:	b9e8      	cbnz	r0, 8002218 <VL53L0X_perform_vhv_calibration+0x6c>
 80021dc:	2f01      	cmp	r7, #1
 80021de:	d11b      	bne.n	8002218 <VL53L0X_perform_vhv_calibration+0x6c>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80021e0:	f10d 0317 	add.w	r3, sp, #23
 80021e4:	9003      	str	r0, [sp, #12]
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	4602      	mov	r2, r0
 80021ea:	4603      	mov	r3, r0
 80021ec:	9702      	str	r7, [sp, #8]
 80021ee:	f8cd 8000 	str.w	r8, [sp]
 80021f2:	4639      	mov	r1, r7
 80021f4:	4620      	mov	r0, r4
 80021f6:	f7ff ff71 	bl	80020dc <VL53L0X_ref_calibration_io>
			1, 0);
	} else
		*pVhvSettings = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80021fa:	b940      	cbnz	r0, 800220e <VL53L0X_perform_vhv_calibration+0x62>
 80021fc:	b13e      	cbz	r6, 800220e <VL53L0X_perform_vhv_calibration+0x62>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80021fe:	462a      	mov	r2, r5
 8002200:	2101      	movs	r1, #1
 8002202:	4620      	mov	r0, r4
 8002204:	f001 fb9c 	bl	8003940 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8002208:	b908      	cbnz	r0, 800220e <VL53L0X_perform_vhv_calibration+0x62>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800220a:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130

	}

	return Status;
}
 800220e:	b006      	add	sp, #24
 8002210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t SequenceConfig = 0;
 8002214:	461d      	mov	r5, r3
 8002216:	e7d6      	b.n	80021c6 <VL53L0X_perform_vhv_calibration+0x1a>
		*pVhvSettings = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	f888 3000 	strb.w	r3, [r8]
 800221e:	e7ec      	b.n	80021fa <VL53L0X_perform_vhv_calibration+0x4e>

08002220 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8002220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002224:	4604      	mov	r4, r0
 8002226:	b086      	sub	sp, #24
 8002228:	4688      	mov	r8, r1
 800222a:	4617      	mov	r7, r2

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800222c:	461e      	mov	r6, r3
 800222e:	b343      	cbz	r3, 8002282 <VL53L0X_perform_phase_calibration+0x62>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8002230:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8002234:	2202      	movs	r2, #2
 8002236:	2101      	movs	r1, #1
 8002238:	4620      	mov	r0, r4
 800223a:	f001 fb81 	bl	8003940 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 800223e:	bb10      	cbnz	r0, 8002286 <VL53L0X_perform_phase_calibration+0x66>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8002240:	4601      	mov	r1, r0
 8002242:	4620      	mov	r0, r4
 8002244:	f7ff ff31 	bl	80020aa <VL53L0X_perform_single_ref_calibration>

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8002248:	b9e8      	cbnz	r0, 8002286 <VL53L0X_perform_phase_calibration+0x66>
 800224a:	2f01      	cmp	r7, #1
 800224c:	d11b      	bne.n	8002286 <VL53L0X_perform_phase_calibration+0x66>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800224e:	f10d 0317 	add.w	r3, sp, #23
 8002252:	9002      	str	r0, [sp, #8]
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	4602      	mov	r2, r0
 8002258:	4603      	mov	r3, r0
 800225a:	9703      	str	r7, [sp, #12]
 800225c:	f8cd 8004 	str.w	r8, [sp, #4]
 8002260:	4639      	mov	r1, r7
 8002262:	4620      	mov	r0, r4
 8002264:	f7ff ff3a 	bl	80020dc <VL53L0X_ref_calibration_io>
			0, 1);
	} else
		*pPhaseCal = 0;


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8002268:	b940      	cbnz	r0, 800227c <VL53L0X_perform_phase_calibration+0x5c>
 800226a:	b13e      	cbz	r6, 800227c <VL53L0X_perform_phase_calibration+0x5c>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800226c:	462a      	mov	r2, r5
 800226e:	2101      	movs	r1, #1
 8002270:	4620      	mov	r0, r4
 8002272:	f001 fb65 	bl	8003940 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8002276:	b908      	cbnz	r0, 800227c <VL53L0X_perform_phase_calibration+0x5c>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8002278:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130

	}

	return Status;
}
 800227c:	b006      	add	sp, #24
 800227e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t SequenceConfig = 0;
 8002282:	461d      	mov	r5, r3
 8002284:	e7d6      	b.n	8002234 <VL53L0X_perform_phase_calibration+0x14>
		*pPhaseCal = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	f888 3000 	strb.w	r3, [r8]
 800228c:	e7ec      	b.n	8002268 <VL53L0X_perform_phase_calibration+0x48>

0800228e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800228e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002290:	461e      	mov	r6, r3
 8002292:	4617      	mov	r7, r2

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8002294:	2300      	movs	r3, #0
 8002296:	4632      	mov	r2, r6
{
 8002298:	4604      	mov	r4, r0
	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800229a:	f890 5130 	ldrb.w	r5, [r0, #304]	; 0x130
	Status = VL53L0X_perform_vhv_calibration(
 800229e:	f7ff ff85 	bl	80021ac <VL53L0X_perform_vhv_calibration>
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80022a2:	b970      	cbnz	r0, 80022c2 <VL53L0X_perform_ref_calibration+0x34>
		Status = VL53L0X_perform_phase_calibration(
 80022a4:	4603      	mov	r3, r0
 80022a6:	4632      	mov	r2, r6
 80022a8:	4639      	mov	r1, r7
 80022aa:	4620      	mov	r0, r4
 80022ac:	f7ff ffb8 	bl	8002220 <VL53L0X_perform_phase_calibration>
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80022b0:	b938      	cbnz	r0, 80022c2 <VL53L0X_perform_ref_calibration+0x34>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80022b2:	462a      	mov	r2, r5
 80022b4:	2101      	movs	r1, #1
 80022b6:	4620      	mov	r0, r4
 80022b8:	f001 fb42 	bl	8003940 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80022bc:	b908      	cbnz	r0, 80022c2 <VL53L0X_perform_ref_calibration+0x34>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80022be:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130

	}

	return Status;
}
 80022c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080022c4 <VL53L0X_perform_ref_spad_management>:
{
 80022c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022c8:	b093      	sub	sp, #76	; 0x4c
	uint32_t lastSpadIndex = 0;
 80022ca:	2300      	movs	r3, #0
{
 80022cc:	910a      	str	r1, [sp, #40]	; 0x28
 80022ce:	920b      	str	r2, [sp, #44]	; 0x2c
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80022d0:	f880 3124 	strb.w	r3, [r0, #292]	; 0x124
 80022d4:	f880 3125 	strb.w	r3, [r0, #293]	; 0x125
 80022d8:	f880 3126 	strb.w	r3, [r0, #294]	; 0x126
 80022dc:	f880 3127 	strb.w	r3, [r0, #295]	; 0x127
 80022e0:	f880 3128 	strb.w	r3, [r0, #296]	; 0x128
 80022e4:	f880 3129 	strb.w	r3, [r0, #297]	; 0x129
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80022e8:	2201      	movs	r2, #1
 80022ea:	21ff      	movs	r1, #255	; 0xff
{
 80022ec:	4605      	mov	r5, r0
	uint32_t lastSpadIndex = 0;
 80022ee:	930e      	str	r3, [sp, #56]	; 0x38
	int32_t nextGoodSpad = 0;
 80022f0:	930f      	str	r3, [sp, #60]	; 0x3c
	uint8_t VhvSettings = 0;
 80022f2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	uint8_t PhaseCal = 0;
 80022f6:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80022fa:	f8b0 813a 	ldrh.w	r8, [r0, #314]	; 0x13a
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80022fe:	f001 fb1f 	bl	8003940 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8002302:	4604      	mov	r4, r0
 8002304:	2800      	cmp	r0, #0
 8002306:	f040 810e 	bne.w	8002526 <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_WrByte(Dev,
 800230a:	4602      	mov	r2, r0
 800230c:	214f      	movs	r1, #79	; 0x4f
 800230e:	4628      	mov	r0, r5
 8002310:	f001 fb16 	bl	8003940 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8002314:	4604      	mov	r4, r0
 8002316:	2800      	cmp	r0, #0
 8002318:	f040 8105 	bne.w	8002526 <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_WrByte(Dev,
 800231c:	222c      	movs	r2, #44	; 0x2c
 800231e:	214e      	movs	r1, #78	; 0x4e
 8002320:	4628      	mov	r0, r5
 8002322:	f001 fb0d 	bl	8003940 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8002326:	4604      	mov	r4, r0
 8002328:	2800      	cmp	r0, #0
 800232a:	f040 80fc 	bne.w	8002526 <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800232e:	4602      	mov	r2, r0
 8002330:	21ff      	movs	r1, #255	; 0xff
 8002332:	4628      	mov	r0, r5
 8002334:	f001 fb04 	bl	8003940 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 8002338:	4604      	mov	r4, r0
 800233a:	2800      	cmp	r0, #0
 800233c:	f040 80f3 	bne.w	8002526 <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_WrByte(Dev,
 8002340:	22b4      	movs	r2, #180	; 0xb4
 8002342:	21b6      	movs	r1, #182	; 0xb6
 8002344:	4628      	mov	r0, r5
 8002346:	f001 fafb 	bl	8003940 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 800234a:	4604      	mov	r4, r0
 800234c:	2800      	cmp	r0, #0
 800234e:	f040 80ea 	bne.w	8002526 <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_WrByte(Dev,
 8002352:	4602      	mov	r2, r0
 8002354:	2180      	movs	r1, #128	; 0x80
 8002356:	4628      	mov	r0, r5
 8002358:	f001 faf2 	bl	8003940 <VL53L0X_WrByte>
	if (Status == VL53L0X_ERROR_NONE)
 800235c:	4604      	mov	r4, r0
 800235e:	2800      	cmp	r0, #0
 8002360:	f040 80e1 	bne.w	8002526 <VL53L0X_perform_ref_spad_management+0x262>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8002364:	4603      	mov	r3, r0
 8002366:	f10d 0235 	add.w	r2, sp, #53	; 0x35
 800236a:	a90d      	add	r1, sp, #52	; 0x34
 800236c:	4628      	mov	r0, r5
 800236e:	f7ff ff8e 	bl	800228e <VL53L0X_perform_ref_calibration>
	if (Status == VL53L0X_ERROR_NONE) {
 8002372:	4604      	mov	r4, r0
 8002374:	2800      	cmp	r0, #0
 8002376:	f040 80d6 	bne.w	8002526 <VL53L0X_perform_ref_spad_management+0x262>
		lastSpadIndex = currentSpadIndex;
 800237a:	af12      	add	r7, sp, #72	; 0x48
					Dev->Data.SpadData.RefGoodSpadMap,
 800237c:	f505 7395 	add.w	r3, r5, #298	; 0x12a
		lastSpadIndex = currentSpadIndex;
 8002380:	f847 0d10 	str.w	r0, [r7, #-16]!
					Dev->Data.SpadData.RefGoodSpadMap,
 8002384:	9307      	str	r3, [sp, #28]
		Status = enable_ref_spads(Dev,
 8002386:	2303      	movs	r3, #3
 8002388:	9303      	str	r3, [sp, #12]
 800238a:	2106      	movs	r1, #6
 800238c:	23b4      	movs	r3, #180	; 0xb4
					Dev->Data.SpadData.RefSpadEnables,
 800238e:	f505 7992 	add.w	r9, r5, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8002392:	e88d 000a 	stmia.w	sp, {r1, r3}
 8002396:	9002      	str	r0, [sp, #8]
 8002398:	4601      	mov	r1, r0
 800239a:	9704      	str	r7, [sp, #16]
 800239c:	464b      	mov	r3, r9
 800239e:	9a07      	ldr	r2, [sp, #28]
 80023a0:	4628      	mov	r0, r5
 80023a2:	f7ff fdb6 	bl	8001f12 <enable_ref_spads>
	if (Status == VL53L0X_ERROR_NONE) {
 80023a6:	4604      	mov	r4, r0
 80023a8:	2800      	cmp	r0, #0
 80023aa:	f040 80bc 	bne.w	8002526 <VL53L0X_perform_ref_spad_management+0x262>
		Status = perform_ref_signal_measurement(Dev,
 80023ae:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 80023b2:	4628      	mov	r0, r5
		currentSpadIndex = lastSpadIndex;
 80023b4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
		Status = perform_ref_signal_measurement(Dev,
 80023b6:	f7ff fdf7 	bl	8001fa8 <perform_ref_signal_measurement>
		if ((Status == VL53L0X_ERROR_NONE) &&
 80023ba:	4604      	mov	r4, r0
 80023bc:	2800      	cmp	r0, #0
 80023be:	f040 80b2 	bne.w	8002526 <VL53L0X_perform_ref_spad_management+0x262>
 80023c2:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80023c6:	4543      	cmp	r3, r8
 80023c8:	d955      	bls.n	8002476 <VL53L0X_perform_ref_spad_management+0x1b2>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80023ca:	f885 0124 	strb.w	r0, [r5, #292]	; 0x124
 80023ce:	f885 0125 	strb.w	r0, [r5, #293]	; 0x125
 80023d2:	f885 0126 	strb.w	r0, [r5, #294]	; 0x126
 80023d6:	f885 0127 	strb.w	r0, [r5, #295]	; 0x127
 80023da:	f885 0128 	strb.w	r0, [r5, #296]	; 0x128
 80023de:	f885 0129 	strb.w	r0, [r5, #297]	; 0x129
			while ((is_aperture(startSelect + currentSpadIndex)
 80023e2:	f106 00b4 	add.w	r0, r6, #180	; 0xb4
 80023e6:	f7ff fd71 	bl	8001ecc <is_aperture>
 80023ea:	b180      	cbz	r0, 800240e <VL53L0X_perform_ref_spad_management+0x14a>
			Status = enable_ref_spads(Dev,
 80023ec:	2206      	movs	r2, #6
 80023ee:	23b4      	movs	r3, #180	; 0xb4
 80023f0:	9704      	str	r7, [sp, #16]
 80023f2:	2703      	movs	r7, #3
 80023f4:	e88d 000c 	stmia.w	sp, {r2, r3}
 80023f8:	9703      	str	r7, [sp, #12]
 80023fa:	9602      	str	r6, [sp, #8]
 80023fc:	464b      	mov	r3, r9
 80023fe:	9a07      	ldr	r2, [sp, #28]
 8002400:	2101      	movs	r1, #1
 8002402:	4628      	mov	r0, r5
 8002404:	f7ff fd85 	bl	8001f12 <enable_ref_spads>
			if (Status == VL53L0X_ERROR_NONE) {
 8002408:	b128      	cbz	r0, 8002416 <VL53L0X_perform_ref_spad_management+0x152>
			Status = perform_ref_signal_measurement(Dev,
 800240a:	4604      	mov	r4, r0
	return Status;
 800240c:	e08b      	b.n	8002526 <VL53L0X_perform_ref_spad_management+0x262>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800240e:	2e2b      	cmp	r6, #43	; 0x2b
 8002410:	d8ec      	bhi.n	80023ec <VL53L0X_perform_ref_spad_management+0x128>
				currentSpadIndex++;
 8002412:	3601      	adds	r6, #1
 8002414:	e7e5      	b.n	80023e2 <VL53L0X_perform_ref_spad_management+0x11e>
				Status = perform_ref_signal_measurement(Dev,
 8002416:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 800241a:	4628      	mov	r0, r5
				currentSpadIndex = lastSpadIndex;
 800241c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
				Status = perform_ref_signal_measurement(Dev,
 800241e:	f7ff fdc3 	bl	8001fa8 <perform_ref_signal_measurement>
				if ((Status == VL53L0X_ERROR_NONE) &&
 8002422:	2800      	cmp	r0, #0
 8002424:	d1f1      	bne.n	800240a <VL53L0X_perform_ref_spad_management+0x146>
 8002426:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800242a:	4543      	cmp	r3, r8
 800242c:	d97f      	bls.n	800252e <VL53L0X_perform_ref_spad_management+0x26a>
					isApertureSpads_int = 1;
 800242e:	f04f 0a01 	mov.w	sl, #1
			needAptSpads = 1;
 8002432:	f04f 0b01 	mov.w	fp, #1
 8002436:	e022      	b.n	800247e <VL53L0X_perform_ref_spad_management+0x1ba>
				memcpy(lastSpadArray,
 8002438:	f8d5 0124 	ldr.w	r0, [r5, #292]	; 0x124
 800243c:	f8b5 3128 	ldrh.w	r3, [r5, #296]	; 0x128
 8002440:	9010      	str	r0, [sp, #64]	; 0x40
 8002442:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
			(refSpadCount_int)++;
 8002446:	9f08      	ldr	r7, [sp, #32]
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8002448:	9209      	str	r2, [sp, #36]	; 0x24
 800244a:	e02a      	b.n	80024a2 <VL53L0X_perform_ref_spad_management+0x1de>
			(refSpadCount_int)++;
 800244c:	9f08      	ldr	r7, [sp, #32]
		*refSpadCount = refSpadCount_int;
 800244e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002450:	601f      	str	r7, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8002452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002454:	f883 a000 	strb.w	sl, [r3]
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8002458:	2301      	movs	r3, #1
 800245a:	f885 3115 	strb.w	r3, [r5, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800245e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f885 3113 	strb.w	r3, [r5, #275]	; 0x113
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
 800246e:	e05a      	b.n	8002526 <VL53L0X_perform_ref_spad_management+0x262>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8002470:	f06f 0431 	mvn.w	r4, #49	; 0x31
 8002474:	e057      	b.n	8002526 <VL53L0X_perform_ref_spad_management+0x262>
	uint8_t	 isApertureSpads_int = 0;
 8002476:	f04f 0a00 	mov.w	sl, #0
	uint32_t refSpadCount_int = 0;
 800247a:	4657      	mov	r7, sl
			needAptSpads = 0;
 800247c:	46d3      	mov	fp, sl
		(peakSignalRateRef < targetRefRate)) {
 800247e:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
	if ((Status == VL53L0X_ERROR_NONE) &&
 8002482:	4590      	cmp	r8, r2
 8002484:	d9e3      	bls.n	800244e <VL53L0X_perform_ref_spad_management+0x18a>
		lastSignalRateDiff = abs(peakSignalRateRef -
 8002486:	eba2 0208 	sub.w	r2, r2, r8
 800248a:	2a00      	cmp	r2, #0
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800248c:	f8d9 0000 	ldr.w	r0, [r9]
 8002490:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8002494:	9010      	str	r0, [sp, #64]	; 0x40
		lastSignalRateDiff = abs(peakSignalRateRef -
 8002496:	bfb8      	it	lt
 8002498:	4252      	neglt	r2, r2
		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800249a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
		lastSignalRateDiff = abs(peakSignalRateRef -
 800249e:	9209      	str	r2, [sp, #36]	; 0x24
		refSpadCount_int	= minimumSpadCount;
 80024a0:	2703      	movs	r7, #3
			get_next_good_spad(
 80024a2:	ab0f      	add	r3, sp, #60	; 0x3c
 80024a4:	4632      	mov	r2, r6
 80024a6:	2106      	movs	r1, #6
 80024a8:	9807      	ldr	r0, [sp, #28]
 80024aa:	f7ff fce7 	bl	8001e7c <get_next_good_spad>
			if (nextGoodSpad == -1) {
 80024ae:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80024b0:	1c73      	adds	r3, r6, #1
 80024b2:	d0dd      	beq.n	8002470 <VL53L0X_perform_ref_spad_management+0x1ac>
			(refSpadCount_int)++;
 80024b4:	1c7b      	adds	r3, r7, #1
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80024b6:	f106 00b4 	add.w	r0, r6, #180	; 0xb4
			(refSpadCount_int)++;
 80024ba:	9308      	str	r3, [sp, #32]
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 80024bc:	f7ff fd06 	bl	8001ecc <is_aperture>
 80024c0:	4558      	cmp	r0, fp
 80024c2:	4682      	mov	sl, r0
 80024c4:	d1d4      	bne.n	8002470 <VL53L0X_perform_ref_spad_management+0x1ac>
			Status = enable_spad_bit(
 80024c6:	4632      	mov	r2, r6
 80024c8:	2106      	movs	r1, #6
 80024ca:	4648      	mov	r0, r9
 80024cc:	f7ff fd08 	bl	8001ee0 <enable_spad_bit>
			if (Status == VL53L0X_ERROR_NONE) {
 80024d0:	2800      	cmp	r0, #0
 80024d2:	d19a      	bne.n	800240a <VL53L0X_perform_ref_spad_management+0x146>
				Status = set_ref_spad_map(Dev,
 80024d4:	4649      	mov	r1, r9
 80024d6:	4628      	mov	r0, r5
				currentSpadIndex++;
 80024d8:	3601      	adds	r6, #1
				Status = set_ref_spad_map(Dev,
 80024da:	f7ff fd10 	bl	8001efe <set_ref_spad_map>
			if (Status != VL53L0X_ERROR_NONE)
 80024de:	2800      	cmp	r0, #0
 80024e0:	d193      	bne.n	800240a <VL53L0X_perform_ref_spad_management+0x146>
			Status = perform_ref_signal_measurement(Dev,
 80024e2:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 80024e6:	4628      	mov	r0, r5
 80024e8:	f7ff fd5e 	bl	8001fa8 <perform_ref_signal_measurement>
			if (Status != VL53L0X_ERROR_NONE)
 80024ec:	2800      	cmp	r0, #0
 80024ee:	d18c      	bne.n	800240a <VL53L0X_perform_ref_spad_management+0x146>
			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80024f0:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80024f4:	eba1 0208 	sub.w	r2, r1, r8
 80024f8:	2a00      	cmp	r2, #0
 80024fa:	bfb8      	it	lt
 80024fc:	4252      	neglt	r2, r2
			if (peakSignalRateRef > targetRefRate) {
 80024fe:	4588      	cmp	r8, r1
 8002500:	d29a      	bcs.n	8002438 <VL53L0X_perform_ref_spad_management+0x174>
				if (signalRateDiff > lastSignalRateDiff) {
 8002502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002504:	429a      	cmp	r2, r3
 8002506:	d9a1      	bls.n	800244c <VL53L0X_perform_ref_spad_management+0x188>
					Status = set_ref_spad_map(Dev,
 8002508:	a910      	add	r1, sp, #64	; 0x40
 800250a:	4628      	mov	r0, r5
 800250c:	f7ff fcf7 	bl	8001efe <set_ref_spad_map>
					memcpy(
 8002510:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
 8002514:	f8a5 1128 	strh.w	r1, [r5, #296]	; 0x128
					Status = set_ref_spad_map(Dev,
 8002518:	4602      	mov	r2, r0
					memcpy(
 800251a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800251c:	f8c5 0124 	str.w	r0, [r5, #292]	; 0x124
	if (Status == VL53L0X_ERROR_NONE) {
 8002520:	2a00      	cmp	r2, #0
 8002522:	d094      	beq.n	800244e <VL53L0X_perform_ref_spad_management+0x18a>
 8002524:	4614      	mov	r4, r2
}
 8002526:	4620      	mov	r0, r4
 8002528:	b013      	add	sp, #76	; 0x4c
 800252a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t	 isApertureSpads_int = 0;
 800252e:	4682      	mov	sl, r0
	uint32_t refSpadCount_int = 0;
 8002530:	4607      	mov	r7, r0
 8002532:	e77e      	b.n	8002432 <VL53L0X_perform_ref_spad_management+0x16e>

08002534 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8002534:	b573      	push	{r0, r1, r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NewDataReady = 0;
 8002536:	ad02      	add	r5, sp, #8
 8002538:	2300      	movs	r3, #0
 800253a:	f805 3d01 	strb.w	r3, [r5, #-1]!
{
 800253e:	4606      	mov	r6, r0
	uint8_t NewDataReady = 0;
 8002540:	24c8      	movs	r4, #200	; 0xc8
	LOG_FUNCTION_START("");

	LoopNb = 0;

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8002542:	4629      	mov	r1, r5
 8002544:	4630      	mov	r0, r6
 8002546:	f7ff fc60 	bl	8001e0a <VL53L0X_GetMeasurementDataReady>
		if (Status != 0)
 800254a:	b958      	cbnz	r0, 8002564 <VL53L0X_measurement_poll_for_completion+0x30>
			break; /* the error is set */

		if (NewDataReady == 1)
 800254c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d007      	beq.n	8002564 <VL53L0X_measurement_poll_for_completion+0x30>
			break; /* done note that status == 0 */

		LoopNb++;
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8002554:	3c01      	subs	r4, #1
 8002556:	d003      	beq.n	8002560 <VL53L0X_measurement_poll_for_completion+0x2c>
			Status = VL53L0X_ERROR_TIME_OUT;
			break;
		}

		VL53L0X_PollingDelay(Dev);
 8002558:	4630      	mov	r0, r6
 800255a:	f001 fa29 	bl	80039b0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800255e:	e7f0      	b.n	8002542 <VL53L0X_measurement_poll_for_completion+0xe>
			Status = VL53L0X_ERROR_TIME_OUT;
 8002560:	f06f 0006 	mvn.w	r0, #6
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
}
 8002564:	b002      	add	sp, #8
 8002566:	bd70      	pop	{r4, r5, r6, pc}

08002568 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8002568:	b510      	push	{r4, lr}
 800256a:	4601      	mov	r1, r0
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
	uint32_t  bit = 1 << 30;
 800256c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8002570:	428a      	cmp	r2, r1
 8002572:	d802      	bhi.n	800257a <VL53L0X_isqrt+0x12>
 8002574:	2000      	movs	r0, #0
		bit >>= 2;


	while (bit != 0) {
 8002576:	b912      	cbnz	r2, 800257e <VL53L0X_isqrt+0x16>

		bit >>= 2;
	}

	return res;
}
 8002578:	bd10      	pop	{r4, pc}
		bit >>= 2;
 800257a:	0892      	lsrs	r2, r2, #2
 800257c:	e7f8      	b.n	8002570 <VL53L0X_isqrt+0x8>
		if (num >= res + bit) {
 800257e:	1884      	adds	r4, r0, r2
 8002580:	42a1      	cmp	r1, r4
 8002582:	ea4f 0350 	mov.w	r3, r0, lsr #1
			res = (res >> 1) + bit;
 8002586:	bf26      	itte	cs
 8002588:	18d0      	addcs	r0, r2, r3
			num -= res + bit;
 800258a:	1b09      	subcs	r1, r1, r4
			res >>= 1;
 800258c:	4618      	movcc	r0, r3
		bit >>= 2;
 800258e:	0892      	lsrs	r2, r2, #2
 8002590:	e7f1      	b.n	8002576 <VL53L0X_isqrt+0xe>

08002592 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8002592:	b573      	push	{r0, r1, r4, r5, r6, lr}
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8002594:	2200      	movs	r2, #0
 8002596:	2183      	movs	r1, #131	; 0x83
{
 8002598:	4606      	mov	r6, r0
	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800259a:	f001 f9d1 	bl	8003940 <VL53L0X_WrByte>
 800259e:	4604      	mov	r4, r0

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80025a0:	b978      	cbnz	r0, 80025c2 <VL53L0X_device_read_strobe+0x30>
 80025a2:	25c8      	movs	r5, #200	; 0xc8
		LoopNb = 0;
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80025a4:	f10d 0207 	add.w	r2, sp, #7
 80025a8:	2183      	movs	r1, #131	; 0x83
 80025aa:	4630      	mov	r0, r6
 80025ac:	f001 f939 	bl	8003822 <VL53L0X_RdByte>
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80025b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80025b4:	4604      	mov	r4, r0
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80025b6:	b923      	cbnz	r3, 80025c2 <VL53L0X_device_read_strobe+0x30>
 80025b8:	b918      	cbnz	r0, 80025c2 <VL53L0X_device_read_strobe+0x30>
					break;

			LoopNb = LoopNb + 1;
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80025ba:	3d01      	subs	r5, #1
 80025bc:	d1f2      	bne.n	80025a4 <VL53L0X_device_read_strobe+0x12>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
			Status = VL53L0X_ERROR_TIME_OUT;
 80025be:	f06f 0406 	mvn.w	r4, #6

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80025c2:	2201      	movs	r2, #1
 80025c4:	2183      	movs	r1, #131	; 0x83
 80025c6:	4630      	mov	r0, r6
 80025c8:	f001 f9ba 	bl	8003940 <VL53L0X_WrByte>
 80025cc:	4320      	orrs	r0, r4

	LOG_FUNCTION_END(Status);
	return Status;

}
 80025ce:	b240      	sxtb	r0, r0
 80025d0:	b002      	add	sp, #8
 80025d2:	bd70      	pop	{r4, r5, r6, pc}

080025d4 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80025d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80025d8:	f890 60f0 	ldrb.w	r6, [r0, #240]	; 0xf0
{
 80025dc:	b091      	sub	sp, #68	; 0x44
	uint32_t PartUIDUpper = 0;
 80025de:	f04f 0900 	mov.w	r9, #0
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80025e2:	2e07      	cmp	r6, #7
{
 80025e4:	4604      	mov	r4, r0
 80025e6:	4688      	mov	r8, r1
	uint32_t PartUIDUpper = 0;
 80025e8:	f8cd 901c 	str.w	r9, [sp, #28]
	uint32_t PartUIDLower = 0;
 80025ec:	f8cd 9020 	str.w	r9, [sp, #32]
	if (ReadDataFromDeviceDone != 7) {
 80025f0:	f000 8298 	beq.w	8002b24 <VL53L0X_get_info_from_device+0x550>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80025f4:	2201      	movs	r2, #1
 80025f6:	2180      	movs	r1, #128	; 0x80
 80025f8:	f001 f9a2 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80025fc:	2201      	movs	r2, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80025fe:	4607      	mov	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002600:	21ff      	movs	r1, #255	; 0xff
 8002602:	4620      	mov	r0, r4
 8002604:	f001 f99c 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002608:	464a      	mov	r2, r9
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800260a:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800260c:	4649      	mov	r1, r9
 800260e:	4620      	mov	r0, r4
 8002610:	f001 f996 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002614:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002616:	4307      	orrs	r7, r0

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8002618:	2206      	movs	r2, #6
 800261a:	21ff      	movs	r1, #255	; 0xff
 800261c:	4620      	mov	r0, r4
 800261e:	f001 f98f 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8002622:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8002624:	4307      	orrs	r7, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8002626:	f10d 0215 	add.w	r2, sp, #21
 800262a:	2183      	movs	r1, #131	; 0x83
 800262c:	4620      	mov	r0, r4
 800262e:	f001 f8f8 	bl	8003822 <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8002632:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8002636:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8002638:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800263a:	f042 0204 	orr.w	r2, r2, #4
 800263e:	2183      	movs	r1, #131	; 0x83
 8002640:	4620      	mov	r0, r4
 8002642:	f001 f97d 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8002646:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8002648:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800264a:	2207      	movs	r2, #7
 800264c:	21ff      	movs	r1, #255	; 0xff
 800264e:	4620      	mov	r0, r4
 8002650:	f001 f976 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8002654:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8002656:	2201      	movs	r2, #1
 8002658:	2181      	movs	r1, #129	; 0x81
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800265a:	4307      	orrs	r7, r0
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800265c:	4620      	mov	r0, r4
 800265e:	f001 f96f 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8002662:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8002664:	4307      	orrs	r7, r0

		Status |= VL53L0X_PollingDelay(Dev);
 8002666:	4620      	mov	r0, r4
 8002668:	f001 f9a2 	bl	80039b0 <VL53L0X_PollingDelay>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800266c:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_PollingDelay(Dev);
 800266e:	4307      	orrs	r7, r0

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002670:	2201      	movs	r2, #1
 8002672:	2180      	movs	r1, #128	; 0x80
 8002674:	4620      	mov	r0, r4
 8002676:	f001 f963 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_PollingDelay(Dev);
 800267a:	b27f      	sxtb	r7, r7
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800267c:	4338      	orrs	r0, r7

		if (((option & 1) == 1) &&
 800267e:	f018 0a01 	ands.w	sl, r8, #1
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8002682:	b245      	sxtb	r5, r0
		if (((option & 1) == 1) &&
 8002684:	f000 8223 	beq.w	8002ace <VL53L0X_get_info_from_device+0x4fa>
 8002688:	07f3      	lsls	r3, r6, #31
 800268a:	f100 8223 	bmi.w	8002ad4 <VL53L0X_get_info_from_device+0x500>
			((ReadDataFromDeviceDone & 1) == 0)) {
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800268e:	226b      	movs	r2, #107	; 0x6b
 8002690:	2194      	movs	r1, #148	; 0x94
 8002692:	4620      	mov	r0, r4
 8002694:	f001 f954 	bl	8003940 <VL53L0X_WrByte>
 8002698:	4607      	mov	r7, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 800269a:	4620      	mov	r0, r4
 800269c:	f7ff ff79 	bl	8002592 <VL53L0X_device_read_strobe>
 80026a0:	4338      	orrs	r0, r7
 80026a2:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80026a4:	aa06      	add	r2, sp, #24
 80026a6:	2190      	movs	r1, #144	; 0x90
 80026a8:	4620      	mov	r0, r4
 80026aa:	f001 f923 	bl	80038f4 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 80026ae:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80026b0:	4305      	orrs	r5, r0

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80026b2:	9806      	ldr	r0, [sp, #24]
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80026b4:	2224      	movs	r2, #36	; 0x24
 80026b6:	2194      	movs	r1, #148	; 0x94
			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80026b8:	f3c0 2b06 	ubfx	fp, r0, #8, #7
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80026bc:	f3c0 39c0 	ubfx	r9, r0, #15, #1
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80026c0:	4620      	mov	r0, r4
 80026c2:	f001 f93d 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80026c6:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80026c8:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80026ca:	4620      	mov	r0, r4
 80026cc:	f7ff ff61 	bl	8002592 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80026d0:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80026d2:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80026d4:	aa06      	add	r2, sp, #24
 80026d6:	2190      	movs	r1, #144	; 0x90
 80026d8:	4620      	mov	r0, r4
 80026da:	f001 f90b 	bl	80038f4 <VL53L0X_RdDWord>


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80026de:	9b06      	ldr	r3, [sp, #24]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 80026e0:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80026e4:	0e1a      	lsrs	r2, r3, #24
 80026e6:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80026ea:	0c1a      	lsrs	r2, r3, #16
 80026ec:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
			Status |= VL53L0X_device_read_strobe(Dev);
 80026f0:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80026f2:	0a1a      	lsrs	r2, r3, #8

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80026f4:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80026f6:	4305      	orrs	r5, r0
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80026f8:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 80026fc:	4620      	mov	r0, r4
 80026fe:	2225      	movs	r2, #37	; 0x25
 8002700:	f001 f91e 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8002704:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8002706:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8002708:	4620      	mov	r0, r4
 800270a:	f7ff ff42 	bl	8002592 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800270e:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8002710:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8002712:	aa06      	add	r2, sp, #24
 8002714:	2190      	movs	r1, #144	; 0x90
 8002716:	4620      	mov	r0, r4
 8002718:	f001 f8ec 	bl	80038f4 <VL53L0X_RdDWord>

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800271c:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
 800271e:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8002720:	0e1a      	lsrs	r2, r3, #24
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8002722:	4305      	orrs	r5, r0
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8002724:	0c1b      	lsrs	r3, r3, #16
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8002726:	b26d      	sxtb	r5, r5
			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8002728:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800272c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8002730:	f018 0302 	ands.w	r3, r8, #2
 8002734:	9302      	str	r3, [sp, #8]
 8002736:	f000 80db 	beq.w	80028f0 <VL53L0X_get_info_from_device+0x31c>
 800273a:	f016 0702 	ands.w	r7, r6, #2
 800273e:	f040 80d7 	bne.w	80028f0 <VL53L0X_get_info_from_device+0x31c>
			((ReadDataFromDeviceDone & 2) == 0)) {

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8002742:	2202      	movs	r2, #2
 8002744:	2194      	movs	r1, #148	; 0x94
 8002746:	4620      	mov	r0, r4
 8002748:	f001 f8fa 	bl	8003940 <VL53L0X_WrByte>
 800274c:	9001      	str	r0, [sp, #4]
			Status |= VL53L0X_device_read_strobe(Dev);
 800274e:	4620      	mov	r0, r4
 8002750:	f7ff ff1f 	bl	8002592 <VL53L0X_device_read_strobe>
 8002754:	9b01      	ldr	r3, [sp, #4]
 8002756:	4318      	orrs	r0, r3
 8002758:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800275a:	f10d 0216 	add.w	r2, sp, #22
 800275e:	2190      	movs	r1, #144	; 0x90
 8002760:	4620      	mov	r0, r4
 8002762:	f001 f85e 	bl	8003822 <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 8002766:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8002768:	227b      	movs	r2, #123	; 0x7b
 800276a:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800276c:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800276e:	4620      	mov	r0, r4
 8002770:	f001 f8e6 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8002774:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8002776:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8002778:	4620      	mov	r0, r4
 800277a:	f7ff ff0a 	bl	8002592 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800277e:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8002780:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8002782:	f10d 0217 	add.w	r2, sp, #23
 8002786:	2190      	movs	r1, #144	; 0x90
 8002788:	4620      	mov	r0, r4
 800278a:	f001 f84a 	bl	8003822 <VL53L0X_RdByte>
			Status |= VL53L0X_device_read_strobe(Dev);
 800278e:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8002790:	2277      	movs	r2, #119	; 0x77
 8002792:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8002794:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8002796:	4620      	mov	r0, r4
 8002798:	f001 f8d2 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800279c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800279e:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80027a0:	4620      	mov	r0, r4
 80027a2:	f7ff fef6 	bl	8002592 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 80027a6:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80027a8:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80027aa:	aa06      	add	r2, sp, #24
 80027ac:	2190      	movs	r1, #144	; 0x90
 80027ae:	4620      	mov	r0, r4
 80027b0:	f001 f8a0 	bl	80038f4 <VL53L0X_RdDWord>

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80027b4:	9b06      	ldr	r3, [sp, #24]
 80027b6:	0e5a      	lsrs	r2, r3, #25
 80027b8:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80027bc:	f3c3 4286 	ubfx	r2, r3, #18, #7
 80027c0:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80027c4:	f3c3 22c6 	ubfx	r2, r3, #11, #7
 80027c8:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
			Status |= VL53L0X_device_read_strobe(Dev);
 80027cc:	b26d      	sxtb	r5, r5
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80027ce:	f3c3 1206 	ubfx	r2, r3, #4, #7

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	f003 0378 	and.w	r3, r3, #120	; 0x78

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80027d8:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80027da:	4305      	orrs	r5, r0
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80027dc:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80027e0:	4620      	mov	r0, r4
 80027e2:	2278      	movs	r2, #120	; 0x78
			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80027e4:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80027e8:	f001 f8aa 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80027ec:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80027ee:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80027f0:	4620      	mov	r0, r4
 80027f2:	f7ff fece 	bl	8002592 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80027f6:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80027f8:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80027fa:	aa06      	add	r2, sp, #24
 80027fc:	2190      	movs	r1, #144	; 0x90
 80027fe:	4620      	mov	r0, r4
 8002800:	f001 f878 	bl	80038f4 <VL53L0X_RdDWord>

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8002804:	9b06      	ldr	r3, [sp, #24]
			ProductId[4] = (char)(byte +
 8002806:	f89d 2015 	ldrb.w	r2, [sp, #21]
 800280a:	eb02 7253 	add.w	r2, r2, r3, lsr #29
 800280e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8002812:	f3c3 5286 	ubfx	r2, r3, #22, #7
 8002816:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800281a:	f3c3 32c6 	ubfx	r2, r3, #15, #7
 800281e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8002822:	f3c3 2206 	ubfx	r2, r3, #8, #7
 8002826:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
			Status |= VL53L0X_device_read_strobe(Dev);
 800282a:	b26d      	sxtb	r5, r5
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800282c:	f3c3 0246 	ubfx	r2, r3, #1, #7

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8002830:	019b      	lsls	r3, r3, #6
 8002832:	f003 0340 	and.w	r3, r3, #64	; 0x40

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8002836:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8002838:	4305      	orrs	r5, r0
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800283a:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800283e:	4620      	mov	r0, r4
 8002840:	2279      	movs	r2, #121	; 0x79
			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8002842:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8002846:	f001 f87b 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800284a:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800284c:	4305      	orrs	r5, r0

			Status |= VL53L0X_device_read_strobe(Dev);
 800284e:	4620      	mov	r0, r4
 8002850:	f7ff fe9f 	bl	8002592 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8002854:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8002856:	4305      	orrs	r5, r0

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8002858:	aa06      	add	r2, sp, #24
 800285a:	2190      	movs	r1, #144	; 0x90
 800285c:	4620      	mov	r0, r4
 800285e:	f001 f849 	bl	80038f4 <VL53L0X_RdDWord>

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8002862:	9b06      	ldr	r3, [sp, #24]
			ProductId[9] = (char)(byte +
 8002864:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8002868:	eb02 6293 	add.w	r2, r2, r3, lsr #26
 800286c:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8002870:	f3c3 42c6 	ubfx	r2, r3, #19, #7
 8002874:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8002878:	f3c3 3206 	ubfx	r2, r3, #12, #7
 800287c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
			Status |= VL53L0X_device_read_strobe(Dev);
 8002880:	b26d      	sxtb	r5, r5
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8002882:	f3c3 1246 	ubfx	r2, r3, #5, #7

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	f003 037c 	and.w	r3, r3, #124	; 0x7c

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800288c:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800288e:	4305      	orrs	r5, r0
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8002890:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8002894:	4620      	mov	r0, r4
 8002896:	227a      	movs	r2, #122	; 0x7a
			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8002898:	f88d 3015 	strb.w	r3, [sp, #21]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800289c:	f001 f850 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80028a0:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80028a2:	4305      	orrs	r5, r0

			Status |= VL53L0X_device_read_strobe(Dev);
 80028a4:	4620      	mov	r0, r4
 80028a6:	f7ff fe74 	bl	8002592 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80028aa:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80028ac:	4305      	orrs	r5, r0

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80028ae:	aa06      	add	r2, sp, #24
 80028b0:	2190      	movs	r1, #144	; 0x90
 80028b2:	4620      	mov	r0, r4
 80028b4:	f001 f81e 	bl	80038f4 <VL53L0X_RdDWord>

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80028b8:	9b06      	ldr	r3, [sp, #24]
			ProductId[13] = (char)(byte +
 80028ba:	f89d 2015 	ldrb.w	r2, [sp, #21]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
			ProductId[18] = '\0';
 80028be:	f88d 703e 	strb.w	r7, [sp, #62]	; 0x3e
			ProductId[13] = (char)(byte +
 80028c2:	eb02 7293 	add.w	r2, r2, r3, lsr #30
 80028c6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80028ca:	f3c3 52c6 	ubfx	r2, r3, #23, #7
			Status |= VL53L0X_device_read_strobe(Dev);
 80028ce:	b26d      	sxtb	r5, r5
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80028d0:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80028d4:	f3c3 4206 	ubfx	r2, r3, #16, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80028d8:	4305      	orrs	r5, r0
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80028da:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80028de:	f3c3 2246 	ubfx	r2, r3, #9, #7
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80028e2:	f3c3 0386 	ubfx	r3, r3, #2, #7
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80028e6:	b26d      	sxtb	r5, r5
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80028e8:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80028ec:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d

		}

		if (((option & 4) == 4) &&
 80028f0:	f018 0304 	ands.w	r3, r8, #4
 80028f4:	9301      	str	r3, [sp, #4]
 80028f6:	f000 80ef 	beq.w	8002ad8 <VL53L0X_get_info_from_device+0x504>
 80028fa:	0777      	lsls	r7, r6, #29
 80028fc:	f100 80ec 	bmi.w	8002ad8 <VL53L0X_get_info_from_device+0x504>
			((ReadDataFromDeviceDone & 4) == 0)) {

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8002900:	227b      	movs	r2, #123	; 0x7b
 8002902:	2194      	movs	r1, #148	; 0x94
 8002904:	4620      	mov	r0, r4
 8002906:	f001 f81b 	bl	8003940 <VL53L0X_WrByte>
 800290a:	4607      	mov	r7, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 800290c:	4620      	mov	r0, r4
 800290e:	f7ff fe40 	bl	8002592 <VL53L0X_device_read_strobe>
 8002912:	4338      	orrs	r0, r7
 8002914:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8002916:	aa07      	add	r2, sp, #28
 8002918:	2190      	movs	r1, #144	; 0x90
 800291a:	4620      	mov	r0, r4
 800291c:	f000 ffea 	bl	80038f4 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8002920:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8002922:	227c      	movs	r2, #124	; 0x7c
 8002924:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8002926:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8002928:	4620      	mov	r0, r4
 800292a:	f001 f809 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800292e:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8002930:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8002932:	4620      	mov	r0, r4
 8002934:	f7ff fe2d 	bl	8002592 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8002938:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 800293a:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800293c:	aa08      	add	r2, sp, #32
 800293e:	2190      	movs	r1, #144	; 0x90
 8002940:	4620      	mov	r0, r4
 8002942:	f000 ffd7 	bl	80038f4 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 8002946:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8002948:	2273      	movs	r2, #115	; 0x73
 800294a:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800294c:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800294e:	4620      	mov	r0, r4
 8002950:	f000 fff6 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8002954:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8002956:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8002958:	4620      	mov	r0, r4
 800295a:	f7ff fe1a 	bl	8002592 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800295e:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8002960:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8002962:	aa06      	add	r2, sp, #24
 8002964:	2190      	movs	r1, #144	; 0x90
 8002966:	4620      	mov	r0, r4
 8002968:	f000 ffc4 	bl	80038f4 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 800296c:	b26d      	sxtb	r5, r5

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800296e:	2274      	movs	r2, #116	; 0x74
 8002970:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8002972:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8002974:	4620      	mov	r0, r4
				0x000000ff) << 8;
 8002976:	9f06      	ldr	r7, [sp, #24]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8002978:	f000 ffe2 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800297c:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800297e:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 8002980:	4620      	mov	r0, r4
 8002982:	f7ff fe06 	bl	8002592 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8002986:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 8002988:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800298a:	aa06      	add	r2, sp, #24
 800298c:	2190      	movs	r1, #144	; 0x90
 800298e:	4620      	mov	r0, r4
 8002990:	f000 ffb0 	bl	80038f4 <VL53L0X_RdDWord>
				0x000000ff) << 8;
 8002994:	023f      	lsls	r7, r7, #8

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8002996:	f89d 301b 	ldrb.w	r3, [sp, #27]
			Status |= VL53L0X_device_read_strobe(Dev);
 800299a:	b26d      	sxtb	r5, r5

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800299c:	2275      	movs	r2, #117	; 0x75
 800299e:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80029a0:	4305      	orrs	r5, r0
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80029a2:	b2bf      	uxth	r7, r7
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80029a4:	4620      	mov	r0, r4
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80029a6:	431f      	orrs	r7, r3
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80029a8:	f000 ffca 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80029ac:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80029ae:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80029b0:	4620      	mov	r0, r4
 80029b2:	f7ff fdee 	bl	8002592 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80029b6:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80029b8:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80029ba:	aa06      	add	r2, sp, #24
 80029bc:	2190      	movs	r1, #144	; 0x90
 80029be:	4620      	mov	r0, r4
 80029c0:	f000 ff98 	bl	80038f4 <VL53L0X_RdDWord>

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 80029c4:	9b06      	ldr	r3, [sp, #24]
			Status |= VL53L0X_device_read_strobe(Dev);
 80029c6:	b26d      	sxtb	r5, r5
							<< 8;
 80029c8:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 80029ca:	b29b      	uxth	r3, r3

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80029cc:	2276      	movs	r2, #118	; 0x76
 80029ce:	2194      	movs	r1, #148	; 0x94
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80029d0:	4305      	orrs	r5, r0
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80029d2:	4620      	mov	r0, r4
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 80029d4:	9303      	str	r3, [sp, #12]
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80029d6:	f000 ffb3 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80029da:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80029dc:	4305      	orrs	r5, r0
			Status |= VL53L0X_device_read_strobe(Dev);
 80029de:	4620      	mov	r0, r4
 80029e0:	f7ff fdd7 	bl	8002592 <VL53L0X_device_read_strobe>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80029e4:	b26d      	sxtb	r5, r5
			Status |= VL53L0X_device_read_strobe(Dev);
 80029e6:	4305      	orrs	r5, r0
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80029e8:	aa06      	add	r2, sp, #24
 80029ea:	2190      	movs	r1, #144	; 0x90
 80029ec:	4620      	mov	r0, r4
 80029ee:	f000 ff81 	bl	80038f4 <VL53L0X_RdDWord>
			Status |= VL53L0X_device_read_strobe(Dev);
 80029f2:	b26d      	sxtb	r5, r5

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80029f4:	f89d 201b 	ldrb.w	r2, [sp, #27]
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80029f8:	9b03      	ldr	r3, [sp, #12]
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80029fa:	4305      	orrs	r5, r0
 80029fc:	b26d      	sxtb	r5, r5
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80029fe:	4313      	orrs	r3, r2
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8002a00:	2200      	movs	r2, #0
 8002a02:	2181      	movs	r1, #129	; 0x81
 8002a04:	4620      	mov	r0, r4
 8002a06:	9303      	str	r3, [sp, #12]
 8002a08:	f000 ff9a 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8002a0c:	2206      	movs	r2, #6
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8002a0e:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8002a10:	21ff      	movs	r1, #255	; 0xff
 8002a12:	4620      	mov	r0, r4
 8002a14:	f000 ff94 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8002a18:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8002a1a:	4305      	orrs	r5, r0
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8002a1c:	f10d 0215 	add.w	r2, sp, #21
 8002a20:	2183      	movs	r1, #131	; 0x83
 8002a22:	4620      	mov	r0, r4
 8002a24:	f000 fefd 	bl	8003822 <VL53L0X_RdByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8002a28:	f89d 2015 	ldrb.w	r2, [sp, #21]
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8002a2c:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8002a2e:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8002a30:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 8002a34:	2183      	movs	r1, #131	; 0x83
 8002a36:	4620      	mov	r0, r4
 8002a38:	f000 ff82 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8002a3c:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8002a3e:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002a40:	2201      	movs	r2, #1
 8002a42:	21ff      	movs	r1, #255	; 0xff
 8002a44:	4620      	mov	r0, r4
 8002a46:	f000 ff7b 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8002a4a:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002a4c:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002a4e:	2201      	movs	r2, #1
 8002a50:	2100      	movs	r1, #0
 8002a52:	4620      	mov	r0, r4
 8002a54:	f000 ff74 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8002a58:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002a5a:	4305      	orrs	r5, r0

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	21ff      	movs	r1, #255	; 0xff
 8002a60:	4620      	mov	r0, r4
 8002a62:	f000 ff6d 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8002a66:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002a68:	4305      	orrs	r5, r0
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2180      	movs	r1, #128	; 0x80
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f000 ff66 	bl	8003940 <VL53L0X_WrByte>
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8002a74:	b26d      	sxtb	r5, r5
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8002a76:	4305      	orrs	r5, r0
 8002a78:	b26d      	sxtb	r5, r5
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8002a7a:	9b03      	ldr	r3, [sp, #12]
 8002a7c:	bb1d      	cbnz	r5, 8002ac6 <VL53L0X_get_info_from_device+0x4f2>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8002a7e:	f1ba 0f00 	cmp.w	sl, #0
 8002a82:	d001      	beq.n	8002a88 <VL53L0X_get_info_from_device+0x4b4>
 8002a84:	07f0      	lsls	r0, r6, #31
 8002a86:	d52a      	bpl.n	8002ade <VL53L0X_get_info_from_device+0x50a>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
			}
		}

		if (((option & 2) == 2) &&
 8002a88:	9a02      	ldr	r2, [sp, #8]
 8002a8a:	2a00      	cmp	r2, #0
 8002a8c:	d138      	bne.n	8002b00 <VL53L0X_get_info_from_device+0x52c>
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);

		}

		if (((option & 4) == 4) &&
 8002a8e:	9a01      	ldr	r2, [sp, #4]
 8002a90:	b1aa      	cbz	r2, 8002abe <VL53L0X_get_info_from_device+0x4ea>
 8002a92:	0772      	lsls	r2, r6, #29
 8002a94:	d413      	bmi.n	8002abe <VL53L0X_get_info_from_device+0x4ea>
			((ReadDataFromDeviceDone & 4) == 0)) {
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002a96:	9a07      	ldr	r2, [sp, #28]
 8002a98:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8002a9c:	027f      	lsls	r7, r7, #9
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002a9e:	9a08      	ldr	r2, [sp, #32]
 8002aa0:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002aa4:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
			if (DistMeasFixed1104_400_mm != 0) {
 8002aa8:	b13b      	cbz	r3, 8002aba <VL53L0X_get_info_from_device+0x4e6>
					OffsetFixed1104_mm =
 8002aaa:	f5a3 52c8 	sub.w	r2, r3, #6400	; 0x1900
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8002aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ab2:	4353      	muls	r3, r2
 8002ab4:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters *= -1;
 8002ab6:	425b      	negs	r3, r3
 8002ab8:	b29b      	uxth	r3, r3
			}

			PALDevDataSet(Dev,
 8002aba:	b21b      	sxth	r3, r3
 8002abc:	60e3      	str	r3, [r4, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8002abe:	ea46 0608 	orr.w	r6, r6, r8
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8002ac2:	f884 60f0 	strb.w	r6, [r4, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8002ac6:	4628      	mov	r0, r5
 8002ac8:	b011      	add	sp, #68	; 0x44
 8002aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t ReferenceSpadType = 0;
 8002ace:	46d1      	mov	r9, sl
	uint8_t ReferenceSpadCount = 0;
 8002ad0:	46d3      	mov	fp, sl
 8002ad2:	e62d      	b.n	8002730 <VL53L0X_get_info_from_device+0x15c>
 8002ad4:	46cb      	mov	fp, r9
 8002ad6:	e62b      	b.n	8002730 <VL53L0X_get_info_from_device+0x15c>
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8002ad8:	2700      	movs	r7, #0
	uint32_t DistMeasFixed1104_400_mm = 0;
 8002ada:	463b      	mov	r3, r7
 8002adc:	e790      	b.n	8002a00 <VL53L0X_get_info_from_device+0x42c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002ade:	f884 b113 	strb.w	fp, [r4, #275]	; 0x113
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002ae2:	f884 9114 	strb.w	r9, [r4, #276]	; 0x114
 8002ae6:	f504 7195 	add.w	r1, r4, #298	; 0x12a
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8002aea:	462a      	mov	r2, r5
					NvmRefGoodSpadMap[i];
 8002aec:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8002af0:	f812 000e 	ldrb.w	r0, [r2, lr]
 8002af4:	f801 0b01 	strb.w	r0, [r1], #1
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8002af8:	3201      	adds	r2, #1
 8002afa:	2a06      	cmp	r2, #6
 8002afc:	d1f8      	bne.n	8002af0 <VL53L0X_get_info_from_device+0x51c>
 8002afe:	e7c3      	b.n	8002a88 <VL53L0X_get_info_from_device+0x4b4>
		if (((option & 2) == 2) &&
 8002b00:	07b1      	lsls	r1, r6, #30
 8002b02:	d4c4      	bmi.n	8002a8e <VL53L0X_get_info_from_device+0x4ba>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002b04:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8002b08:	f884 20f1 	strb.w	r2, [r4, #241]	; 0xf1
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002b0c:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8002b10:	f884 20f2 	strb.w	r2, [r4, #242]	; 0xf2
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8002b14:	a90b      	add	r1, sp, #44	; 0x2c
 8002b16:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	f003 ff72 	bl	8006a04 <strcpy>
 8002b20:	9b02      	ldr	r3, [sp, #8]
 8002b22:	e7b4      	b.n	8002a8e <VL53L0X_get_info_from_device+0x4ba>
 8002b24:	464d      	mov	r5, r9
	return Status;
 8002b26:	e7ce      	b.n	8002ac6 <VL53L0X_get_info_from_device+0x4f2>

08002b28 <VL53L0X_encode_timeout>:

	uint16_t encoded_timeout = 0;
	uint32_t ls_byte = 0;
	uint16_t ms_byte = 0;

	if (timeout_macro_clks > 0) {
 8002b28:	b150      	cbz	r0, 8002b40 <VL53L0X_encode_timeout+0x18>
		ls_byte = timeout_macro_clks - 1;
 8002b2a:	3801      	subs	r0, #1
 8002b2c:	2300      	movs	r3, #0

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8002b2e:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	f103 0301 	add.w	r3, r3, #1
 8002b38:	d103      	bne.n	8002b42 <VL53L0X_encode_timeout+0x1a>
			ls_byte = ls_byte >> 1;
			ms_byte++;
		}

		encoded_timeout = (ms_byte << 8)
 8002b3a:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8002b3e:	b280      	uxth	r0, r0
				+ (uint16_t) (ls_byte & 0x000000FF);
	}

	return encoded_timeout;

}
 8002b40:	4770      	bx	lr
			ls_byte = ls_byte >> 1;
 8002b42:	0840      	lsrs	r0, r0, #1
 8002b44:	e7f3      	b.n	8002b2e <VL53L0X_encode_timeout+0x6>

08002b46 <VL53L0X_decode_timeout>:
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8002b46:	b2c3      	uxtb	r3, r0
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8002b48:	0a00      	lsrs	r0, r0, #8
 8002b4a:	fa03 f000 	lsl.w	r0, r3, r0

	return timeout_macro_clks;
}
 8002b4e:	3001      	adds	r0, #1
 8002b50:	4770      	bx	lr
	...

08002b54 <VL53L0X_calc_timeout_mclks>:
	macro_period_ps = (uint32_t)(macro_period_vclks
 8002b54:	4808      	ldr	r0, [pc, #32]	; (8002b78 <VL53L0X_calc_timeout_mclks+0x24>)

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8002b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	macro_period_ps = (uint32_t)(macro_period_vclks
 8002b5a:	4342      	muls	r2, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8002b5c:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
		+ (macro_period_ns / 2)) / macro_period_ns);
 8002b60:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b64:	fbb2 f0f0 	udiv	r0, r2, r0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8002b68:	fbb2 f2f3 	udiv	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8002b6c:	fb03 0001 	mla	r0, r3, r1, r0

	return timeout_period_mclks;
}
 8002b70:	fbb0 f0f2 	udiv	r0, r0, r2
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	003a2f00 	.word	0x003a2f00

08002b7c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8002b7c:	b510      	push	{r4, lr}
	macro_period_ps = (uint32_t)(macro_period_vclks
 8002b7e:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <VL53L0X_calc_timeout_us+0x24>)
 8002b80:	435a      	muls	r2, r3
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8002b82:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
 8002b86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
		+ (macro_period_ns / 2)) / 1000;
 8002b8a:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8002b8e:	fbb2 f3f0 	udiv	r3, r2, r0
		+ (macro_period_ns / 2)) / 1000;
 8002b92:	fbb2 f2f4 	udiv	r2, r2, r4
 8002b96:	fb01 2203 	mla	r2, r1, r3, r2

	return actual_timeout_period_us;
}
 8002b9a:	fbb2 f0f0 	udiv	r0, r2, r0
 8002b9e:	bd10      	pop	{r4, pc}
 8002ba0:	003a2f00 	.word	0x003a2f00

08002ba4 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8002ba4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8002ba8:	2902      	cmp	r1, #2
	uint8_t EncodedTimeOutByte = 0;
 8002baa:	f04f 0400 	mov.w	r4, #0
{
 8002bae:	4606      	mov	r6, r0
 8002bb0:	4690      	mov	r8, r2
	uint8_t EncodedTimeOutByte = 0;
 8002bb2:	f88d 4003 	strb.w	r4, [sp, #3]
	uint16_t PreRangeEncodedTimeOut = 0;
 8002bb6:	f8ad 4004 	strh.w	r4, [sp, #4]
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8002bba:	d81d      	bhi.n	8002bf8 <get_sequence_step_timeout+0x54>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8002bbc:	f10d 0202 	add.w	r2, sp, #2
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	f7fe fba7 	bl	8001314 <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8002bc6:	4605      	mov	r5, r0
 8002bc8:	b930      	cbnz	r0, 8002bd8 <get_sequence_step_timeout+0x34>
			Status = VL53L0X_RdByte(Dev,
 8002bca:	f10d 0203 	add.w	r2, sp, #3
 8002bce:	2146      	movs	r1, #70	; 0x46
 8002bd0:	4630      	mov	r0, r6
 8002bd2:	f000 fe26 	bl	8003822 <VL53L0X_RdByte>
 8002bd6:	4605      	mov	r5, r0
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8002bd8:	f89d 0003 	ldrb.w	r0, [sp, #3]
				Status = VL53L0X_RdWord(Dev,
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8002bdc:	f7ff ffb3 	bl	8002b46 <VL53L0X_decode_timeout>
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8002be0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8002be4:	b281      	uxth	r1, r0
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8002be6:	4630      	mov	r0, r6
 8002be8:	f7ff ffc8 	bl	8002b7c <VL53L0X_calc_timeout_us>
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8002bec:	f8c8 0000 	str.w	r0, [r8]

	return Status;
}
 8002bf0:	4628      	mov	r0, r5
 8002bf2:	b004      	add	sp, #16
 8002bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8002bf8:	2903      	cmp	r1, #3
 8002bfa:	d118      	bne.n	8002c2e <get_sequence_step_timeout+0x8a>
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8002bfc:	f10d 0202 	add.w	r2, sp, #2
 8002c00:	4621      	mov	r1, r4
 8002c02:	f7fe fb87 	bl	8001314 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8002c06:	4605      	mov	r5, r0
 8002c08:	2800      	cmp	r0, #0
 8002c0a:	d14a      	bne.n	8002ca2 <get_sequence_step_timeout+0xfe>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8002c0c:	4601      	mov	r1, r0
 8002c0e:	f10d 0202 	add.w	r2, sp, #2
 8002c12:	4630      	mov	r0, r6
 8002c14:	f7fe fb7e 	bl	8001314 <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 8002c18:	4605      	mov	r5, r0
 8002c1a:	b928      	cbnz	r0, 8002c28 <get_sequence_step_timeout+0x84>
				Status = VL53L0X_RdWord(Dev,
 8002c1c:	aa01      	add	r2, sp, #4
 8002c1e:	2151      	movs	r1, #81	; 0x51
 8002c20:	4630      	mov	r0, r6
 8002c22:	f000 fe47 	bl	80038b4 <VL53L0X_RdWord>
 8002c26:	4605      	mov	r5, r0
			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8002c28:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002c2c:	e7d6      	b.n	8002bdc <get_sequence_step_timeout+0x38>
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8002c2e:	2904      	cmp	r1, #4
 8002c30:	d139      	bne.n	8002ca6 <get_sequence_step_timeout+0x102>
		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8002c32:	a902      	add	r1, sp, #8
 8002c34:	f7fe fbc1 	bl	80013ba <VL53L0X_GetSequenceStepEnables>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8002c38:	f89d 100b 	ldrb.w	r1, [sp, #11]
 8002c3c:	b369      	cbz	r1, 8002c9a <get_sequence_step_timeout+0xf6>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8002c3e:	f10d 0202 	add.w	r2, sp, #2
 8002c42:	4621      	mov	r1, r4
 8002c44:	4630      	mov	r0, r6
 8002c46:	f7fe fb65 	bl	8001314 <VL53L0X_GetVcselPulsePeriod>
 8002c4a:	4605      	mov	r5, r0
 8002c4c:	4607      	mov	r7, r0
			if (Status == VL53L0X_ERROR_NONE) {
 8002c4e:	bb30      	cbnz	r0, 8002c9e <get_sequence_step_timeout+0xfa>
				Status = VL53L0X_RdWord(Dev,
 8002c50:	aa01      	add	r2, sp, #4
 8002c52:	2151      	movs	r1, #81	; 0x51
 8002c54:	4630      	mov	r0, r6
 8002c56:	f000 fe2d 	bl	80038b4 <VL53L0X_RdWord>
 8002c5a:	4605      	mov	r5, r0
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8002c5c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8002c60:	f7ff ff71 	bl	8002b46 <VL53L0X_decode_timeout>
 8002c64:	b284      	uxth	r4, r0
		if (Status == VL53L0X_ERROR_NONE) {
 8002c66:	b99d      	cbnz	r5, 8002c90 <get_sequence_step_timeout+0xec>
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8002c68:	f10d 0202 	add.w	r2, sp, #2
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	4630      	mov	r0, r6
 8002c70:	f7fe fb50 	bl	8001314 <VL53L0X_GetVcselPulsePeriod>
		if (Status == VL53L0X_ERROR_NONE) {
 8002c74:	4605      	mov	r5, r0
 8002c76:	b990      	cbnz	r0, 8002c9e <get_sequence_step_timeout+0xfa>
			Status = VL53L0X_RdWord(Dev,
 8002c78:	f10d 0206 	add.w	r2, sp, #6
 8002c7c:	2171      	movs	r1, #113	; 0x71
 8002c7e:	4630      	mov	r0, r6
 8002c80:	f000 fe18 	bl	80038b4 <VL53L0X_RdWord>
 8002c84:	4605      	mov	r5, r0
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8002c86:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8002c8a:	f7ff ff5c 	bl	8002b46 <VL53L0X_decode_timeout>
 8002c8e:	b287      	uxth	r7, r0
		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8002c90:	1b3c      	subs	r4, r7, r4
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8002c92:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8002c96:	b2a1      	uxth	r1, r4
 8002c98:	e7a5      	b.n	8002be6 <get_sequence_step_timeout+0x42>
		PreRangeTimeOutMClks = 0;
 8002c9a:	460c      	mov	r4, r1
 8002c9c:	e7e4      	b.n	8002c68 <get_sequence_step_timeout+0xc4>
	uint16_t FinalRangeTimeOutMClks = 0;
 8002c9e:	2700      	movs	r7, #0
 8002ca0:	e7f6      	b.n	8002c90 <get_sequence_step_timeout+0xec>
	uint32_t TimeoutMicroSeconds = 0;
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	e7a2      	b.n	8002bec <get_sequence_step_timeout+0x48>
 8002ca6:	4620      	mov	r0, r4
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ca8:	4625      	mov	r5, r4
 8002caa:	e79f      	b.n	8002bec <get_sequence_step_timeout+0x48>

08002cac <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8002cac:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8002cae:	2902      	cmp	r1, #2
{
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	4605      	mov	r5, r0
 8002cb4:	4617      	mov	r7, r2
	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8002cb6:	d81e      	bhi.n	8002cf6 <set_sequence_step_timeout+0x4a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8002cb8:	f10d 0205 	add.w	r2, sp, #5
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	f7fe fb29 	bl	8001314 <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8002cc2:	4604      	mov	r4, r0
 8002cc4:	b9a0      	cbnz	r0, 8002cf0 <set_sequence_step_timeout+0x44>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8002cc6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002cca:	4639      	mov	r1, r7
 8002ccc:	4628      	mov	r0, r5
 8002cce:	f7ff ff41 	bl	8002b54 <VL53L0X_calc_timeout_mclks>
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8002cd2:	b283      	uxth	r3, r0
 8002cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
				MsrcEncodedTimeOut = 255;
			else
				MsrcEncodedTimeOut =
 8002cd8:	bf9a      	itte	ls
 8002cda:	f100 32ff 	addls.w	r2, r0, #4294967295
 8002cde:	b2d2      	uxtbls	r2, r2
				MsrcEncodedTimeOut = 255;
 8002ce0:	22ff      	movhi	r2, #255	; 0xff
					(uint8_t)MsrcRangeTimeOutMClks - 1;

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002ce2:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_WrByte(Dev,
 8002ce6:	2146      	movs	r1, #70	; 0x46
 8002ce8:	4628      	mov	r0, r5
 8002cea:	f000 fe29 	bl	8003940 <VL53L0X_WrByte>
 8002cee:	4604      	mov	r4, r0
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;

	}
	return Status;
}
 8002cf0:	4620      	mov	r0, r4
 8002cf2:	b005      	add	sp, #20
 8002cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8002cf6:	2903      	cmp	r1, #3
 8002cf8:	d11f      	bne.n	8002d3a <set_sequence_step_timeout+0x8e>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8002cfa:	f10d 0205 	add.w	r2, sp, #5
 8002cfe:	2100      	movs	r1, #0
 8002d00:	f7fe fb08 	bl	8001314 <VL53L0X_GetVcselPulsePeriod>
					VL53L0X_calc_timeout_mclks(Dev,
 8002d04:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002d08:	4639      	mov	r1, r7
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8002d0a:	4604      	mov	r4, r0
					VL53L0X_calc_timeout_mclks(Dev,
 8002d0c:	4628      	mov	r0, r5
 8002d0e:	f7ff ff21 	bl	8002b54 <VL53L0X_calc_timeout_mclks>
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8002d12:	b280      	uxth	r0, r0
 8002d14:	f7ff ff08 	bl	8002b28 <VL53L0X_encode_timeout>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	f8ad 0006 	strh.w	r0, [sp, #6]
				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8002d1e:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
			if (Status == VL53L0X_ERROR_NONE) {
 8002d22:	2c00      	cmp	r4, #0
 8002d24:	d1e4      	bne.n	8002cf0 <set_sequence_step_timeout+0x44>
				Status = VL53L0X_WrWord(Dev,
 8002d26:	2151      	movs	r1, #81	; 0x51
 8002d28:	4628      	mov	r0, r5
 8002d2a:	f000 fe19 	bl	8003960 <VL53L0X_WrWord>
			if (Status == VL53L0X_ERROR_NONE) {
 8002d2e:	4604      	mov	r4, r0
 8002d30:	2800      	cmp	r0, #0
 8002d32:	d1dd      	bne.n	8002cf0 <set_sequence_step_timeout+0x44>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002d34:	f8c5 70e4 	str.w	r7, [r5, #228]	; 0xe4
 8002d38:	e7da      	b.n	8002cf0 <set_sequence_step_timeout+0x44>
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8002d3a:	2904      	cmp	r1, #4
 8002d3c:	d13b      	bne.n	8002db6 <set_sequence_step_timeout+0x10a>
			VL53L0X_GetSequenceStepEnables(Dev,
 8002d3e:	a902      	add	r1, sp, #8
 8002d40:	f7fe fb3b 	bl	80013ba <VL53L0X_GetSequenceStepEnables>
			if (SchedulerSequenceSteps.PreRangeOn) {
 8002d44:	f89d 600b 	ldrb.w	r6, [sp, #11]
 8002d48:	b1b6      	cbz	r6, 8002d78 <set_sequence_step_timeout+0xcc>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8002d4a:	f10d 0205 	add.w	r2, sp, #5
 8002d4e:	2100      	movs	r1, #0
 8002d50:	4628      	mov	r0, r5
 8002d52:	f7fe fadf 	bl	8001314 <VL53L0X_GetVcselPulsePeriod>
				if (Status == VL53L0X_ERROR_NONE) {
 8002d56:	4604      	mov	r4, r0
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d1c9      	bne.n	8002cf0 <set_sequence_step_timeout+0x44>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8002d5c:	f10d 0206 	add.w	r2, sp, #6
 8002d60:	2151      	movs	r1, #81	; 0x51
 8002d62:	4628      	mov	r0, r5
 8002d64:	f000 fda6 	bl	80038b4 <VL53L0X_RdWord>
 8002d68:	4604      	mov	r4, r0
						VL53L0X_decode_timeout(
 8002d6a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8002d6e:	f7ff feea 	bl	8002b46 <VL53L0X_decode_timeout>
			if (Status == VL53L0X_ERROR_NONE) {
 8002d72:	2c00      	cmp	r4, #0
 8002d74:	d1bc      	bne.n	8002cf0 <set_sequence_step_timeout+0x44>
					PreRangeTimeOutMClks =
 8002d76:	b286      	uxth	r6, r0
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8002d78:	f10d 0205 	add.w	r2, sp, #5
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	4628      	mov	r0, r5
 8002d80:	f7fe fac8 	bl	8001314 <VL53L0X_GetVcselPulsePeriod>
			if (Status == VL53L0X_ERROR_NONE) {
 8002d84:	4604      	mov	r4, r0
 8002d86:	2800      	cmp	r0, #0
 8002d88:	d1b2      	bne.n	8002cf0 <set_sequence_step_timeout+0x44>
					VL53L0X_calc_timeout_mclks(Dev,
 8002d8a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002d8e:	4639      	mov	r1, r7
 8002d90:	4628      	mov	r0, r5
 8002d92:	f7ff fedf 	bl	8002b54 <VL53L0X_calc_timeout_mclks>
				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8002d96:	fa16 f080 	uxtah	r0, r6, r0
				FinalRangeEncodedTimeOut =
 8002d9a:	b280      	uxth	r0, r0
 8002d9c:	f7ff fec4 	bl	8002b28 <VL53L0X_encode_timeout>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8002da0:	2171      	movs	r1, #113	; 0x71
 8002da2:	4602      	mov	r2, r0
 8002da4:	4628      	mov	r0, r5
 8002da6:	f000 fddb 	bl	8003960 <VL53L0X_WrWord>
				if (Status == VL53L0X_ERROR_NONE) {
 8002daa:	4604      	mov	r4, r0
 8002dac:	2800      	cmp	r0, #0
 8002dae:	d19f      	bne.n	8002cf0 <set_sequence_step_timeout+0x44>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002db0:	f8c5 70dc 	str.w	r7, [r5, #220]	; 0xdc
 8002db4:	e79c      	b.n	8002cf0 <set_sequence_step_timeout+0x44>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002db6:	f06f 0403 	mvn.w	r4, #3
 8002dba:	e799      	b.n	8002cf0 <set_sequence_step_timeout+0x44>

08002dbc <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8002dbc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint8_t MaxFinalVcselPeriodPCLK = 14;
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8002dc0:	2300      	movs	r3, #0

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8002dc2:	f012 0701 	ands.w	r7, r2, #1
{
 8002dc6:	4605      	mov	r5, r0
 8002dc8:	4688      	mov	r8, r1
 8002dca:	4616      	mov	r6, r2
	uint8_t PhaseCalInt = 0;
 8002dcc:	f88d 3003 	strb.w	r3, [sp, #3]
	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8002dd0:	f040 80e5 	bne.w	8002f9e <VL53L0X_set_vcsel_pulse_period+0x1e2>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8002dd4:	2900      	cmp	r1, #0
 8002dd6:	d143      	bne.n	8002e60 <VL53L0X_set_vcsel_pulse_period+0xa4>
 8002dd8:	f1a2 030c 	sub.w	r3, r2, #12
 8002ddc:	2b06      	cmp	r3, #6
 8002dde:	f200 80de 	bhi.w	8002f9e <VL53L0X_set_vcsel_pulse_period+0x1e2>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8002de2:	2a0c      	cmp	r2, #12
 8002de4:	d178      	bne.n	8002ed8 <VL53L0X_set_vcsel_pulse_period+0x11c>

			Status = VL53L0X_WrByte(Dev,
 8002de6:	2218      	movs	r2, #24
			Status = VL53L0X_WrByte(Dev,
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {

			Status = VL53L0X_WrByte(Dev,
 8002de8:	2157      	movs	r1, #87	; 0x57
 8002dea:	f000 fda9 	bl	8003940 <VL53L0X_WrByte>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8002dee:	2208      	movs	r2, #8
 8002df0:	2156      	movs	r1, #86	; 0x56
 8002df2:	4628      	mov	r0, r5
 8002df4:	f000 fda4 	bl	8003940 <VL53L0X_WrByte>
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	d16a      	bne.n	8002ed2 <VL53L0X_set_vcsel_pulse_period+0x116>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8002dfc:	0874      	lsrs	r4, r6, #1
 8002dfe:	3c01      	subs	r4, #1
 8002e00:	b2e4      	uxtb	r4, r4
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8002e02:	aa02      	add	r2, sp, #8
 8002e04:	2103      	movs	r1, #3
 8002e06:	4628      	mov	r0, r5
 8002e08:	f7ff fecc 	bl	8002ba4 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8002e0c:	b9b0      	cbnz	r0, 8002e3c <VL53L0X_set_vcsel_pulse_period+0x80>
				Status = get_sequence_step_timeout(Dev,
 8002e0e:	aa03      	add	r2, sp, #12
 8002e10:	2102      	movs	r1, #2
 8002e12:	4628      	mov	r0, r5
 8002e14:	f7ff fec6 	bl	8002ba4 <get_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8002e18:	b980      	cbnz	r0, 8002e3c <VL53L0X_set_vcsel_pulse_period+0x80>
				Status = VL53L0X_WrByte(Dev,
 8002e1a:	4622      	mov	r2, r4
 8002e1c:	2150      	movs	r1, #80	; 0x50
 8002e1e:	4628      	mov	r0, r5
 8002e20:	f000 fd8e 	bl	8003940 <VL53L0X_WrByte>
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8002e24:	b950      	cbnz	r0, 8002e3c <VL53L0X_set_vcsel_pulse_period+0x80>
				Status = set_sequence_step_timeout(Dev,
 8002e26:	9a02      	ldr	r2, [sp, #8]
 8002e28:	2103      	movs	r1, #3
 8002e2a:	4628      	mov	r0, r5
 8002e2c:	f7ff ff3e 	bl	8002cac <set_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8002e30:	b920      	cbnz	r0, 8002e3c <VL53L0X_set_vcsel_pulse_period+0x80>
				Status = set_sequence_step_timeout(Dev,
 8002e32:	9a03      	ldr	r2, [sp, #12]
 8002e34:	2102      	movs	r1, #2
 8002e36:	4628      	mov	r0, r5
 8002e38:	f7ff ff38 	bl	8002cac <set_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002e3c:	f885 60e8 	strb.w	r6, [r5, #232]	; 0xe8
			Status = VL53L0X_ERROR_INVALID_PARAMS;
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8002e40:	2800      	cmp	r0, #0
 8002e42:	d146      	bne.n	8002ed2 <VL53L0X_set_vcsel_pulse_period+0x116>
		VL53L0X_GETPARAMETERFIELD(Dev,
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8002e44:	6969      	ldr	r1, [r5, #20]
 8002e46:	4628      	mov	r0, r5
 8002e48:	f7fe fa60 	bl	800130c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8002e4c:	2800      	cmp	r0, #0
 8002e4e:	d140      	bne.n	8002ed2 <VL53L0X_set_vcsel_pulse_period+0x116>
		Status = VL53L0X_perform_phase_calibration(
 8002e50:	4602      	mov	r2, r0
 8002e52:	2301      	movs	r3, #1
 8002e54:	f10d 0103 	add.w	r1, sp, #3
 8002e58:	4628      	mov	r0, r5
 8002e5a:	f7ff f9e1 	bl	8002220 <VL53L0X_perform_phase_calibration>
 8002e5e:	e038      	b.n	8002ed2 <VL53L0X_set_vcsel_pulse_period+0x116>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8002e60:	2901      	cmp	r1, #1
 8002e62:	f040 8092 	bne.w	8002f8a <VL53L0X_set_vcsel_pulse_period+0x1ce>
 8002e66:	f1a2 0308 	sub.w	r3, r2, #8
 8002e6a:	2b06      	cmp	r3, #6
 8002e6c:	f200 8097 	bhi.w	8002f9e <VL53L0X_set_vcsel_pulse_period+0x1e2>
		if (VCSELPulsePeriodPCLK == 8) {
 8002e70:	2a08      	cmp	r2, #8
 8002e72:	d13d      	bne.n	8002ef0 <VL53L0X_set_vcsel_pulse_period+0x134>
			Status = VL53L0X_WrByte(Dev,
 8002e74:	2210      	movs	r2, #16
 8002e76:	2148      	movs	r1, #72	; 0x48
 8002e78:	f000 fd62 	bl	8003940 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8002e7c:	4632      	mov	r2, r6
 8002e7e:	2147      	movs	r1, #71	; 0x47
 8002e80:	4628      	mov	r0, r5
 8002e82:	f000 fd5d 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8002e86:	2202      	movs	r2, #2
			Status = VL53L0X_WrByte(Dev,
 8002e88:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8002e8a:	2132      	movs	r1, #50	; 0x32
 8002e8c:	4628      	mov	r0, r5
 8002e8e:	f000 fd57 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8002e92:	220c      	movs	r2, #12
			Status |= VL53L0X_WrByte(Dev,
 8002e94:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8002e96:	2130      	movs	r1, #48	; 0x30
 8002e98:	4628      	mov	r0, r5
 8002e9a:	f000 fd51 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8002e9e:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8002ea0:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8002ea2:	4642      	mov	r2, r8
 8002ea4:	21ff      	movs	r1, #255	; 0xff
 8002ea6:	4628      	mov	r0, r5
 8002ea8:	f000 fd4a 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8002eac:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8002eae:	4304      	orrs	r4, r0
 8002eb0:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8002eb2:	2230      	movs	r2, #48	; 0x30
			Status |= VL53L0X_WrByte(Dev,
 8002eb4:	2130      	movs	r1, #48	; 0x30
 8002eb6:	4628      	mov	r0, r5
 8002eb8:	f000 fd42 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002ebc:	463a      	mov	r2, r7
			Status |= VL53L0X_WrByte(Dev,
 8002ebe:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002ec0:	21ff      	movs	r1, #255	; 0xff
 8002ec2:	4628      	mov	r0, r5
 8002ec4:	f000 fd3c 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8002ec8:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8002eca:	4320      	orrs	r0, r4
 8002ecc:	b240      	sxtb	r0, r0
	if (Status == VL53L0X_ERROR_NONE) {
 8002ece:	2800      	cmp	r0, #0
 8002ed0:	d068      	beq.n	8002fa4 <VL53L0X_set_vcsel_pulse_period+0x1e8>
			Dev, &PhaseCalInt, 0, 1);

	return Status;
}
 8002ed2:	b004      	add	sp, #16
 8002ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (VCSELPulsePeriodPCLK == 14) {
 8002ed8:	2a0e      	cmp	r2, #14
 8002eda:	d101      	bne.n	8002ee0 <VL53L0X_set_vcsel_pulse_period+0x124>
			Status = VL53L0X_WrByte(Dev,
 8002edc:	2230      	movs	r2, #48	; 0x30
 8002ede:	e783      	b.n	8002de8 <VL53L0X_set_vcsel_pulse_period+0x2c>
		} else if (VCSELPulsePeriodPCLK == 16) {
 8002ee0:	2a10      	cmp	r2, #16
 8002ee2:	d101      	bne.n	8002ee8 <VL53L0X_set_vcsel_pulse_period+0x12c>
			Status = VL53L0X_WrByte(Dev,
 8002ee4:	2240      	movs	r2, #64	; 0x40
 8002ee6:	e77f      	b.n	8002de8 <VL53L0X_set_vcsel_pulse_period+0x2c>
		} else if (VCSELPulsePeriodPCLK == 18) {
 8002ee8:	2a12      	cmp	r2, #18
 8002eea:	d14e      	bne.n	8002f8a <VL53L0X_set_vcsel_pulse_period+0x1ce>
			Status = VL53L0X_WrByte(Dev,
 8002eec:	2250      	movs	r2, #80	; 0x50
 8002eee:	e77b      	b.n	8002de8 <VL53L0X_set_vcsel_pulse_period+0x2c>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8002ef0:	2a0a      	cmp	r2, #10
 8002ef2:	d120      	bne.n	8002f36 <VL53L0X_set_vcsel_pulse_period+0x17a>
			Status = VL53L0X_WrByte(Dev,
 8002ef4:	2228      	movs	r2, #40	; 0x28
 8002ef6:	2148      	movs	r1, #72	; 0x48
 8002ef8:	f000 fd22 	bl	8003940 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8002efc:	2208      	movs	r2, #8
 8002efe:	2147      	movs	r1, #71	; 0x47
 8002f00:	4628      	mov	r0, r5
 8002f02:	f000 fd1d 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8002f06:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 8002f08:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8002f0a:	2132      	movs	r1, #50	; 0x32
 8002f0c:	4628      	mov	r0, r5
 8002f0e:	f000 fd17 	bl	8003940 <VL53L0X_WrByte>
 8002f12:	4304      	orrs	r4, r0
 8002f14:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8002f16:	2209      	movs	r2, #9
			Status |= VL53L0X_WrByte(Dev,
 8002f18:	2130      	movs	r1, #48	; 0x30
 8002f1a:	4628      	mov	r0, r5
 8002f1c:	f000 fd10 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8002f20:	4642      	mov	r2, r8
			Status |= VL53L0X_WrByte(Dev,
 8002f22:	4304      	orrs	r4, r0
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8002f24:	21ff      	movs	r1, #255	; 0xff
 8002f26:	4628      	mov	r0, r5
 8002f28:	f000 fd0a 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8002f2c:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8002f2e:	4304      	orrs	r4, r0
 8002f30:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8002f32:	2220      	movs	r2, #32
 8002f34:	e7be      	b.n	8002eb4 <VL53L0X_set_vcsel_pulse_period+0xf8>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8002f36:	2a0c      	cmp	r2, #12
 8002f38:	d112      	bne.n	8002f60 <VL53L0X_set_vcsel_pulse_period+0x1a4>
			Status = VL53L0X_WrByte(Dev,
 8002f3a:	2238      	movs	r2, #56	; 0x38
 8002f3c:	2148      	movs	r1, #72	; 0x48
 8002f3e:	f000 fcff 	bl	8003940 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8002f42:	2208      	movs	r2, #8
 8002f44:	2147      	movs	r1, #71	; 0x47
 8002f46:	4628      	mov	r0, r5
 8002f48:	f000 fcfa 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8002f4c:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 8002f4e:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8002f50:	2132      	movs	r1, #50	; 0x32
 8002f52:	4628      	mov	r0, r5
 8002f54:	f000 fcf4 	bl	8003940 <VL53L0X_WrByte>
 8002f58:	4304      	orrs	r4, r0
 8002f5a:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8002f5c:	2208      	movs	r2, #8
 8002f5e:	e7db      	b.n	8002f18 <VL53L0X_set_vcsel_pulse_period+0x15c>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8002f60:	2a0e      	cmp	r2, #14
 8002f62:	d112      	bne.n	8002f8a <VL53L0X_set_vcsel_pulse_period+0x1ce>
			Status = VL53L0X_WrByte(Dev,
 8002f64:	2248      	movs	r2, #72	; 0x48
 8002f66:	4611      	mov	r1, r2
 8002f68:	f000 fcea 	bl	8003940 <VL53L0X_WrByte>
			Status = VL53L0X_WrByte(Dev,
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	2147      	movs	r1, #71	; 0x47
 8002f70:	4628      	mov	r0, r5
 8002f72:	f000 fce5 	bl	8003940 <VL53L0X_WrByte>
			Status |= VL53L0X_WrByte(Dev,
 8002f76:	2203      	movs	r2, #3
			Status = VL53L0X_WrByte(Dev,
 8002f78:	4604      	mov	r4, r0
			Status |= VL53L0X_WrByte(Dev,
 8002f7a:	2132      	movs	r1, #50	; 0x32
 8002f7c:	4628      	mov	r0, r5
 8002f7e:	f000 fcdf 	bl	8003940 <VL53L0X_WrByte>
 8002f82:	4304      	orrs	r4, r0
 8002f84:	b264      	sxtb	r4, r4
			Status |= VL53L0X_WrByte(Dev,
 8002f86:	2207      	movs	r2, #7
 8002f88:	e7c6      	b.n	8002f18 <VL53L0X_set_vcsel_pulse_period+0x15c>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8002f8a:	0874      	lsrs	r4, r6, #1
 8002f8c:	3c01      	subs	r4, #1
 8002f8e:	b2e4      	uxtb	r4, r4
		switch (VcselPeriodType) {
 8002f90:	f1b8 0f00 	cmp.w	r8, #0
 8002f94:	f43f af35 	beq.w	8002e02 <VL53L0X_set_vcsel_pulse_period+0x46>
 8002f98:	f1b8 0f01 	cmp.w	r8, #1
 8002f9c:	d005      	beq.n	8002faa <VL53L0X_set_vcsel_pulse_period+0x1ee>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002f9e:	f06f 0003 	mvn.w	r0, #3
 8002fa2:	e796      	b.n	8002ed2 <VL53L0X_set_vcsel_pulse_period+0x116>
	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8002fa4:	0874      	lsrs	r4, r6, #1
 8002fa6:	3c01      	subs	r4, #1
 8002fa8:	b2e4      	uxtb	r4, r4
			Status = get_sequence_step_timeout(Dev,
 8002faa:	aa01      	add	r2, sp, #4
 8002fac:	2104      	movs	r1, #4
 8002fae:	4628      	mov	r0, r5
 8002fb0:	f7ff fdf8 	bl	8002ba4 <get_sequence_step_timeout>
			if (Status == VL53L0X_ERROR_NONE)
 8002fb4:	b950      	cbnz	r0, 8002fcc <VL53L0X_set_vcsel_pulse_period+0x210>
				Status = VL53L0X_WrByte(Dev,
 8002fb6:	4622      	mov	r2, r4
 8002fb8:	2170      	movs	r1, #112	; 0x70
 8002fba:	4628      	mov	r0, r5
 8002fbc:	f000 fcc0 	bl	8003940 <VL53L0X_WrByte>
			if (Status == VL53L0X_ERROR_NONE)
 8002fc0:	b920      	cbnz	r0, 8002fcc <VL53L0X_set_vcsel_pulse_period+0x210>
				Status = set_sequence_step_timeout(Dev,
 8002fc2:	9a01      	ldr	r2, [sp, #4]
 8002fc4:	2104      	movs	r1, #4
 8002fc6:	4628      	mov	r0, r5
 8002fc8:	f7ff fe70 	bl	8002cac <set_sequence_step_timeout>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8002fcc:	f885 60e0 	strb.w	r6, [r5, #224]	; 0xe0
			break;
 8002fd0:	e736      	b.n	8002e40 <VL53L0X_set_vcsel_pulse_period+0x84>

08002fd2 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8002fd2:	b513      	push	{r0, r1, r4, lr}
 8002fd4:	4614      	mov	r4, r2
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8002fd6:	b121      	cbz	r1, 8002fe2 <VL53L0X_get_vcsel_pulse_period+0x10>
 8002fd8:	2901      	cmp	r1, #1
 8002fda:	d00f      	beq.n	8002ffc <VL53L0X_get_vcsel_pulse_period+0x2a>
		Status = VL53L0X_RdByte(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8002fdc:	f06f 0003 	mvn.w	r0, #3
 8002fe0:	e00a      	b.n	8002ff8 <VL53L0X_get_vcsel_pulse_period+0x26>
		Status = VL53L0X_RdByte(Dev,
 8002fe2:	f10d 0207 	add.w	r2, sp, #7
 8002fe6:	2150      	movs	r1, #80	; 0x50
		Status = VL53L0X_RdByte(Dev,
 8002fe8:	f000 fc1b 	bl	8003822 <VL53L0X_RdByte>
	}

	if (Status == VL53L0X_ERROR_NONE)
 8002fec:	b920      	cbnz	r0, 8002ff8 <VL53L0X_get_vcsel_pulse_period+0x26>
	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8002fee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	005b      	lsls	r3, r3, #1
		*pVCSELPulsePeriodPCLK =
 8002ff6:	7023      	strb	r3, [r4, #0]
			VL53L0X_decode_vcsel_period(vcsel_period_reg);

	return Status;
}
 8002ff8:	b002      	add	sp, #8
 8002ffa:	bd10      	pop	{r4, pc}
		Status = VL53L0X_RdByte(Dev,
 8002ffc:	f10d 0207 	add.w	r2, sp, #7
 8003000:	2170      	movs	r1, #112	; 0x70
 8003002:	e7f1      	b.n	8002fe8 <VL53L0X_get_vcsel_pulse_period+0x16>

08003004 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003004:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8003006:	2300      	movs	r3, #0
{
 8003008:	b085      	sub	sp, #20
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800300a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800300e:	e88d 000c 	stmia.w	sp, {r2, r3}
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
	uint32_t SubTimeout = 0;

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8003012:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8003016:	4299      	cmp	r1, r3
{
 8003018:	4606      	mov	r6, r0
 800301a:	460f      	mov	r7, r1
	if (MeasurementTimingBudgetMicroSeconds
 800301c:	d804      	bhi.n	8003028 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x24>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		return Status;
 800301e:	f06f 0503 	mvn.w	r5, #3
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
 8003022:	4628      	mov	r0, r5
 8003024:	b005      	add	sp, #20
 8003026:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8003028:	a902      	add	r1, sp, #8
 800302a:	f7fe f9c6 	bl	80013ba <VL53L0X_GetSequenceStepEnables>
	if (Status == VL53L0X_ERROR_NONE &&
 800302e:	4605      	mov	r5, r0
 8003030:	2800      	cmp	r0, #0
 8003032:	d1f6      	bne.n	8003022 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
 8003034:	f89d 3008 	ldrb.w	r3, [sp, #8]
	FinalRangeTimingBudgetMicroSeconds =
 8003038:	f6a7 04e8 	subw	r4, r7, #2280	; 0x8e8
	if (Status == VL53L0X_ERROR_NONE &&
 800303c:	b92b      	cbnz	r3, 800304a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x46>
		(SchedulerSequenceSteps.TccOn  ||
 800303e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8003042:	b913      	cbnz	r3, 800304a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x46>
		SchedulerSequenceSteps.MsrcOn ||
 8003044:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8003048:	b1fb      	cbz	r3, 800308a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x86>
		Status = get_sequence_step_timeout(Dev,
 800304a:	466a      	mov	r2, sp
 800304c:	2102      	movs	r1, #2
 800304e:	4630      	mov	r0, r6
 8003050:	f7ff fda8 	bl	8002ba4 <get_sequence_step_timeout>
		if (Status != VL53L0X_ERROR_NONE)
 8003054:	bba8      	cbnz	r0, 80030c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbe>
		if (SchedulerSequenceSteps.TccOn) {
 8003056:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800305a:	b12b      	cbz	r3, 8003068 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x64>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800305c:	9b00      	ldr	r3, [sp, #0]
 800305e:	f203 234e 	addw	r3, r3, #590	; 0x24e
			if (SubTimeout <
 8003062:	429c      	cmp	r4, r3
 8003064:	d9db      	bls.n	800301e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
				FinalRangeTimingBudgetMicroSeconds -=
 8003066:	1ae4      	subs	r4, r4, r3
		if (SchedulerSequenceSteps.DssOn) {
 8003068:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800306c:	b933      	cbnz	r3, 800307c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x78>
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800306e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8003072:	b153      	cbz	r3, 800308a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x86>
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8003074:	9b00      	ldr	r3, [sp, #0]
 8003076:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800307a:	e003      	b.n	8003084 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x80>
			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800307c:	9b00      	ldr	r3, [sp, #0]
 800307e:	f203 23b2 	addw	r3, r3, #690	; 0x2b2
 8003082:	005b      	lsls	r3, r3, #1
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8003084:	42a3      	cmp	r3, r4
 8003086:	d2ca      	bcs.n	800301e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
							-= SubTimeout;
 8003088:	1ae4      	subs	r4, r4, r3
	if (SchedulerSequenceSteps.PreRangeOn) {
 800308a:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800308e:	b15b      	cbz	r3, 80030a8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa4>
		Status = get_sequence_step_timeout(Dev,
 8003090:	aa01      	add	r2, sp, #4
 8003092:	2103      	movs	r1, #3
 8003094:	4630      	mov	r0, r6
 8003096:	f7ff fd85 	bl	8002ba4 <get_sequence_step_timeout>
		SubTimeout = PreRangeTimeoutMicroSeconds +
 800309a:	9b01      	ldr	r3, [sp, #4]
 800309c:	f503 7325 	add.w	r3, r3, #660	; 0x294
		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80030a0:	42a3      	cmp	r3, r4
 80030a2:	d2bc      	bcs.n	800301e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a>
	if (Status == VL53L0X_ERROR_NONE &&
 80030a4:	b968      	cbnz	r0, 80030c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbe>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80030a6:	1ae4      	subs	r4, r4, r3
	if (Status == VL53L0X_ERROR_NONE &&
 80030a8:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0b8      	beq.n	8003022 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
		Status = set_sequence_step_timeout(Dev,
 80030b0:	f2a4 2226 	subw	r2, r4, #550	; 0x226
 80030b4:	2104      	movs	r1, #4
 80030b6:	4630      	mov	r0, r6
 80030b8:	f7ff fdf8 	bl	8002cac <set_sequence_step_timeout>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80030bc:	6177      	str	r7, [r6, #20]
		Status = set_sequence_step_timeout(Dev,
 80030be:	4605      	mov	r5, r0
 80030c0:	e7af      	b.n	8003022 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>
 80030c2:	4605      	mov	r5, r0
 80030c4:	e7ad      	b.n	8003022 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1e>

080030c6 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80030c6:	b570      	push	{r4, r5, r6, lr}
 80030c8:	b086      	sub	sp, #24
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80030ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80030ce:	9302      	str	r3, [sp, #8]
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	9303      	str	r3, [sp, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 80030d4:	f640 3336 	movw	r3, #2870	; 0xb36
 80030d8:	600b      	str	r3, [r1, #0]
{
 80030da:	460c      	mov	r4, r1

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80030dc:	a904      	add	r1, sp, #16
{
 80030de:	4606      	mov	r6, r0
	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80030e0:	f7fe f96b 	bl	80013ba <VL53L0X_GetSequenceStepEnables>

	if (Status != VL53L0X_ERROR_NONE) {
 80030e4:	4605      	mov	r5, r0
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d136      	bne.n	8003158 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>
		LOG_FUNCTION_END(Status);
		return Status;
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80030ea:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80030ee:	b92b      	cbnz	r3, 80030fc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x36>
 80030f0:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80030f4:	b913      	cbnz	r3, 80030fc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x36>
		SchedulerSequenceSteps.MsrcOn ||
 80030f6:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80030fa:	b1cb      	cbz	r3, 8003130 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
 80030fc:	aa02      	add	r2, sp, #8
 80030fe:	2102      	movs	r1, #2
 8003100:	4630      	mov	r0, r6
 8003102:	f7ff fd4f 	bl	8002ba4 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8003106:	2800      	cmp	r0, #0
 8003108:	d140      	bne.n	800318c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
			if (SchedulerSequenceSteps.TccOn) {
 800310a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800310e:	b12b      	cbz	r3, 800311c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x56>
				*pMeasurementTimingBudgetMicroSeconds +=
					MsrcDccTccTimeoutMicroSeconds +
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	f203 224e 	addw	r2, r3, #590	; 0x24e
				*pMeasurementTimingBudgetMicroSeconds +=
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	4413      	add	r3, r2
 800311a:	6023      	str	r3, [r4, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800311c:	f89d 3012 	ldrb.w	r3, [sp, #18]
 8003120:	b1eb      	cbz	r3, 800315e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x98>
				*pMeasurementTimingBudgetMicroSeconds +=
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8003122:	9b02      	ldr	r3, [sp, #8]
 8003124:	f203 22b2 	addw	r2, r3, #690	; 0x2b2
				*pMeasurementTimingBudgetMicroSeconds +=
 8003128:	6823      	ldr	r3, [r4, #0]
 800312a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
				*pMeasurementTimingBudgetMicroSeconds +=
 800312e:	6023      	str	r3, [r4, #0]
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
 8003130:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003134:	b15b      	cbz	r3, 800314e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x88>
			Status = get_sequence_step_timeout(Dev,
 8003136:	aa03      	add	r2, sp, #12
 8003138:	2103      	movs	r1, #3
 800313a:	4630      	mov	r0, r6
 800313c:	f7ff fd32 	bl	8002ba4 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
				PreRangeTimeoutMicroSeconds +
 8003140:	9b03      	ldr	r3, [sp, #12]
 8003142:	f503 7225 	add.w	r2, r3, #660	; 0x294
			*pMeasurementTimingBudgetMicroSeconds +=
 8003146:	6823      	ldr	r3, [r4, #0]
 8003148:	4413      	add	r3, r2
 800314a:	6023      	str	r3, [r4, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800314c:	b9f0      	cbnz	r0, 800318c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xc6>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800314e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8003152:	b973      	cbnz	r3, 8003172 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xac>
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		VL53L0X_SETPARAMETERFIELD(Dev,
 8003154:	6823      	ldr	r3, [r4, #0]
 8003156:	6173      	str	r3, [r6, #20]
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 8003158:	4628      	mov	r0, r5
 800315a:	b006      	add	sp, #24
 800315c:	bd70      	pop	{r4, r5, r6, pc}
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800315e:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0e4      	beq.n	8003130 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6a>
					MsrcDccTccTimeoutMicroSeconds +
 8003166:	9b02      	ldr	r3, [sp, #8]
 8003168:	f503 7225 	add.w	r2, r3, #660	; 0x294
				*pMeasurementTimingBudgetMicroSeconds +=
 800316c:	6823      	ldr	r3, [r4, #0]
 800316e:	4413      	add	r3, r2
 8003170:	e7dd      	b.n	800312e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x68>
			Status = get_sequence_step_timeout(Dev,
 8003172:	aa01      	add	r2, sp, #4
 8003174:	2104      	movs	r1, #4
 8003176:	4630      	mov	r0, r6
 8003178:	f7ff fd14 	bl	8002ba4 <get_sequence_step_timeout>
				(FinalRangeTimeoutMicroSeconds +
 800317c:	9b01      	ldr	r3, [sp, #4]
 800317e:	f203 2226 	addw	r2, r3, #550	; 0x226
			*pMeasurementTimingBudgetMicroSeconds +=
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	4413      	add	r3, r2
 8003186:	6023      	str	r3, [r4, #0]
	if (Status == VL53L0X_ERROR_NONE) {
 8003188:	2800      	cmp	r0, #0
 800318a:	d0e3      	beq.n	8003154 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x8e>
 800318c:	4605      	mov	r5, r0
 800318e:	e7e3      	b.n	8003158 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x92>

08003190 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8003190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8003192:	2200      	movs	r2, #0
{
 8003194:	4606      	mov	r6, r0
 8003196:	460d      	mov	r5, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003198:	4610      	mov	r0, r2
 800319a:	af01      	add	r7, sp, #4

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800319c:	5cab      	ldrb	r3, [r5, r2]
 800319e:	eb05 0e02 	add.w	lr, r5, r2
 80031a2:	b103      	cbz	r3, 80031a6 <VL53L0X_load_tuning_settings+0x16>
 80031a4:	b108      	cbz	r0, 80031aa <VL53L0X_load_tuning_settings+0x1a>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80031a6:	b003      	add	sp, #12
 80031a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NumberOfWrites == 0xFF) {
 80031aa:	2bff      	cmp	r3, #255	; 0xff
		Index++;
 80031ac:	f102 0401 	add.w	r4, r2, #1
		if (NumberOfWrites == 0xFF) {
 80031b0:	d12c      	bne.n	800320c <VL53L0X_load_tuning_settings+0x7c>
			SelectParam = *(pTuningSettingBuffer + Index);
 80031b2:	5d2b      	ldrb	r3, [r5, r4]
			Index++;
 80031b4:	1c94      	adds	r4, r2, #2
			switch (SelectParam) {
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d83a      	bhi.n	8003230 <VL53L0X_load_tuning_settings+0xa0>
 80031ba:	e8df f003 	tbb	[pc, r3]
 80031be:	0c02      	.short	0x0c02
 80031c0:	1e15      	.short	0x1e15
				msb = *(pTuningSettingBuffer + Index);
 80031c2:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80031c4:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80031c8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				Index++;
 80031cc:	1d14      	adds	r4, r2, #4
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80031ce:	f8a6 3134 	strh.w	r3, [r6, #308]	; 0x134
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80031d2:	4622      	mov	r2, r4
 80031d4:	e7e2      	b.n	800319c <VL53L0X_load_tuning_settings+0xc>
				msb = *(pTuningSettingBuffer + Index);
 80031d6:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80031d8:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80031dc:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				Index++;
 80031e0:	1d14      	adds	r4, r2, #4
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 80031e2:	f8a6 3136 	strh.w	r3, [r6, #310]	; 0x136
				break;
 80031e6:	e7f4      	b.n	80031d2 <VL53L0X_load_tuning_settings+0x42>
				msb = *(pTuningSettingBuffer + Index);
 80031e8:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80031ea:	f89e 3003 	ldrb.w	r3, [lr, #3]
 80031ee:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				Index++;
 80031f2:	1d14      	adds	r4, r2, #4
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 80031f4:	f8a6 3138 	strh.w	r3, [r6, #312]	; 0x138
				break;
 80031f8:	e7eb      	b.n	80031d2 <VL53L0X_load_tuning_settings+0x42>
				msb = *(pTuningSettingBuffer + Index);
 80031fa:	5d29      	ldrb	r1, [r5, r4]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80031fc:	f89e 3003 	ldrb.w	r3, [lr, #3]
 8003200:	eb03 2301 	add.w	r3, r3, r1, lsl #8
				Index++;
 8003204:	1d14      	adds	r4, r2, #4
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8003206:	f8a6 313a 	strh.w	r3, [r6, #314]	; 0x13a
				break;
 800320a:	e7e2      	b.n	80031d2 <VL53L0X_load_tuning_settings+0x42>
		} else if (NumberOfWrites <= 4) {
 800320c:	2b04      	cmp	r3, #4
 800320e:	d80f      	bhi.n	8003230 <VL53L0X_load_tuning_settings+0xa0>
			Address = *(pTuningSettingBuffer + Index);
 8003210:	5d29      	ldrb	r1, [r5, r4]
			Index++;
 8003212:	3202      	adds	r2, #2
			for (i = 0; i < NumberOfWrites; i++) {
 8003214:	4298      	cmp	r0, r3
 8003216:	db05      	blt.n	8003224 <VL53L0X_load_tuning_settings+0x94>
 8003218:	18d4      	adds	r4, r2, r3
			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800321a:	4630      	mov	r0, r6
 800321c:	463a      	mov	r2, r7
 800321e:	f000 fb15 	bl	800384c <VL53L0X_WriteMulti>
 8003222:	e7d6      	b.n	80031d2 <VL53L0X_load_tuning_settings+0x42>
				localBuffer[i] = *(pTuningSettingBuffer +
 8003224:	eb0e 0400 	add.w	r4, lr, r0
 8003228:	78a4      	ldrb	r4, [r4, #2]
 800322a:	543c      	strb	r4, [r7, r0]
			for (i = 0; i < NumberOfWrites; i++) {
 800322c:	3001      	adds	r0, #1
 800322e:	e7f1      	b.n	8003214 <VL53L0X_load_tuning_settings+0x84>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003230:	f06f 0003 	mvn.w	r0, #3
 8003234:	e7cd      	b.n	80031d2 <VL53L0X_load_tuning_settings+0x42>

08003236 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8003236:	b573      	push	{r0, r1, r4, r5, r6, lr}

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8003238:	2300      	movs	r3, #0
{
 800323a:	460e      	mov	r6, r1
	*ptotal_xtalk_rate_mcps = 0;
 800323c:	6013      	str	r3, [r2, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800323e:	f10d 0107 	add.w	r1, sp, #7
{
 8003242:	4605      	mov	r5, r0
 8003244:	4614      	mov	r4, r2
	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8003246:	f7fe f906 	bl	8001456 <VL53L0X_GetXTalkCompensationEnable>
	if (Status == VL53L0X_ERROR_NONE) {
 800324a:	b940      	cbnz	r0, 800325e <VL53L0X_get_total_xtalk_rate+0x28>

		if (xtalkCompEnable) {
 800324c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003250:	b12b      	cbz	r3, 800325e <VL53L0X_get_total_xtalk_rate+0x28>
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8003252:	8ab2      	ldrh	r2, [r6, #20]
			totalXtalkMegaCps =
 8003254:	6a2b      	ldr	r3, [r5, #32]
 8003256:	4353      	muls	r3, r2
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8003258:	3380      	adds	r3, #128	; 0x80
 800325a:	0a1b      	lsrs	r3, r3, #8
			*ptotal_xtalk_rate_mcps =
 800325c:	6023      	str	r3, [r4, #0]
		}
	}

	return Status;
}
 800325e:	b002      	add	sp, #8
 8003260:	bd70      	pop	{r4, r5, r6, pc}

08003262 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8003262:	b513      	push	{r0, r1, r4, lr}
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8003264:	68cb      	ldr	r3, [r1, #12]
	*ptotal_signal_rate_mcps =
 8003266:	6013      	str	r3, [r2, #0]
{
 8003268:	4614      	mov	r4, r2

	Status = VL53L0X_get_total_xtalk_rate(
 800326a:	aa01      	add	r2, sp, #4
 800326c:	f7ff ffe3 	bl	8003236 <VL53L0X_get_total_xtalk_rate>
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8003270:	b918      	cbnz	r0, 800327a <VL53L0X_get_total_signal_rate+0x18>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	9a01      	ldr	r2, [sp, #4]
 8003276:	4413      	add	r3, r2
 8003278:	6023      	str	r3, [r4, #0]

	return Status;
}
 800327a:	b002      	add	sp, #8
 800327c:	bd10      	pop	{r4, pc}
	...

08003280 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8003280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
 8003282:	f8b0 4150 	ldrh.w	r4, [r0, #336]	; 0x150

	dmaxCalSignalRateRtn_mcps =
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8003286:	f8d0 5154 	ldr.w	r5, [r0, #340]	; 0x154
{
 800328a:	9e07      	ldr	r6, [sp, #28]
 800328c:	9f08      	ldr	r7, [sp, #32]
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800328e:	4365      	muls	r5, r4

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8003290:	3580      	adds	r5, #128	; 0x80
 8003292:	0a2d      	lsrs	r5, r5, #8
	SignalAt0mm *= dmaxCalRange_mm;
 8003294:	4365      	muls	r5, r4

	minSignalNeeded_p1 = 0;
	if (totalCorrSignalRate_mcps > 0) {
 8003296:	b152      	cbz	r2, 80032ae <VL53L0X_calc_dmax+0x2e>
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8003298:	0854      	lsrs	r4, r2, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800329a:	eb04 2481 	add.w	r4, r4, r1, lsl #10

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800329e:	fbb4 f4f2 	udiv	r4, r4, r2

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 80032a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 80032a6:	4364      	muls	r4, r4

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 80032a8:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
 80032ac:	0c22      	lsrs	r2, r4, #16
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 80032ae:	9c06      	ldr	r4, [sp, #24]
 80032b0:	435c      	muls	r4, r3
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80032b2:	f506 4100 	add.w	r1, r6, #32768	; 0x8000
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80032b6:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
 80032ba:	0c24      	lsrs	r4, r4, #16
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80032bc:	0c09      	lsrs	r1, r1, #16
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 80032be:	fb04 f304 	mul.w	r3, r4, r4
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80032c2:	3103      	adds	r1, #3
 80032c4:	2406      	movs	r4, #6
 80032c6:	fbb1 f1f4 	udiv	r1, r1, r4
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80032ca:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3

	if (sigmaEstP2Tmp > 0xffff) {
 80032ce:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80032d2:	bf3f      	itttt	cc
 80032d4:	3603      	addcc	r6, #3
 80032d6:	fbb6 f6f4 	udivcc	r6, r6, r4
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80032da:	ebc6 06c6 	rsbcc	r6, r6, r6, lsl #3

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80032de:	f506 4100 	addcc.w	r1, r6, #32768	; 0x8000
 80032e2:	bf36      	itet	cc
 80032e4:	0c0c      	lsrcc	r4, r1, #16
		minSignalNeeded_p3 = 0xfff00000;
 80032e6:	4918      	ldrcs	r1, [pc, #96]	; (8003348 <VL53L0X_calc_dmax+0xc8>)

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80032e8:	fb04 f104 	mulcc.w	r1, r4, r4
	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80032ec:	f105 0020 	add.w	r0, r5, #32
	minSignalNeeded += (peakVcselDuration_us/2);
 80032f0:	eb03 0457 	add.w	r4, r3, r7, lsr #1
 80032f4:	440c      	add	r4, r1
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80032f6:	0980      	lsrs	r0, r0, #6
	minSignalNeeded /= peakVcselDuration_us;
 80032f8:	fbb4 f4f7 	udiv	r4, r4, r7
	minSignalNeeded <<= 14;
 80032fc:	03a4      	lsls	r4, r4, #14
	minSignalNeeded /= minSignalNeeded_p4;
 80032fe:	23fe      	movs	r3, #254	; 0xfe
	minSignalNeeded += (minSignalNeeded_p4/2);
 8003300:	347f      	adds	r4, #127	; 0x7f
	minSignalNeeded /= minSignalNeeded_p4;
 8003302:	fbb4 f4f3 	udiv	r4, r4, r3
	minSignalNeeded *= minSignalNeeded_p1;
 8003306:	4354      	muls	r4, r2
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8003308:	f7ff f92e 	bl	8002568 <VL53L0X_isqrt>
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800330c:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8003310:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
 8003314:	fbb4 f4f6 	udiv	r4, r4, r6
	minSignalNeeded <<= 4;
 8003318:	0124      	lsls	r4, r4, #4
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800331a:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800331e:	4607      	mov	r7, r0
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8003320:	fbb4 f6f6 	udiv	r6, r4, r6

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8003324:	b136      	cbz	r6, 8003334 <VL53L0X_calc_dmax+0xb4>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8003326:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800332a:	fbb4 f4f3 	udiv	r4, r4, r3
 800332e:	442c      	add	r4, r5
 8003330:	fbb4 f6f6 	udiv	r6, r4, r6
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8003334:	4630      	mov	r0, r6
 8003336:	f7ff f917 	bl	8002568 <VL53L0X_isqrt>
 800333a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800333c:	4287      	cmp	r7, r0
 800333e:	bf94      	ite	ls
 8003340:	601f      	strls	r7, [r3, #0]
 8003342:	6018      	strhi	r0, [r3, #0]
		*pdmax_mm = dmaxAmbient;

	LOG_FUNCTION_END(Status);

	return Status;
}
 8003344:	2000      	movs	r0, #0
 8003346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003348:	fff00000 	.word	0xfff00000

0800334c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800334c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003350:	b08d      	sub	sp, #52	; 0x34
 8003352:	4606      	mov	r6, r0
 8003354:	9305      	str	r3, [sp, #20]
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8003356:	6a03      	ldr	r3, [r0, #32]
 8003358:	930a      	str	r3, [sp, #40]	; 0x28
{
 800335a:	4689      	mov	r9, r1
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;

	correctedSignalRate_mcps =
 800335c:	68cb      	ldr	r3, [r1, #12]
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800335e:	690f      	ldr	r7, [r1, #16]
	correctedSignalRate_mcps =
 8003360:	9306      	str	r3, [sp, #24]
{
 8003362:	4692      	mov	sl, r2
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8003364:	aa0b      	add	r2, sp, #44	; 0x2c
 8003366:	f7ff ff7c 	bl	8003262 <VL53L0X_get_total_signal_rate>
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800336a:	aa0a      	add	r2, sp, #40	; 0x28
 800336c:	4649      	mov	r1, r9
 800336e:	4630      	mov	r0, r6
 8003370:	f7ff ff61 	bl	8003236 <VL53L0X_get_total_xtalk_rate>
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {
 8003374:	4605      	mov	r5, r0
 8003376:	bb60      	cbnz	r0, 80033d2 <VL53L0X_calc_sigma_estimate+0x86>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8003378:	f896 40e0 	ldrb.w	r4, [r6, #224]	; 0xe0
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800337c:	f8d6 10dc 	ldr.w	r1, [r6, #220]	; 0xdc
 8003380:	4622      	mov	r2, r4
 8003382:	4630      	mov	r0, r6
 8003384:	f7ff fbe6 	bl	8002b54 <VL53L0X_calc_timeout_mclks>
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8003388:	f8d6 10e4 	ldr.w	r1, [r6, #228]	; 0xe4
 800338c:	f896 20e8 	ldrb.w	r2, [r6, #232]	; 0xe8
		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8003390:	4683      	mov	fp, r0
		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8003392:	4630      	mov	r0, r6
 8003394:	f7ff fbde 	bl	8002b54 <VL53L0X_calc_timeout_mclks>
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8003398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800339a:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
		if (finalRangeVcselPCLKS == 8)
 800339e:	2c08      	cmp	r4, #8
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80033a0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80033a4:	fb04 f803 	mul.w	r8, r4, r3
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80033a8:	f508 4800 	add.w	r8, r8, #32768	; 0x8000
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80033ac:	f103 0380 	add.w	r3, r3, #128	; 0x80

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80033b0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
			vcselWidth = 2;
 80033b4:	bf14      	ite	ne
 80033b6:	2103      	movne	r1, #3
 80033b8:	2102      	moveq	r1, #2
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (peakSignalRate_kcps == 0) {
 80033ba:	ea5f 4e18 	movs.w	lr, r8, lsr #16
		totalSignalRate_mcps <<= 8;
 80033be:	9204      	str	r2, [sp, #16]
 80033c0:	920b      	str	r2, [sp, #44]	; 0x2c
 80033c2:	4a54      	ldr	r2, [pc, #336]	; (8003514 <VL53L0X_calc_sigma_estimate+0x1c8>)
	if (peakSignalRate_kcps == 0) {
 80033c4:	d109      	bne.n	80033da <VL53L0X_calc_sigma_estimate+0x8e>
		*pSigmaEstimate = cSigmaEstMax;
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
		*pDmax_mm = 0;
 80033c6:	9b05      	ldr	r3, [sp, #20]
		*pSigmaEstimate = cSigmaEstMax;
 80033c8:	f8ca 2000 	str.w	r2, [sl]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80033cc:	f8c6 213c 	str.w	r2, [r6, #316]	; 0x13c
		*pDmax_mm = 0;
 80033d0:	601d      	str	r5, [r3, #0]
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 80033d2:	4628      	mov	r0, r5
 80033d4:	b00d      	add	sp, #52	; 0x34
 80033d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80033da:	4458      	add	r0, fp
		peakVcselDuration_us = vcselWidth * 2048 *
 80033dc:	02c0      	lsls	r0, r0, #11
 80033de:	4341      	muls	r1, r0
		peakVcselDuration_us *= cPllPeriod_ps;
 80033e0:	f240 6b77 	movw	fp, #1655	; 0x677
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80033e4:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80033e8:	0a1b      	lsrs	r3, r3, #8
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80033ea:	fbb1 f1f4 	udiv	r1, r1, r4
		peakVcselDuration_us *= cPllPeriod_ps;
 80033ee:	fb0b fb01 	mul.w	fp, fp, r1
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80033f2:	f50b 7bfa 	add.w	fp, fp, #500	; 0x1f4
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80033f6:	4948      	ldr	r1, [pc, #288]	; (8003518 <VL53L0X_calc_sigma_estimate+0x1cc>)
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80033f8:	fbbb fbf4 	udiv	fp, fp, r4
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80033fc:	fb0b f303 	mul.w	r3, fp, r3
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8003400:	3380      	adds	r3, #128	; 0x80
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8003402:	4367      	muls	r7, r4
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8003404:	fb04 f50c 	mul.w	r5, r4, ip
		if (vcselTotalEventsRtn < 1)
 8003408:	0a1b      	lsrs	r3, r3, #8
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800340a:	ea07 0701 	and.w	r7, r7, r1
 800340e:	fbb7 fefe 	udiv	lr, r7, lr
 8003412:	4f42      	ldr	r7, [pc, #264]	; (800351c <VL53L0X_calc_sigma_estimate+0x1d0>)
 8003414:	9209      	str	r2, [sp, #36]	; 0x24
			vcselTotalEventsRtn = 1;
 8003416:	bf08      	it	eq
 8003418:	2301      	moveq	r3, #1
 800341a:	f5b5 1f48 	cmp.w	r5, #3276800	; 0x320000
 800341e:	bf28      	it	cs
 8003420:	f44f 1548 	movcs.w	r5, #3276800	; 0x320000
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8003424:	200c      	movs	r0, #12
 8003426:	45be      	cmp	lr, r7
 8003428:	bf28      	it	cs
 800342a:	46be      	movcs	lr, r7
 800342c:	4358      	muls	r0, r3
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800342e:	f44f 7716 	mov.w	r7, #600	; 0x258
 8003432:	fb07 f70e 	mul.w	r7, r7, lr
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8003436:	9108      	str	r1, [sp, #32]
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8003438:	f7ff f896 	bl	8002568 <VL53L0X_isqrt>
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800343c:	9908      	ldr	r1, [sp, #32]
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800343e:	9007      	str	r0, [sp, #28]
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8003440:	ea08 0801 	and.w	r8, r8, r1
 8003444:	eba8 0005 	sub.w	r0, r8, r5
			xTalkCompRate_kcps) + 500)/1000;
 8003448:	f505 75fa 	add.w	r5, r5, #500	; 0x1f4
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800344c:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 8003450:	4b33      	ldr	r3, [pc, #204]	; (8003520 <VL53L0X_calc_sigma_estimate+0x1d4>)
			xTalkCompRate_kcps) + 500)/1000;
 8003452:	44a8      	add	r8, r5
			xTalkCompRate_kcps) + 500)/1000;
 8003454:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 8003458:	fbb8 f8f4 	udiv	r8, r8, r4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800345c:	fbb0 f0f4 	udiv	r0, r0, r4
		diff1_mcps <<= 8;
 8003460:	0200      	lsls	r0, r0, #8
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8003462:	fbb0 f0f8 	udiv	r0, r0, r8
		xTalkCorrection <<= 8;
 8003466:	0205      	lsls	r5, r0, #8
		pwMult *= ((1 << 16) - xTalkCorrection);
 8003468:	f5c5 3580 	rsb	r5, r5, #65536	; 0x10000
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800346c:	4359      	muls	r1, r3
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800346e:	f241 235c 	movw	r3, #4700	; 0x125c
 8003472:	fbb1 f3f3 	udiv	r3, r1, r3
		pwMult *= ((1 << 16) - xTalkCorrection);
 8003476:	435d      	muls	r5, r3
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8003478:	f505 4500 	add.w	r5, r5, #32768	; 0x8000
 800347c:	0c2d      	lsrs	r5, r5, #16
		pwMult += (1 << 16);
 800347e:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
		pwMult >>= 1;
 8003482:	086d      	lsrs	r5, r5, #1
		pwMult = pwMult * pwMult;
 8003484:	436d      	muls	r5, r5
		pwMult >>= 14;
 8003486:	0bad      	lsrs	r5, r5, #14
		sqr1 = pwMult * sigmaEstimateP1;
 8003488:	f44f 7848 	mov.w	r8, #800	; 0x320
 800348c:	fb08 f005 	mul.w	r0, r8, r5
		sqr2 = (sqr2 + 0x8000) >> 16;
 8003490:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
		sqr1 = (sqr1 + 0x8000) >> 16;
 8003494:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
		sqr2 = (sqr2 + 0x8000) >> 16;
 8003498:	0c1b      	lsrs	r3, r3, #16
		sqr2 *= sqr2;
 800349a:	435b      	muls	r3, r3
		sqr1 = (sqr1 + 0x8000) >> 16;
 800349c:	0c00      	lsrs	r0, r0, #16
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800349e:	fb00 3000 	mla	r0, r0, r0, r3
 80034a2:	f7ff f861 	bl	8002568 <VL53L0X_isqrt>
		sqrtResult_centi_ns <<= 16;
 80034a6:	0400      	lsls	r0, r0, #16
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80034a8:	2364      	movs	r3, #100	; 0x64
 80034aa:	3032      	adds	r0, #50	; 0x32
 80034ac:	fbb0 f0f3 	udiv	r0, r0, r3
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80034b0:	9b07      	ldr	r3, [sp, #28]
		sigmaEstRtn		 += 5000;
 80034b2:	f640 31b5 	movw	r1, #2997	; 0xbb5
		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80034b6:	005b      	lsls	r3, r3, #1
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 80034b8:	fbb0 f0f3 	udiv	r0, r0, r3
		sigmaEstRtn		 += 5000;
 80034bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80034c0:	fb01 3000 	mla	r0, r1, r0, r3
		sigmaEstRtn		 /= 10000;
 80034c4:	f242 7310 	movw	r3, #10000	; 0x2710
 80034c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80034cc:	f5b0 4f70 	cmp.w	r0, #61440	; 0xf000
 80034d0:	bf28      	it	cs
 80034d2:	f44f 4070 	movcs.w	r0, #61440	; 0xf000
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 80034d6:	f241 1304 	movw	r3, #4356	; 0x1104
 80034da:	fb00 3000 	mla	r0, r0, r0, r3
 80034de:	f7ff f843 	bl	8002568 <VL53L0X_isqrt>
 80034e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
		Status = VL53L0X_calc_dmax(
 80034e4:	9b05      	ldr	r3, [sp, #20]
 80034e6:	9303      	str	r3, [sp, #12]
		sigmaEstimate	 = 1000 * sqrtResult;
 80034e8:	4360      	muls	r0, r4
 80034ea:	4282      	cmp	r2, r0
 80034ec:	bf28      	it	cs
 80034ee:	4602      	movcs	r2, r0
		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80034f0:	f8ca 2000 	str.w	r2, [sl]
		Status = VL53L0X_calc_dmax(
 80034f4:	462b      	mov	r3, r5
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 80034f6:	f8c6 213c 	str.w	r2, [r6, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 80034fa:	f8cd b008 	str.w	fp, [sp, #8]
 80034fe:	9701      	str	r7, [sp, #4]
 8003500:	f8cd 8000 	str.w	r8, [sp]
 8003504:	9a06      	ldr	r2, [sp, #24]
 8003506:	9904      	ldr	r1, [sp, #16]
 8003508:	4630      	mov	r0, r6
 800350a:	f7ff feb9 	bl	8003280 <VL53L0X_calc_dmax>
 800350e:	4605      	mov	r5, r0
 8003510:	e75f      	b.n	80033d2 <VL53L0X_calc_sigma_estimate+0x86>
 8003512:	bf00      	nop
 8003514:	028f87ae 	.word	0x028f87ae
 8003518:	ffff0000 	.word	0xffff0000
 800351c:	00666666 	.word	0x00666666
 8003520:	0006999a 	.word	0x0006999a

08003524 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8003524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003528:	b08b      	sub	sp, #44	; 0x2c
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800352a:	ea4f 09d1 	mov.w	r9, r1, lsr #3
{
 800352e:	469b      	mov	fp, r3
	uint8_t SigmaLimitCheckEnable = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	f88d 300e 	strb.w	r3, [sp, #14]
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8003536:	f88d 300f 	strb.w	r3, [sp, #15]
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800353a:	f88d 3010 	strb.w	r3, [sp, #16]
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800353e:	f88d 3011 	strb.w	r3, [sp, #17]
	uint16_t tmpWord = 0;
 8003542:	f8ad 3012 	strh.w	r3, [sp, #18]
	uint32_t Dmax_mm = 0;
 8003546:	9309      	str	r3, [sp, #36]	; 0x24
	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8003548:	f009 070f 	and.w	r7, r9, #15

	if (DeviceRangeStatusInternal == 0 ||
 800354c:	f24f 03a1 	movw	r3, #61601	; 0xf0a1
 8003550:	40fb      	lsrs	r3, r7
{
 8003552:	9201      	str	r2, [sp, #4]
		DeviceRangeStatusInternal == 12 ||
		DeviceRangeStatusInternal == 13 ||
		DeviceRangeStatusInternal == 14 ||
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8003554:	f003 0301 	and.w	r3, r3, #1
		NoneFlag = 0;
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003558:	2201      	movs	r2, #1
 800355a:	21ff      	movs	r1, #255	; 0xff
{
 800355c:	4605      	mov	r5, r0
 800355e:	9e15      	ldr	r6, [sp, #84]	; 0x54
		NoneFlag = 1;
 8003560:	9300      	str	r3, [sp, #0]
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003562:	f000 f9ed 	bl	8003940 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
 8003566:	b928      	cbnz	r0, 8003574 <VL53L0X_get_pal_range_status+0x50>
		Status = VL53L0X_RdWord(Dev,
 8003568:	f10d 0212 	add.w	r2, sp, #18
 800356c:	21b6      	movs	r1, #182	; 0xb6
 800356e:	4628      	mov	r0, r5
 8003570:	f000 f9a0 	bl	80038b4 <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8003574:	f8bd a012 	ldrh.w	sl, [sp, #18]
 8003578:	ea4f 2a4a 	mov.w	sl, sl, lsl #9

	if (Status == VL53L0X_ERROR_NONE)
 800357c:	b920      	cbnz	r0, 8003588 <VL53L0X_get_pal_range_status+0x64>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800357e:	4602      	mov	r2, r0
 8003580:	21ff      	movs	r1, #255	; 0xff
 8003582:	4628      	mov	r0, r5
 8003584:	f000 f9dc 	bl	8003940 <VL53L0X_WrByte>

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8003588:	f8c5 a144 	str.w	sl, [r5, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800358c:	b928      	cbnz	r0, 800359a <VL53L0X_get_pal_range_status+0x76>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800358e:	4601      	mov	r1, r0
 8003590:	f10d 020e 	add.w	r2, sp, #14
 8003594:	4628      	mov	r0, r5
 8003596:	f7fd ffb8 	bl	800150a <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800359a:	f89d 400e 	ldrb.w	r4, [sp, #14]
 800359e:	b1d4      	cbz	r4, 80035d6 <VL53L0X_get_pal_range_status+0xb2>
 80035a0:	2800      	cmp	r0, #0
 80035a2:	f040 8091 	bne.w	80036c8 <VL53L0X_get_pal_range_status+0x1a4>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 80035a6:	ab09      	add	r3, sp, #36	; 0x24
 80035a8:	aa05      	add	r2, sp, #20
 80035aa:	9914      	ldr	r1, [sp, #80]	; 0x50
 80035ac:	4628      	mov	r0, r5
 80035ae:	f7ff fecd 	bl	800334c <VL53L0X_calc_sigma_estimate>
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 80035b2:	2800      	cmp	r0, #0
 80035b4:	f040 8088 	bne.w	80036c8 <VL53L0X_get_pal_range_status+0x1a4>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80035b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80035ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035bc:	8153      	strh	r3, [r2, #10]

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80035be:	4601      	mov	r1, r0
 80035c0:	aa06      	add	r2, sp, #24
 80035c2:	4628      	mov	r0, r5
 80035c4:	f7fd ffdc 	bl	8001580 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80035c8:	9c06      	ldr	r4, [sp, #24]
 80035ca:	b124      	cbz	r4, 80035d6 <VL53L0X_get_pal_range_status+0xb2>
	uint8_t SigmaLimitflag = 0;
 80035cc:	9b05      	ldr	r3, [sp, #20]
 80035ce:	429c      	cmp	r4, r3
 80035d0:	bf2c      	ite	cs
 80035d2:	2400      	movcs	r4, #0
 80035d4:	2401      	movcc	r4, #1

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80035d6:	b920      	cbnz	r0, 80035e2 <VL53L0X_get_pal_range_status+0xbe>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80035d8:	aa04      	add	r2, sp, #16
 80035da:	2102      	movs	r1, #2
 80035dc:	4628      	mov	r0, r5
 80035de:	f7fd ff94 	bl	800150a <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 80035e2:	f89d 8010 	ldrb.w	r8, [sp, #16]
 80035e6:	f1b8 0f00 	cmp.w	r8, #0
 80035ea:	d00f      	beq.n	800360c <VL53L0X_get_pal_range_status+0xe8>
 80035ec:	2800      	cmp	r0, #0
 80035ee:	d16f      	bne.n	80036d0 <VL53L0X_get_pal_range_status+0x1ac>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80035f0:	aa07      	add	r2, sp, #28
 80035f2:	2102      	movs	r1, #2
 80035f4:	4628      	mov	r0, r5
 80035f6:	f7fd ffc3 	bl	8001580 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 80035fa:	9b07      	ldr	r3, [sp, #28]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d065      	beq.n	80036cc <VL53L0X_get_pal_range_status+0x1a8>
	uint8_t SignalRefClipflag = 0;
 8003600:	459a      	cmp	sl, r3
 8003602:	bf94      	ite	ls
 8003604:	f04f 0800 	movls.w	r8, #0
 8003608:	f04f 0801 	movhi.w	r8, #1
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800360c:	b928      	cbnz	r0, 800361a <VL53L0X_get_pal_range_status+0xf6>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800360e:	f10d 0211 	add.w	r2, sp, #17
 8003612:	2103      	movs	r1, #3
 8003614:	4628      	mov	r0, r5
 8003616:	f7fd ff78 	bl	800150a <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800361a:	f89d a011 	ldrb.w	sl, [sp, #17]
 800361e:	f1ba 0f00 	cmp.w	sl, #0
 8003622:	d016      	beq.n	8003652 <VL53L0X_get_pal_range_status+0x12e>
 8003624:	2800      	cmp	r0, #0
 8003626:	d17c      	bne.n	8003722 <VL53L0X_get_pal_range_status+0x1fe>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8003628:	f1bb 0f00 	cmp.w	fp, #0
 800362c:	d003      	beq.n	8003636 <VL53L0X_get_pal_range_status+0x112>
			SignalRatePerSpad = 0;
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800362e:	9b01      	ldr	r3, [sp, #4]
 8003630:	021b      	lsls	r3, r3, #8
 8003632:	fbb3 fbfb 	udiv	fp, r3, fp
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8003636:	aa08      	add	r2, sp, #32
 8003638:	2103      	movs	r1, #3
 800363a:	4628      	mov	r0, r5
 800363c:	f7fd ffa0 	bl	8001580 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8003640:	9a08      	ldr	r2, [sp, #32]
 8003642:	2a00      	cmp	r2, #0
 8003644:	d047      	beq.n	80036d6 <VL53L0X_get_pal_range_status+0x1b2>
	uint8_t RangeIgnoreThresholdflag = 0;
 8003646:	4593      	cmp	fp, r2
 8003648:	bf2c      	ite	cs
 800364a:	f04f 0a00 	movcs.w	sl, #0
 800364e:	f04f 0a01 	movcc.w	sl, #1
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003652:	b920      	cbnz	r0, 800365e <VL53L0X_get_pal_range_status+0x13a>
		if (NoneFlag == 1) {
 8003654:	9b00      	ldr	r3, [sp, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d03f      	beq.n	80036da <VL53L0X_get_pal_range_status+0x1b6>
			*pPalRangeStatus = 255;	 /* NONE */
 800365a:	22ff      	movs	r2, #255	; 0xff
			*pPalRangeStatus = 3;  /* Min range */
		} else if (DeviceRangeStatusInternal == 4 ||
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
		} else if (SigmaLimitflag == 1) {
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800365c:	7032      	strb	r2, [r6, #0]
			*pPalRangeStatus = 0; /* Range Valid */
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800365e:	7832      	ldrb	r2, [r6, #0]
 8003660:	b90a      	cbnz	r2, 8003666 <VL53L0X_get_pal_range_status+0x142>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8003662:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003664:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8003666:	f10d 020f 	add.w	r2, sp, #15
 800366a:	2101      	movs	r1, #1
 800366c:	4628      	mov	r0, r5
 800366e:	f7fd ff4c 	bl	800150a <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8003672:	bb30      	cbnz	r0, 80036c2 <VL53L0X_get_pal_range_status+0x19e>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8003674:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8003678:	2a00      	cmp	r2, #0
 800367a:	bf08      	it	eq
 800367c:	2401      	moveq	r4, #1
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800367e:	2f04      	cmp	r7, #4
 8003680:	bf1d      	ittte	ne
 8003682:	f89d 200f 	ldrbne.w	r2, [sp, #15]
 8003686:	fab2 f282 	clzne	r2, r2
 800368a:	0952      	lsrne	r2, r2, #5
 800368c:	2201      	moveq	r2, #1
				(SignalRateFinalRangeLimitCheckEnable == 0))
			Temp8 = 1;
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800368e:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8003692:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8003696:	2a00      	cmp	r2, #0
 8003698:	bf08      	it	eq
 800369a:	f04f 0801 	moveq.w	r8, #1
					(SignalRefClipflag == 1))
			Temp8 = 1;
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800369e:	f008 0301 	and.w	r3, r8, #1
 80036a2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 80036a6:	f89d 3011 	ldrb.w	r3, [sp, #17]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bf08      	it	eq
 80036ae:	f04f 0a01 	moveq.w	sl, #1
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80036b2:	f004 0401 	and.w	r4, r4, #1
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80036b6:	f00a 0a01 	and.w	sl, sl, #1
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80036ba:	f885 402e 	strb.w	r4, [r5, #46]	; 0x2e
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80036be:	f885 a031 	strb.w	sl, [r5, #49]	; 0x31
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
 80036c2:	b00b      	add	sp, #44	; 0x2c
 80036c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036c8:	2400      	movs	r4, #0
 80036ca:	e78a      	b.n	80035e2 <VL53L0X_get_pal_range_status+0xbe>
	uint8_t SignalRefClipflag = 0;
 80036cc:	4698      	mov	r8, r3
 80036ce:	e79d      	b.n	800360c <VL53L0X_get_pal_range_status+0xe8>
 80036d0:	f04f 0800 	mov.w	r8, #0
 80036d4:	e7a1      	b.n	800361a <VL53L0X_get_pal_range_status+0xf6>
	uint8_t RangeIgnoreThresholdflag = 0;
 80036d6:	4692      	mov	sl, r2
 80036d8:	e7bb      	b.n	8003652 <VL53L0X_get_pal_range_status+0x12e>
		} else if (DeviceRangeStatusInternal == 1 ||
 80036da:	1e7a      	subs	r2, r7, #1
 80036dc:	2a02      	cmp	r2, #2
 80036de:	d801      	bhi.n	80036e4 <VL53L0X_get_pal_range_status+0x1c0>
			*pPalRangeStatus = 5; /* HW fail */
 80036e0:	2205      	movs	r2, #5
 80036e2:	e7bb      	b.n	800365c <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 6 ||
 80036e4:	2f06      	cmp	r7, #6
 80036e6:	d001      	beq.n	80036ec <VL53L0X_get_pal_range_status+0x1c8>
 80036e8:	2f09      	cmp	r7, #9
 80036ea:	d101      	bne.n	80036f0 <VL53L0X_get_pal_range_status+0x1cc>
			*pPalRangeStatus = 4;  /* Phase fail */
 80036ec:	2204      	movs	r2, #4
 80036ee:	e7b5      	b.n	800365c <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 8 ||
 80036f0:	f009 090d 	and.w	r9, r9, #13
 80036f4:	f1b9 0f08 	cmp.w	r9, #8
 80036f8:	d002      	beq.n	8003700 <VL53L0X_get_pal_range_status+0x1dc>
					DeviceRangeStatusInternal == 10 ||
 80036fa:	f1b8 0f01 	cmp.w	r8, #1
 80036fe:	d101      	bne.n	8003704 <VL53L0X_get_pal_range_status+0x1e0>
			*pPalRangeStatus = 3;  /* Min range */
 8003700:	2203      	movs	r2, #3
 8003702:	e7ab      	b.n	800365c <VL53L0X_get_pal_range_status+0x138>
		} else if (DeviceRangeStatusInternal == 4 ||
 8003704:	2f04      	cmp	r7, #4
 8003706:	d002      	beq.n	800370e <VL53L0X_get_pal_range_status+0x1ea>
 8003708:	f1ba 0f01 	cmp.w	sl, #1
 800370c:	d101      	bne.n	8003712 <VL53L0X_get_pal_range_status+0x1ee>
			*pPalRangeStatus = 2;  /* Signal Fail */
 800370e:	2202      	movs	r2, #2
 8003710:	e7a4      	b.n	800365c <VL53L0X_get_pal_range_status+0x138>
		} else if (SigmaLimitflag == 1) {
 8003712:	2c01      	cmp	r4, #1
 8003714:	d101      	bne.n	800371a <VL53L0X_get_pal_range_status+0x1f6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8003716:	2201      	movs	r2, #1
 8003718:	e7a0      	b.n	800365c <VL53L0X_get_pal_range_status+0x138>
			*pPalRangeStatus = 0; /* Range Valid */
 800371a:	2200      	movs	r2, #0
 800371c:	7032      	strb	r2, [r6, #0]
 800371e:	46a2      	mov	sl, r4
 8003720:	e79d      	b.n	800365e <VL53L0X_get_pal_range_status+0x13a>
	uint8_t RangeIgnoreThresholdflag = 0;
 8003722:	f04f 0a00 	mov.w	sl, #0
 8003726:	e79a      	b.n	800365e <VL53L0X_get_pal_range_status+0x13a>

08003728 <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8003728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372a:	460f      	mov	r7, r1
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 800372c:	2102      	movs	r1, #2
{
 800372e:	4606      	mov	r6, r0
 8003730:	4614      	mov	r4, r2
	Status = VL53L0X_get_info_from_device(Dev, 2);
 8003732:	f7fe ff4f 	bl	80025d4 <VL53L0X_get_info_from_device>

	if (Status == VL53L0X_ERROR_NONE) {
 8003736:	4605      	mov	r5, r0
 8003738:	b940      	cbnz	r0, 800374c <VL53L0X_check_part_used+0x24>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);

	if (ModuleIdInt == 0) {
 800373a:	f896 30f1 	ldrb.w	r3, [r6, #241]	; 0xf1
 800373e:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8003742:	b92b      	cbnz	r3, 8003750 <VL53L0X_check_part_used+0x28>
		*Revision = 0;
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 8003744:	4905      	ldr	r1, [pc, #20]	; (800375c <VL53L0X_check_part_used+0x34>)
		*Revision = 0;
 8003746:	703d      	strb	r5, [r7, #0]
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 8003748:	f003 f95c 	bl	8006a04 <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
 800374c:	4628      	mov	r0, r5
 800374e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 8003750:	f896 30f2 	ldrb.w	r3, [r6, #242]	; 0xf2
 8003754:	703b      	strb	r3, [r7, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 8003756:	f106 01f3 	add.w	r1, r6, #243	; 0xf3
 800375a:	e7f5      	b.n	8003748 <VL53L0X_check_part_used+0x20>
 800375c:	08008a1e 	.word	0x08008a1e

08003760 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8003760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003762:	460c      	mov	r4, r1
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 8003764:	460a      	mov	r2, r1
 8003766:	f10d 0107 	add.w	r1, sp, #7
{
 800376a:	4605      	mov	r5, r0
	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 800376c:	f7ff ffdc 	bl	8003728 <VL53L0X_check_part_used>

	if (Status == VL53L0X_ERROR_NONE) {
 8003770:	bb00      	cbnz	r0, 80037b4 <VL53L0X_get_device_info+0x54>
		if (Revision == 0) {
 8003772:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003776:	b9fb      	cbnz	r3, 80037b8 <VL53L0X_get_device_info+0x58>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8003778:	4915      	ldr	r1, [pc, #84]	; (80037d0 <VL53L0X_get_device_info+0x70>)
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800377a:	4620      	mov	r0, r4
 800377c:	f003 f942 	bl	8006a04 <strcpy>
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 8003780:	4914      	ldr	r1, [pc, #80]	; (80037d4 <VL53L0X_get_device_info+0x74>)
 8003782:	f104 0020 	add.w	r0, r4, #32
 8003786:	f003 f93d 	bl	8006a04 <strcpy>
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 800378a:	f104 0260 	add.w	r2, r4, #96	; 0x60
 800378e:	21c0      	movs	r1, #192	; 0xc0
 8003790:	4628      	mov	r0, r5
 8003792:	f000 f846 	bl	8003822 <VL53L0X_RdByte>
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003796:	b968      	cbnz	r0, 80037b4 <VL53L0X_get_device_info+0x54>
		Status = VL53L0X_RdByte(Dev,
 8003798:	f10d 0206 	add.w	r2, sp, #6
 800379c:	21c2      	movs	r1, #194	; 0xc2
 800379e:	4628      	mov	r0, r5
 80037a0:	f000 f83f 	bl	8003822 <VL53L0X_RdByte>
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 80037aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80037ae:	091b      	lsrs	r3, r3, #4
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 80037b0:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	}

	return Status;
}
 80037b4:	b003      	add	sp, #12
 80037b6:	bd30      	pop	{r4, r5, pc}
		} else if ((Revision <= 34) && (Revision != 32)) {
 80037b8:	2b22      	cmp	r3, #34	; 0x22
 80037ba:	d803      	bhi.n	80037c4 <VL53L0X_get_device_info+0x64>
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d003      	beq.n	80037c8 <VL53L0X_get_device_info+0x68>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80037c0:	4905      	ldr	r1, [pc, #20]	; (80037d8 <VL53L0X_get_device_info+0x78>)
 80037c2:	e7da      	b.n	800377a <VL53L0X_get_device_info+0x1a>
		} else if (Revision < 39) {
 80037c4:	2b26      	cmp	r3, #38	; 0x26
 80037c6:	d801      	bhi.n	80037cc <VL53L0X_get_device_info+0x6c>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80037c8:	4904      	ldr	r1, [pc, #16]	; (80037dc <VL53L0X_get_device_info+0x7c>)
 80037ca:	e7d6      	b.n	800377a <VL53L0X_get_device_info+0x1a>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80037cc:	4904      	ldr	r1, [pc, #16]	; (80037e0 <VL53L0X_get_device_info+0x80>)
 80037ce:	e7d4      	b.n	800377a <VL53L0X_get_device_info+0x1a>
 80037d0:	08008c3c 	.word	0x08008c3c
 80037d4:	08008c75 	.word	0x08008c75
 80037d8:	08008c48 	.word	0x08008c48
 80037dc:	08008c54 	.word	0x08008c54
 80037e0:	08008c60 	.word	0x08008c60

080037e4 <_I2CWrite>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80037e4:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80037e6:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80037ea:	f890 415c 	ldrb.w	r4, [r0, #348]	; 0x15c
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 80037f4:	b293      	uxth	r3, r2
 80037f6:	460a      	mov	r2, r1
 80037f8:	4621      	mov	r1, r4
 80037fa:	f001 fa27 	bl	8004c4c <HAL_I2C_Master_Transmit>
    
    return status;
}
 80037fe:	b002      	add	sp, #8
 8003800:	bd10      	pop	{r4, pc}

08003802 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8003802:	b513      	push	{r0, r1, r4, lr}
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8003804:	f102 030a 	add.w	r3, r2, #10

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8003808:	f890 415c 	ldrb.w	r4, [r0, #348]	; 0x15c
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
 8003812:	b293      	uxth	r3, r2
 8003814:	460a      	mov	r2, r1
 8003816:	f044 0101 	orr.w	r1, r4, #1
 800381a:	f001 faab 	bl	8004d74 <HAL_I2C_Master_Receive>
    
    return status;
}
 800381e:	b002      	add	sp, #8
 8003820:	bd10      	pop	{r4, pc}

08003822 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8003822:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003824:	ab02      	add	r3, sp, #8
 8003826:	4615      	mov	r5, r2
 8003828:	f803 1d01 	strb.w	r1, [r3, #-1]!
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800382c:	2201      	movs	r2, #1
 800382e:	4619      	mov	r1, r3
VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8003830:	4604      	mov	r4, r0
    status_int = _I2CWrite(Dev, &index, 1);
 8003832:	f7ff ffd7 	bl	80037e4 <_I2CWrite>
    
    if( status_int ){
 8003836:	b928      	cbnz	r0, 8003844 <VL53L0X_RdByte+0x22>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    
    status_int = _I2CRead(Dev, data, 1);
 8003838:	2201      	movs	r2, #1
 800383a:	4629      	mov	r1, r5
 800383c:	4620      	mov	r0, r4
 800383e:	f7ff ffe0 	bl	8003802 <_I2CRead>
    
    if (status_int != 0) {
 8003842:	b108      	cbz	r0, 8003848 <VL53L0X_RdByte+0x26>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003844:	f06f 0013 	mvn.w	r0, #19
    }
done:
    return Status;
}
 8003848:	b003      	add	sp, #12
 800384a:	bd30      	pop	{r4, r5, pc}

0800384c <VL53L0X_WriteMulti>:
// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    
    if (count > sizeof(_I2CBuffer) - 1) {
 800384c:	2b3f      	cmp	r3, #63	; 0x3f
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800384e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003850:	460f      	mov	r7, r1
 8003852:	4606      	mov	r6, r0
 8003854:	4611      	mov	r1, r2
 8003856:	461c      	mov	r4, r3
    if (count > sizeof(_I2CBuffer) - 1) {
 8003858:	d811      	bhi.n	800387e <VL53L0X_WriteMulti+0x32>
        return VL53L0X_ERROR_INVALID_PARAMS;
    }
    
    _I2CBuffer[0] = index;
 800385a:	4d0a      	ldr	r5, [pc, #40]	; (8003884 <VL53L0X_WriteMulti+0x38>)
 800385c:	4628      	mov	r0, r5
    memcpy(&_I2CBuffer[1], pdata, count);
 800385e:	461a      	mov	r2, r3
    _I2CBuffer[0] = index;
 8003860:	f800 7b01 	strb.w	r7, [r0], #1
    memcpy(&_I2CBuffer[1], pdata, count);
 8003864:	f002 fba6 	bl	8005fb4 <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8003868:	1c62      	adds	r2, r4, #1
 800386a:	4629      	mov	r1, r5
 800386c:	4630      	mov	r0, r6
 800386e:	f7ff ffb9 	bl	80037e4 <_I2CWrite>
    
    if (status_int != 0) {
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003872:	2800      	cmp	r0, #0
 8003874:	bf0c      	ite	eq
 8003876:	2000      	moveq	r0, #0
 8003878:	f06f 0013 	mvnne.w	r0, #19
 800387c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return VL53L0X_ERROR_INVALID_PARAMS;
 800387e:	f06f 0003 	mvn.w	r0, #3
    }
    
    return Status;
}
 8003882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003884:	20000744 	.word	0x20000744

08003888 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8003888:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800388a:	ac02      	add	r4, sp, #8
 800388c:	4616      	mov	r6, r2
 800388e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 8003892:	2201      	movs	r2, #1
 8003894:	4621      	mov	r1, r4
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8003896:	4605      	mov	r5, r0
 8003898:	461f      	mov	r7, r3
    status_int = _I2CWrite(Dev, &index, 1);
 800389a:	f7ff ffa3 	bl	80037e4 <_I2CWrite>
    
    if (status_int != 0) {
 800389e:	b928      	cbnz	r0, 80038ac <VL53L0X_ReadMulti+0x24>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
        goto done;
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 80038a0:	463a      	mov	r2, r7
 80038a2:	4631      	mov	r1, r6
 80038a4:	4628      	mov	r0, r5
 80038a6:	f7ff ffac 	bl	8003802 <_I2CRead>
    
    if (status_int != 0) {
 80038aa:	b108      	cbz	r0, 80038b0 <VL53L0X_ReadMulti+0x28>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80038ac:	f06f 0013 	mvn.w	r0, #19
    }
done:
    return Status;
}
 80038b0:	b003      	add	sp, #12
 80038b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038b4 <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 80038b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038b6:	ab02      	add	r3, sp, #8
 80038b8:	4615      	mov	r5, r2
 80038ba:	f803 1d01 	strb.w	r1, [r3, #-1]!
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 80038be:	2201      	movs	r2, #1
 80038c0:	4619      	mov	r1, r3
VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 80038c2:	4606      	mov	r6, r0
    status_int = _I2CWrite(Dev, &index, 1);
 80038c4:	f7ff ff8e 	bl	80037e4 <_I2CWrite>

    if( status_int ){
 80038c8:	b118      	cbz	r0, 80038d2 <VL53L0X_RdWord+0x1e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80038ca:	f06f 0013 	mvn.w	r0, #19
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
done:
    return Status;
}
 80038ce:	b002      	add	sp, #8
 80038d0:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 80038d2:	4c07      	ldr	r4, [pc, #28]	; (80038f0 <VL53L0X_RdWord+0x3c>)
 80038d4:	2202      	movs	r2, #2
 80038d6:	4621      	mov	r1, r4
 80038d8:	4630      	mov	r0, r6
 80038da:	f7ff ff92 	bl	8003802 <_I2CRead>
    if (status_int != 0) {
 80038de:	2800      	cmp	r0, #0
 80038e0:	d1f3      	bne.n	80038ca <VL53L0X_RdWord+0x16>
    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 80038e2:	7822      	ldrb	r2, [r4, #0]
 80038e4:	7863      	ldrb	r3, [r4, #1]
 80038e6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80038ea:	802b      	strh	r3, [r5, #0]
 80038ec:	e7ef      	b.n	80038ce <VL53L0X_RdWord+0x1a>
 80038ee:	bf00      	nop
 80038f0:	20000744 	.word	0x20000744

080038f4 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80038f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038f6:	ab02      	add	r3, sp, #8
 80038f8:	4615      	mov	r5, r2
 80038fa:	f803 1d01 	strb.w	r1, [r3, #-1]!
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 80038fe:	2201      	movs	r2, #1
 8003900:	4619      	mov	r1, r3
VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8003902:	4606      	mov	r6, r0
    status_int = _I2CWrite(Dev, &index, 1);
 8003904:	f7ff ff6e 	bl	80037e4 <_I2CWrite>
    
    if (status_int != 0) {
 8003908:	b118      	cbz	r0, 8003912 <VL53L0X_RdDWord+0x1e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800390a:	f06f 0013 	mvn.w	r0, #19

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];

done:
    return Status;
}
 800390e:	b002      	add	sp, #8
 8003910:	bd70      	pop	{r4, r5, r6, pc}
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8003912:	4c0a      	ldr	r4, [pc, #40]	; (800393c <VL53L0X_RdDWord+0x48>)
 8003914:	2204      	movs	r2, #4
 8003916:	4621      	mov	r1, r4
 8003918:	4630      	mov	r0, r6
 800391a:	f7ff ff72 	bl	8003802 <_I2CRead>
    if (status_int != 0) {
 800391e:	2800      	cmp	r0, #0
 8003920:	d1f3      	bne.n	800390a <VL53L0X_RdDWord+0x16>
    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8003922:	7863      	ldrb	r3, [r4, #1]
 8003924:	7822      	ldrb	r2, [r4, #0]
 8003926:	041b      	lsls	r3, r3, #16
 8003928:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 800392c:	78e2      	ldrb	r2, [r4, #3]
 800392e:	4413      	add	r3, r2
 8003930:	78a2      	ldrb	r2, [r4, #2]
 8003932:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003936:	602b      	str	r3, [r5, #0]
 8003938:	e7e9      	b.n	800390e <VL53L0X_RdDWord+0x1a>
 800393a:	bf00      	nop
 800393c:	20000744 	.word	0x20000744

08003940 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8003940:	b508      	push	{r3, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <VL53L0X_WrByte+0x1c>)
 8003944:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data;
 8003946:	705a      	strb	r2, [r3, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8003948:	4619      	mov	r1, r3
 800394a:	2202      	movs	r2, #2
 800394c:	f7ff ff4a 	bl	80037e4 <_I2CWrite>
    
    if (status_int != 0) {
 8003950:	2800      	cmp	r0, #0
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    }
    
    return Status;
}
 8003952:	bf14      	ite	ne
 8003954:	f06f 0013 	mvnne.w	r0, #19
 8003958:	2000      	moveq	r0, #0
 800395a:	bd08      	pop	{r3, pc}
 800395c:	20000744 	.word	0x20000744

08003960 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8003960:	b508      	push	{r3, lr}
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;

    _I2CBuffer[0] = index;
 8003962:	4b07      	ldr	r3, [pc, #28]	; (8003980 <VL53L0X_WrWord+0x20>)
 8003964:	7019      	strb	r1, [r3, #0]
    _I2CBuffer[1] = data >> 8;
 8003966:	0a11      	lsrs	r1, r2, #8
 8003968:	7059      	strb	r1, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800396a:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800396c:	4619      	mov	r1, r3
 800396e:	2203      	movs	r2, #3
 8003970:	f7ff ff38 	bl	80037e4 <_I2CWrite>
    
    if (status_int != 0) {
 8003974:	2800      	cmp	r0, #0
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    }
    
    return Status;
}
 8003976:	bf14      	ite	ne
 8003978:	f06f 0013 	mvnne.w	r0, #19
 800397c:	2000      	moveq	r0, #0
 800397e:	bd08      	pop	{r3, pc}
 8003980:	20000744 	.word	0x20000744

08003984 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8003984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003986:	4615      	mov	r5, r2
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8003988:	f10d 0207 	add.w	r2, sp, #7
VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800398c:	4606      	mov	r6, r0
 800398e:	460f      	mov	r7, r1
 8003990:	461c      	mov	r4, r3
    Status = VL53L0X_RdByte(Dev, index, &data);
 8003992:	f7ff ff46 	bl	8003822 <VL53L0X_RdByte>
    
    if (Status) {
 8003996:	b948      	cbnz	r0, 80039ac <VL53L0X_UpdateByte+0x28>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 8003998:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800399c:	402a      	ands	r2, r5
 800399e:	4322      	orrs	r2, r4
    Status = VL53L0X_WrByte(Dev, index, data);
 80039a0:	4639      	mov	r1, r7
 80039a2:	4630      	mov	r0, r6
    data = (data & AndData) | OrData;
 80039a4:	f88d 2007 	strb.w	r2, [sp, #7]
    Status = VL53L0X_WrByte(Dev, index, data);
 80039a8:	f7ff ffca 	bl	8003940 <VL53L0X_WrByte>
done:
    return Status;
}
 80039ac:	b003      	add	sp, #12
 80039ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039b0 <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 80039b0:	b508      	push	{r3, lr}
    VL53L0X_Error status = VL53L0X_ERROR_NONE;

    // do nothing
    VL53L0X_OsDelay();
 80039b2:	2002      	movs	r0, #2
 80039b4:	f000 fe08 	bl	80045c8 <HAL_Delay>
    return status;
}
 80039b8:	2000      	movs	r0, #0
 80039ba:	bd08      	pop	{r3, pc}

080039bc <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(VL53L0X_Dev_t Dev)
{
 80039bc:	b084      	sub	sp, #16
 80039be:	b507      	push	{r0, r1, r2, lr}
 80039c0:	f10d 0e10 	add.w	lr, sp, #16
 80039c4:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	uint32_t timingBudget = 33000;
	uint8_t preRangeVcselPeriod = 14;
	uint8_t finalRangeVcselPeriod = 10;

                          
  if( Dev.Present){
 80039c8:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d064      	beq.n	8003a98 <SetupSingleShot+0xdc>
    status=VL53L0X_StaticInit(&Dev);
 80039ce:	4670      	mov	r0, lr
 80039d0:	f7fe f934 	bl	8001c3c <VL53L0X_StaticInit>
    if( status ){
 80039d4:	b110      	cbz	r0, 80039dc <SetupSingleShot+0x20>
      printf("VL53L0X_StaticInit failed\n");
 80039d6:	4833      	ldr	r0, [pc, #204]	; (8003aa4 <SetupSingleShot+0xe8>)
 80039d8:	f002 ffe0 	bl	800699c <puts>
    }
    
    
    status = VL53L0X_PerformRefCalibration(&Dev, &VhvSettings, &PhaseCal);
 80039dc:	f10d 0202 	add.w	r2, sp, #2
 80039e0:	f10d 0101 	add.w	r1, sp, #1
 80039e4:	a804      	add	r0, sp, #16
 80039e6:	f7fd fee9 	bl	80017bc <VL53L0X_PerformRefCalibration>
    if( status ){
 80039ea:	b110      	cbz	r0, 80039f2 <SetupSingleShot+0x36>
      printf("VL53L0X_PerformRefCalibration failed\n");
 80039ec:	482e      	ldr	r0, [pc, #184]	; (8003aa8 <SetupSingleShot+0xec>)
 80039ee:	f002 ffd5 	bl	800699c <puts>
    }
    
    status = VL53L0X_PerformRefSpadManagement(&Dev, &refSpadCount, &isApertureSpads);
 80039f2:	f10d 0203 	add.w	r2, sp, #3
 80039f6:	a901      	add	r1, sp, #4
 80039f8:	a804      	add	r0, sp, #16
 80039fa:	f7fe fa24 	bl	8001e46 <VL53L0X_PerformRefSpadManagement>
    if( status ){
 80039fe:	b110      	cbz	r0, 8003a06 <SetupSingleShot+0x4a>
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 8003a00:	482a      	ldr	r0, [pc, #168]	; (8003aac <SetupSingleShot+0xf0>)
 8003a02:	f002 ffcb 	bl	800699c <puts>
    }
    
    status = VL53L0X_SetDeviceMode(&Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 8003a06:	2100      	movs	r1, #0
 8003a08:	a804      	add	r0, sp, #16
 8003a0a:	f7fd fc63 	bl	80012d4 <VL53L0X_SetDeviceMode>
    if( status ){
 8003a0e:	b110      	cbz	r0, 8003a16 <SetupSingleShot+0x5a>
      printf("VL53L0X_SetDeviceMode failed\n");
 8003a10:	4827      	ldr	r0, [pc, #156]	; (8003ab0 <SetupSingleShot+0xf4>)
 8003a12:	f002 ffc3 	bl	800699c <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 8003a16:	2201      	movs	r2, #1
 8003a18:	2100      	movs	r1, #0
 8003a1a:	a804      	add	r0, sp, #16
 8003a1c:	f7fd fd36 	bl	800148c <VL53L0X_SetLimitCheckEnable>
    if( status ){
 8003a20:	b110      	cbz	r0, 8003a28 <SetupSingleShot+0x6c>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 8003a22:	4824      	ldr	r0, [pc, #144]	; (8003ab4 <SetupSingleShot+0xf8>)
 8003a24:	f002 ffba 	bl	800699c <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 8003a28:	2201      	movs	r2, #1
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	a804      	add	r0, sp, #16
 8003a2e:	f7fd fd2d 	bl	800148c <VL53L0X_SetLimitCheckEnable>
    if( status ){
 8003a32:	b110      	cbz	r0, 8003a3a <SetupSingleShot+0x7e>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 8003a34:	481f      	ldr	r0, [pc, #124]	; (8003ab4 <SetupSingleShot+0xf8>)
 8003a36:	f002 ffb1 	bl	800699c <puts>
    sigmaLimit = (FixPoint1616_t)(60*65536);
    timingBudget = 33000;
    preRangeVcselPeriod = 18;
    finalRangeVcselPeriod = 14;
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 8003a3a:	f641 1299 	movw	r2, #6553	; 0x1999
 8003a3e:	2101      	movs	r1, #1
 8003a40:	a804      	add	r0, sp, #16
 8003a42:	f7fd fd70 	bl	8001526 <VL53L0X_SetLimitCheckValue>
    
    if( status ){
 8003a46:	b110      	cbz	r0, 8003a4e <SetupSingleShot+0x92>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 8003a48:	481b      	ldr	r0, [pc, #108]	; (8003ab8 <SetupSingleShot+0xfc>)
 8003a4a:	f002 ffa7 	bl	800699c <puts>
    }
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 8003a4e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003a52:	2100      	movs	r1, #0
 8003a54:	a804      	add	r0, sp, #16
 8003a56:	f7fd fd66 	bl	8001526 <VL53L0X_SetLimitCheckValue>
    if( status ){
 8003a5a:	b110      	cbz	r0, 8003a62 <SetupSingleShot+0xa6>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 8003a5c:	4816      	ldr	r0, [pc, #88]	; (8003ab8 <SetupSingleShot+0xfc>)
 8003a5e:	f002 ff9d 	bl	800699c <puts>
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&Dev,  timingBudget);
 8003a62:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8003a66:	a804      	add	r0, sp, #16
 8003a68:	f7fd fc50 	bl	800130c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    if( status ){
 8003a6c:	b110      	cbz	r0, 8003a74 <SetupSingleShot+0xb8>
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 8003a6e:	4813      	ldr	r0, [pc, #76]	; (8003abc <SetupSingleShot+0x100>)
 8003a70:	f002 ff94 	bl	800699c <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 8003a74:	2212      	movs	r2, #18
 8003a76:	2100      	movs	r1, #0
 8003a78:	a804      	add	r0, sp, #16
 8003a7a:	f7fd fc49 	bl	8001310 <VL53L0X_SetVcselPulsePeriod>
    if( status ){
 8003a7e:	b110      	cbz	r0, 8003a86 <SetupSingleShot+0xca>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8003a80:	480f      	ldr	r0, [pc, #60]	; (8003ac0 <SetupSingleShot+0x104>)
 8003a82:	f002 ff8b 	bl	800699c <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 8003a86:	220e      	movs	r2, #14
 8003a88:	2101      	movs	r1, #1
 8003a8a:	a804      	add	r0, sp, #16
 8003a8c:	f7fd fc40 	bl	8001310 <VL53L0X_SetVcselPulsePeriod>
    if( status ){
 8003a90:	b110      	cbz	r0, 8003a98 <SetupSingleShot+0xdc>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8003a92:	480b      	ldr	r0, [pc, #44]	; (8003ac0 <SetupSingleShot+0x104>)
 8003a94:	f002 ff82 	bl	800699c <puts>
    }
    
    Dev.LeakyFirst=1;
  }
}
 8003a98:	b003      	add	sp, #12
 8003a9a:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a9e:	b004      	add	sp, #16
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	08009073 	.word	0x08009073
 8003aa8:	0800908d 	.word	0x0800908d
 8003aac:	080090b2 	.word	0x080090b2
 8003ab0:	080090da 	.word	0x080090da
 8003ab4:	080090f7 	.word	0x080090f7
 8003ab8:	0800911a 	.word	0x0800911a
 8003abc:	0800913c 	.word	0x0800913c
 8003ac0:	08009172 	.word	0x08009172

08003ac4 <I2Cx_Init.constprop.8>:
/**
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8003ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
{
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
  i2c_handler->Init.OwnAddress1      = 0;
 8003ac6:	482a      	ldr	r0, [pc, #168]	; (8003b70 <I2Cx_Init.constprop.8+0xac>)
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8003ac8:	4c2a      	ldr	r4, [pc, #168]	; (8003b74 <I2Cx_Init.constprop.8+0xb0>)
  i2c_handler->Init.OwnAddress1      = 0;
 8003aca:	4b2b      	ldr	r3, [pc, #172]	; (8003b78 <I2Cx_Init.constprop.8+0xb4>)
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003acc:	4d2b      	ldr	r5, [pc, #172]	; (8003b7c <I2Cx_Init.constprop.8+0xb8>)
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003ace:	4f2c      	ldr	r7, [pc, #176]	; (8003b80 <I2Cx_Init.constprop.8+0xbc>)
  i2c_handler->Init.OwnAddress1      = 0;
 8003ad0:	2600      	movs	r6, #0
 8003ad2:	e884 0049 	stmia.w	r4, {r0, r3, r6}
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	60e2      	str	r2, [r4, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003ada:	6126      	str	r6, [r4, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8003adc:	6166      	str	r6, [r4, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003ade:	61e6      	str	r6, [r4, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003ae0:	6226      	str	r6, [r4, #32]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003ae2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003ae4:	f043 0302 	orr.w	r3, r3, #2
 8003ae8:	64eb      	str	r3, [r5, #76]	; 0x4c
 8003aea:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
 8003aec:	b089      	sub	sp, #36	; 0x24
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	9301      	str	r3, [sp, #4]
 8003af4:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8003af6:	9205      	str	r2, [sp, #20]
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8003af8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003afc:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003afe:	2312      	movs	r3, #18
 8003b00:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b02:	2303      	movs	r3, #3
 8003b04:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003b06:	a903      	add	r1, sp, #12
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003b08:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003b0a:	4638      	mov	r0, r7
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003b0c:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003b0e:	f000 fdd1 	bl	80046b4 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003b12:	a903      	add	r1, sp, #12
 8003b14:	4638      	mov	r0, r7
 8003b16:	f000 fdcd 	bl	80046b4 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 8003b1a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003b1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b20:	65ab      	str	r3, [r5, #88]	; 0x58
 8003b22:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003b24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b28:	9302      	str	r3, [sp, #8]
 8003b2a:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_I2Cx_FORCE_RESET();
 8003b2c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003b2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b32:	63ab      	str	r3, [r5, #56]	; 0x38
  DISCOVERY_I2Cx_RELEASE_RESET();
 8003b34:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003b36:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003b3a:	63ab      	str	r3, [r5, #56]	; 0x38
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003b3c:	4632      	mov	r2, r6
 8003b3e:	210f      	movs	r1, #15
 8003b40:	2021      	movs	r0, #33	; 0x21
 8003b42:	f000 fd61 	bl	8004608 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003b46:	2021      	movs	r0, #33	; 0x21
 8003b48:	f000 fd92 	bl	8004670 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003b4c:	4632      	mov	r2, r6
 8003b4e:	210f      	movs	r1, #15
 8003b50:	2022      	movs	r0, #34	; 0x22
 8003b52:	f000 fd59 	bl	8004608 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003b56:	2022      	movs	r0, #34	; 0x22
 8003b58:	f000 fd8a 	bl	8004670 <HAL_NVIC_EnableIRQ>

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
  HAL_I2C_Init(i2c_handler);
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	f001 f80a 	bl	8004b76 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8003b62:	4631      	mov	r1, r6
 8003b64:	4620      	mov	r0, r4
 8003b66:	f001 fb11 	bl	800518c <HAL_I2CEx_ConfigAnalogFilter>
}
 8003b6a:	b009      	add	sp, #36	; 0x24
 8003b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40005800 	.word	0x40005800
 8003b74:	200007fc 	.word	0x200007fc
 8003b78:	00702681 	.word	0x00702681
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	48000400 	.word	0x48000400

08003b84 <BSP_LED_Init>:
{
 8003b84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 8003b86:	b948      	cbnz	r0, 8003b9c <BSP_LED_Init+0x18>
 8003b88:	4b0d      	ldr	r3, [pc, #52]	; (8003bc0 <BSP_LED_Init+0x3c>)
 8003b8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b8c:	f042 0202 	orr.w	r2, r2, #2
 8003b90:	64da      	str	r2, [r3, #76]	; 0x4c
 8003b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin   = GPIO_PIN[Led];
 8003b9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ba0:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003baa:	2302      	movs	r3, #2
 8003bac:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <BSP_LED_Init+0x40>)
 8003bb0:	a901      	add	r1, sp, #4
 8003bb2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003bb6:	f000 fd7d 	bl	80046b4 <HAL_GPIO_Init>
}
 8003bba:	b007      	add	sp, #28
 8003bbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	20000444 	.word	0x20000444

08003bc8 <BSP_PB_Init>:
{
 8003bc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  USER_BUTTON_GPIO_CLK_ENABLE();
 8003bca:	4b1b      	ldr	r3, [pc, #108]	; (8003c38 <BSP_PB_Init+0x70>)
 8003bcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bce:	f042 0204 	orr.w	r2, r2, #4
 8003bd2:	64da      	str	r2, [r3, #76]	; 0x4c
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	9b00      	ldr	r3, [sp, #0]
  if(ButtonMode == BUTTON_MODE_GPIO)
 8003bde:	b989      	cbnz	r1, 8003c04 <BSP_PB_Init+0x3c>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8003be0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003be4:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8003be6:	2301      	movs	r3, #1
 8003be8:	9303      	str	r3, [sp, #12]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bea:	2302      	movs	r3, #2
 8003bec:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003bee:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <BSP_PB_Init+0x74>)
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003bf0:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003bf2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003bf6:	a901      	add	r1, sp, #4
 8003bf8:	6840      	ldr	r0, [r0, #4]
 8003bfa:	f000 fd5b 	bl	80046b4 <HAL_GPIO_Init>
}
 8003bfe:	b007      	add	sp, #28
 8003c00:	f85d fb04 	ldr.w	pc, [sp], #4
  if(ButtonMode == BUTTON_MODE_EXTI)
 8003c04:	2901      	cmp	r1, #1
 8003c06:	d1fa      	bne.n	8003bfe <BSP_PB_Init+0x36>
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 8003c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c0c:	9301      	str	r3, [sp, #4]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	9304      	str	r3, [sp, #16]
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <BSP_PB_Init+0x78>)
 8003c14:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003c16:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <BSP_PB_Init+0x74>)
    gpio_init_structure.Pull = GPIO_PULLUP;
 8003c18:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003c1a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003c1e:	a901      	add	r1, sp, #4
 8003c20:	6840      	ldr	r0, [r0, #4]
 8003c22:	f000 fd47 	bl	80046b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8003c26:	2200      	movs	r2, #0
 8003c28:	210f      	movs	r1, #15
 8003c2a:	2028      	movs	r0, #40	; 0x28
 8003c2c:	f000 fcec 	bl	8004608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8003c30:	2028      	movs	r0, #40	; 0x28
 8003c32:	f000 fd1d 	bl	8004670 <HAL_NVIC_EnableIRQ>
}
 8003c36:	e7e2      	b.n	8003bfe <BSP_PB_Init+0x36>
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	20000444 	.word	0x20000444
 8003c40:	10110000 	.word	0x10110000

08003c44 <BSP_COM_Init>:
{
 8003c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c46:	460e      	mov	r6, r1
 8003c48:	b089      	sub	sp, #36	; 0x24
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8003c4a:	b9d8      	cbnz	r0, 8003c84 <BSP_COM_Init+0x40>
 8003c4c:	4b1d      	ldr	r3, [pc, #116]	; (8003cc4 <BSP_COM_Init+0x80>)
 8003c4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c50:	f042 0202 	orr.w	r2, r2, #2
 8003c54:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c58:	f002 0202 	and.w	r2, r2, #2
 8003c5c:	9200      	str	r2, [sp, #0]
 8003c5e:	9a00      	ldr	r2, [sp, #0]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8003c60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c62:	f042 0202 	orr.w	r2, r2, #2
 8003c66:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c6a:	f002 0202 	and.w	r2, r2, #2
 8003c6e:	9201      	str	r2, [sp, #4]
 8003c70:	9a01      	ldr	r2, [sp, #4]
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8003c72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c78:	661a      	str	r2, [r3, #96]	; 0x60
 8003c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c80:	9302      	str	r3, [sp, #8]
 8003c82:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8003c84:	4c10      	ldr	r4, [pc, #64]	; (8003cc8 <BSP_COM_Init+0x84>)
 8003c86:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8003c8a:	2340      	movs	r3, #64	; 0x40
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003c8c:	2502      	movs	r5, #2
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8003c8e:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8003c90:	2707      	movs	r7, #7
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003c92:	2300      	movs	r3, #0
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8003c94:	a903      	add	r1, sp, #12
 8003c96:	68a0      	ldr	r0, [r4, #8]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003c98:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003c9a:	9504      	str	r5, [sp, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c9c:	9506      	str	r5, [sp, #24]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8003c9e:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8003ca0:	f000 fd08 	bl	80046b4 <HAL_GPIO_Init>
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8003ca4:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8003ca6:	a903      	add	r1, sp, #12
 8003ca8:	68e0      	ldr	r0, [r4, #12]
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8003caa:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8003cac:	9504      	str	r5, [sp, #16]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8003cae:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8003cb0:	f000 fd00 	bl	80046b4 <HAL_GPIO_Init>
  huart->Instance = COM_USART[COM];
 8003cb4:	6923      	ldr	r3, [r4, #16]
 8003cb6:	6033      	str	r3, [r6, #0]
  HAL_UART_Init(huart);
 8003cb8:	4630      	mov	r0, r6
 8003cba:	f002 f91e 	bl	8005efa <HAL_UART_Init>
}
 8003cbe:	b009      	add	sp, #36	; 0x24
 8003cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	20000444 	.word	0x20000444

08003ccc <SENSOR_IO_Init>:
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
  I2Cx_Init(&hI2cHandler);
 8003ccc:	f7ff befa 	b.w	8003ac4 <I2Cx_Init.constprop.8>

08003cd0 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003cd0:	b510      	push	{r4, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8003cda:	f804 2d01 	strb.w	r2, [r4, #-1]!
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003cde:	9302      	str	r3, [sp, #8]
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	460a      	mov	r2, r1
 8003ce4:	9301      	str	r3, [sp, #4]
 8003ce6:	4601      	mov	r1, r0
 8003ce8:	9400      	str	r4, [sp, #0]
 8003cea:	4805      	ldr	r0, [pc, #20]	; (8003d00 <SENSOR_IO_Write+0x30>)
 8003cec:	f001 f8d8 	bl	8004ea0 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8003cf0:	b120      	cbz	r0, 8003cfc <SENSOR_IO_Write+0x2c>
  HAL_I2C_DeInit(i2c_handler);
 8003cf2:	4803      	ldr	r0, [pc, #12]	; (8003d00 <SENSOR_IO_Write+0x30>)
 8003cf4:	f000 ff91 	bl	8004c1a <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8003cf8:	f7ff fee4 	bl	8003ac4 <I2Cx_Init.constprop.8>
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 8003cfc:	b006      	add	sp, #24
 8003cfe:	bd10      	pop	{r4, pc}
 8003d00:	200007fc 	.word	0x200007fc

08003d04 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003d04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 8003d06:	aa06      	add	r2, sp, #24
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d12:	9302      	str	r3, [sp, #8]
 8003d14:	2301      	movs	r3, #1
 8003d16:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003d1a:	460a      	mov	r2, r1
 8003d1c:	4601      	mov	r1, r0
 8003d1e:	4807      	ldr	r0, [pc, #28]	; (8003d3c <SENSOR_IO_Read+0x38>)
 8003d20:	f001 f976 	bl	8005010 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8003d24:	b120      	cbz	r0, 8003d30 <SENSOR_IO_Read+0x2c>
  HAL_I2C_DeInit(i2c_handler);
 8003d26:	4805      	ldr	r0, [pc, #20]	; (8003d3c <SENSOR_IO_Read+0x38>)
 8003d28:	f000 ff77 	bl	8004c1a <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8003d2c:	f7ff feca 	bl	8003ac4 <I2Cx_Init.constprop.8>

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 8003d30:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8003d34:	b007      	add	sp, #28
 8003d36:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d3a:	bf00      	nop
 8003d3c:	200007fc 	.word	0x200007fc

08003d40 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003d40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003d42:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003d46:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 8003d4a:	460a      	mov	r2, r1
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	4601      	mov	r1, r0
 8003d50:	4806      	ldr	r0, [pc, #24]	; (8003d6c <SENSOR_IO_ReadMultiple+0x2c>)
 8003d52:	f001 f95d 	bl	8005010 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8003d56:	4604      	mov	r4, r0
 8003d58:	b120      	cbz	r0, 8003d64 <SENSOR_IO_ReadMultiple+0x24>
  HAL_I2C_DeInit(i2c_handler);
 8003d5a:	4804      	ldr	r0, [pc, #16]	; (8003d6c <SENSOR_IO_ReadMultiple+0x2c>)
 8003d5c:	f000 ff5d 	bl	8004c1a <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8003d60:	f7ff feb0 	bl	8003ac4 <I2Cx_Init.constprop.8>
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 8003d64:	4620      	mov	r0, r4
 8003d66:	b004      	add	sp, #16
 8003d68:	bd10      	pop	{r4, pc}
 8003d6a:	bf00      	nop
 8003d6c:	200007fc 	.word	0x200007fc

08003d70 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8003d70:	b510      	push	{r4, lr}
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8003d72:	4c07      	ldr	r4, [pc, #28]	; (8003d90 <BSP_ACCELERO_Init+0x20>)
 8003d74:	68a3      	ldr	r3, [r4, #8]
 8003d76:	4798      	blx	r3
 8003d78:	286a      	cmp	r0, #106	; 0x6a
 8003d7a:	d107      	bne.n	8003d8c <BSP_ACCELERO_Init+0x1c>
    ret = ACCELERO_ERROR;
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <BSP_ACCELERO_Init+0x24>)
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8003d7e:	f244 4030 	movw	r0, #17456	; 0x4430
    AccelerometerDrv = &Lsm6dslAccDrv;
 8003d82:	601c      	str	r4, [r3, #0]
    AccelerometerDrv->Init(ctrl);
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	4798      	blx	r3
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8003d88:	2000      	movs	r0, #0
 8003d8a:	bd10      	pop	{r4, pc}
    ret = ACCELERO_ERROR;
 8003d8c:	2001      	movs	r0, #1
  }  

  return ret;
}
 8003d8e:	bd10      	pop	{r4, pc}
 8003d90:	200004f8 	.word	0x200004f8
 8003d94:	20000724 	.word	0x20000724

08003d98 <BSP_ACCELERO_AccGetXYZ>:
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
  if(AccelerometerDrv != NULL)
 8003d98:	4b03      	ldr	r3, [pc, #12]	; (8003da8 <BSP_ACCELERO_AccGetXYZ+0x10>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	b113      	cbz	r3, 8003da4 <BSP_ACCELERO_AccGetXYZ+0xc>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	b103      	cbz	r3, 8003da4 <BSP_ACCELERO_AccGetXYZ+0xc>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8003da2:	4718      	bx	r3
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	20000724 	.word	0x20000724

08003dac <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8003dac:	b510      	push	{r4, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8003dae:	4c07      	ldr	r4, [pc, #28]	; (8003dcc <BSP_GYRO_Init+0x20>)
 8003db0:	68a3      	ldr	r3, [r4, #8]
 8003db2:	4798      	blx	r3
 8003db4:	286a      	cmp	r0, #106	; 0x6a
 8003db6:	d107      	bne.n	8003dc8 <BSP_GYRO_Init+0x1c>
    ret = GYRO_ERROR;
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8003db8:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <BSP_GYRO_Init+0x24>)

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8003dba:	f244 403c 	movw	r0, #17468	; 0x443c
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8003dbe:	601c      	str	r4, [r3, #0]
    GyroscopeDrv->Init(ctrl);
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	4798      	blx	r3
    
    ret = GYRO_OK;
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	bd10      	pop	{r4, pc}
    ret = GYRO_ERROR;
 8003dc8:	2001      	movs	r0, #1
  }
  
  return ret;
}
 8003dca:	bd10      	pop	{r4, pc}
 8003dcc:	200004c4 	.word	0x200004c4
 8003dd0:	20000728 	.word	0x20000728

08003dd4 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
  if(GyroscopeDrv != NULL)
 8003dd4:	4b03      	ldr	r3, [pc, #12]	; (8003de4 <BSP_GYRO_GetXYZ+0x10>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	b113      	cbz	r3, 8003de0 <BSP_GYRO_GetXYZ+0xc>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	b103      	cbz	r3, 8003de0 <BSP_GYRO_GetXYZ+0xc>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8003dde:	4718      	bx	r3
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	20000728 	.word	0x20000728

08003de8 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8003de8:	b510      	push	{r4, lr}
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8003dea:	4c07      	ldr	r4, [pc, #28]	; (8003e08 <BSP_HSENSOR_Init+0x20>)
 8003dec:	20be      	movs	r0, #190	; 0xbe
 8003dee:	6863      	ldr	r3, [r4, #4]
 8003df0:	4798      	blx	r3
 8003df2:	28bc      	cmp	r0, #188	; 0xbc
 8003df4:	d106      	bne.n	8003e04 <BSP_HSENSOR_Init+0x1c>
  {
    ret = HSENSOR_ERROR;
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <BSP_HSENSOR_Init+0x24>)
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8003df8:	20be      	movs	r0, #190	; 0xbe
    Hsensor_drv = &HTS221_H_Drv;
 8003dfa:	601c      	str	r4, [r3, #0]
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	4798      	blx	r3
    ret = HSENSOR_OK;
 8003e00:	2000      	movs	r0, #0
 8003e02:	bd10      	pop	{r4, pc}
    ret = HSENSOR_ERROR;
 8003e04:	2001      	movs	r0, #1
  }
  
  return ret;
}
 8003e06:	bd10      	pop	{r4, pc}
 8003e08:	20000468 	.word	0x20000468
 8003e0c:	2000072c 	.word	0x2000072c

08003e10 <BSP_HSENSOR_ReadHumidity>:
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8003e10:	4b02      	ldr	r3, [pc, #8]	; (8003e1c <BSP_HSENSOR_ReadHumidity+0xc>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	20be      	movs	r0, #190	; 0xbe
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	4718      	bx	r3
 8003e1a:	bf00      	nop
 8003e1c:	2000072c 	.word	0x2000072c

08003e20 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8003e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8003e22:	4d0f      	ldr	r5, [pc, #60]	; (8003e60 <BSP_MAGNETO_Init+0x40>)
 8003e24:	68ab      	ldr	r3, [r5, #8]
 8003e26:	4798      	blx	r3
 8003e28:	283d      	cmp	r0, #61	; 0x3d
 8003e2a:	d117      	bne.n	8003e5c <BSP_MAGNETO_Init+0x3c>
    ret = MAGNETO_ERROR;
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8003e2c:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <BSP_MAGNETO_Init+0x44>)
 8003e2e:	601d      	str	r5, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8003e30:	2358      	movs	r3, #88	; 0x58
 8003e32:	f88d 3000 	strb.w	r3, [sp]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8003e36:	2308      	movs	r3, #8
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8003e38:	2400      	movs	r4, #0
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8003e3a:	f88d 3003 	strb.w	r3, [sp, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8003e3e:	2340      	movs	r3, #64	; 0x40
 8003e40:	f88d 3004 	strb.w	r3, [sp, #4]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8003e44:	f88d 4001 	strb.w	r4, [sp, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8003e48:	f88d 4002 	strb.w	r4, [sp, #2]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8003e4c:	aa02      	add	r2, sp, #8
 8003e4e:	e912 0003 	ldmdb	r2, {r0, r1}
 8003e52:	682b      	ldr	r3, [r5, #0]
 8003e54:	4798      	blx	r3
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8003e56:	4620      	mov	r0, r4
  } 

  return ret;  
}
 8003e58:	b003      	add	sp, #12
 8003e5a:	bd30      	pop	{r4, r5, pc}
    ret = MAGNETO_ERROR;
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	e7fb      	b.n	8003e58 <BSP_MAGNETO_Init+0x38>
 8003e60:	20000474 	.word	0x20000474
 8003e64:	20000730 	.word	0x20000730

08003e68 <BSP_MAGNETO_GetXYZ>:
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
  if(MagnetoDrv != NULL)
 8003e68:	4b03      	ldr	r3, [pc, #12]	; (8003e78 <BSP_MAGNETO_GetXYZ+0x10>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	b113      	cbz	r3, 8003e74 <BSP_MAGNETO_GetXYZ+0xc>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	b103      	cbz	r3, 8003e74 <BSP_MAGNETO_GetXYZ+0xc>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8003e72:	4718      	bx	r3
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	20000730 	.word	0x20000730

08003e7c <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8003e7c:	b510      	push	{r4, lr}
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8003e7e:	4c07      	ldr	r4, [pc, #28]	; (8003e9c <BSP_PSENSOR_Init+0x20>)
 8003e80:	20ba      	movs	r0, #186	; 0xba
 8003e82:	6863      	ldr	r3, [r4, #4]
 8003e84:	4798      	blx	r3
 8003e86:	28b1      	cmp	r0, #177	; 0xb1
 8003e88:	d106      	bne.n	8003e98 <BSP_PSENSOR_Init+0x1c>
  {
    ret = PSENSOR_ERROR;
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8003e8a:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <BSP_PSENSOR_Init+0x24>)
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8003e8c:	20ba      	movs	r0, #186	; 0xba
     Psensor_drv = &LPS22HB_P_Drv;
 8003e8e:	601c      	str	r4, [r3, #0]
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	4798      	blx	r3
    ret = PSENSOR_OK;
 8003e94:	2000      	movs	r0, #0
 8003e96:	bd10      	pop	{r4, pc}
    ret = PSENSOR_ERROR;
 8003e98:	2001      	movs	r0, #1
  }
  
  return ret;
}
 8003e9a:	bd10      	pop	{r4, pc}
 8003e9c:	200004b8 	.word	0x200004b8
 8003ea0:	20000734 	.word	0x20000734

08003ea4 <BSP_PSENSOR_ReadPressure>:
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8003ea4:	4b02      	ldr	r3, [pc, #8]	; (8003eb0 <BSP_PSENSOR_ReadPressure+0xc>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	20ba      	movs	r0, #186	; 0xba
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	4718      	bx	r3
 8003eae:	bf00      	nop
 8003eb0:	20000734 	.word	0x20000734

08003eb4 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003eb4:	b510      	push	{r4, lr}
  uint8_t ret = TSENSOR_ERROR;

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8003eb6:	4c06      	ldr	r4, [pc, #24]	; (8003ed0 <BSP_TSENSOR_Init+0x1c>)
 8003eb8:	4b06      	ldr	r3, [pc, #24]	; (8003ed4 <BSP_TSENSOR_Init+0x20>)
 8003eba:	6023      	str	r3, [r4, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003ebc:	f7ff ff06 	bl	8003ccc <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	20be      	movs	r0, #190	; 0xbe
 8003ec8:	4798      	blx	r3

  ret = TSENSOR_OK;
  
  return ret;
}
 8003eca:	2000      	movs	r0, #0
 8003ecc:	bd10      	pop	{r4, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000738 	.word	0x20000738
 8003ed4:	20000458 	.word	0x20000458

08003ed8 <BSP_TSENSOR_ReadTemp>:
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003ed8:	4b02      	ldr	r3, [pc, #8]	; (8003ee4 <BSP_TSENSOR_ReadTemp+0xc>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	20be      	movs	r0, #190	; 0xbe
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	4718      	bx	r3
 8003ee2:	bf00      	nop
 8003ee4:	20000738 	.word	0x20000738

08003ee8 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8003ee8:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003eea:	b2c4      	uxtb	r4, r0
 8003eec:	2120      	movs	r1, #32
 8003eee:	4620      	mov	r0, r4
 8003ef0:	f7ff ff08 	bl	8003d04 <SENSOR_IO_Read>
 8003ef4:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003ef8:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 8003efc:	4620      	mov	r0, r4
 8003efe:	2120      	movs	r1, #32
}
 8003f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003f04:	f7ff bee4 	b.w	8003cd0 <SENSOR_IO_Write>

08003f08 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8003f08:	b510      	push	{r4, lr}
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003f0a:	b2c4      	uxtb	r4, r0
 8003f0c:	2120      	movs	r1, #32
 8003f0e:	4620      	mov	r0, r4
 8003f10:	f7ff fef8 	bl	8003d04 <SENSOR_IO_Read>
 8003f14:	f000 02f8 	and.w	r2, r0, #248	; 0xf8
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003f18:	f042 0285 	orr.w	r2, r2, #133	; 0x85
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	2120      	movs	r1, #32
}
 8003f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003f24:	f7ff bed4 	b.w	8003cd0 <SENSOR_IO_Write>

08003f28 <HTS221_H_ReadID>:
{  
 8003f28:	b510      	push	{r4, lr}
 8003f2a:	4604      	mov	r4, r0
  SENSOR_IO_Init(); 
 8003f2c:	f7ff fece 	bl	8003ccc <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8003f30:	b2e0      	uxtb	r0, r4
 8003f32:	210f      	movs	r1, #15
}
 8003f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8003f38:	f7ff bee4 	b.w	8003d04 <SENSOR_IO_Read>

08003f3c <HTS221_H_ReadHumidity>:
{
 8003f3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8003f40:	fa5f f880 	uxtb.w	r8, r0
 8003f44:	2302      	movs	r3, #2
 8003f46:	aa01      	add	r2, sp, #4
 8003f48:	21b0      	movs	r1, #176	; 0xb0
 8003f4a:	4640      	mov	r0, r8
 8003f4c:	f7ff fef8 	bl	8003d40 <SENSOR_IO_ReadMultiple>
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8003f50:	2302      	movs	r3, #2
 8003f52:	aa01      	add	r2, sp, #4
 8003f54:	21b6      	movs	r1, #182	; 0xb6
 8003f56:	4640      	mov	r0, r8
  H0_rh = buffer[0] >> 1;
 8003f58:	f89d 6004 	ldrb.w	r6, [sp, #4]
  H1_rh = buffer[1] >> 1;
 8003f5c:	f89d 5005 	ldrb.w	r5, [sp, #5]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8003f60:	f7ff feee 	bl	8003d40 <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003f64:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8003f68:	f89d 4004 	ldrb.w	r4, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8003f6c:	2302      	movs	r3, #2
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003f6e:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8003f72:	aa01      	add	r2, sp, #4
 8003f74:	21ba      	movs	r1, #186	; 0xba
 8003f76:	4640      	mov	r0, r8
 8003f78:	f7ff fee2 	bl	8003d40 <SENSOR_IO_ReadMultiple>
  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003f7c:	b227      	sxth	r7, r4
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003f7e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003f82:	f89d 4004 	ldrb.w	r4, [sp, #4]
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8003f86:	aa01      	add	r2, sp, #4
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003f88:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8003f8c:	21a8      	movs	r1, #168	; 0xa8
 8003f8e:	2302      	movs	r3, #2
 8003f90:	4640      	mov	r0, r8
 8003f92:	f7ff fed5 	bl	8003d40 <SENSOR_IO_ReadMultiple>
  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003f96:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003f9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003f9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8003fa2:	b21b      	sxth	r3, r3
 8003fa4:	1bdb      	subs	r3, r3, r7
 8003fa6:	ee07 3a90 	vmov	s15, r3
  H0_rh = buffer[0] >> 1;
 8003faa:	0876      	lsrs	r6, r6, #1
  H1_rh = buffer[1] >> 1;
 8003fac:	086d      	lsrs	r5, r5, #1
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8003fae:	1bab      	subs	r3, r5, r6
 8003fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fb4:	ee07 3a90 	vmov	s15, r3
  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003fb8:	b224      	sxth	r4, r4
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8003fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fbe:	1be4      	subs	r4, r4, r7
 8003fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc4:	ee07 4a10 	vmov	s14, r4
 8003fc8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003fcc:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8003fd0:	ee07 6a90 	vmov	s15, r6
 8003fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        : ( tmp_f <    0.0f ) ?    0.0f
 8003fd8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004014 <HTS221_H_ReadHumidity+0xd8>
  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8003fdc:	ee70 7a27 	vadd.f32	s15, s0, s15
  tmp_f *= 10.0f;
 8003fe0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003fe4:	ee67 7a80 	vmul.f32	s15, s15, s0
        : ( tmp_f <    0.0f ) ?    0.0f
 8003fe8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff0:	dc0d      	bgt.n	800400e <HTS221_H_ReadHumidity+0xd2>
        : tmp_f;
 8003ff2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003ff6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004018 <HTS221_H_ReadHumidity+0xdc>
 8003ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffe:	bf48      	it	mi
 8004000:	eef0 7a47 	vmovmi.f32	s15, s14
}
 8004004:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8004008:	b002      	add	sp, #8
 800400a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        : ( tmp_f <    0.0f ) ?    0.0f
 800400e:	eef0 7a47 	vmov.f32	s15, s14
 8004012:	e7f7      	b.n	8004004 <HTS221_H_ReadHumidity+0xc8>
 8004014:	447a0000 	.word	0x447a0000
 8004018:	00000000 	.word	0x00000000

0800401c <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800401c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8004020:	fa5f f880 	uxtb.w	r8, r0
 8004024:	aa01      	add	r2, sp, #4
 8004026:	2302      	movs	r3, #2
 8004028:	21b2      	movs	r1, #178	; 0xb2
 800402a:	4640      	mov	r0, r8
 800402c:	f7ff fe88 	bl	8003d40 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8004030:	2135      	movs	r1, #53	; 0x35
 8004032:	4640      	mov	r0, r8
 8004034:	f7ff fe66 	bl	8003d04 <SENSOR_IO_Read>

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8004038:	0206      	lsls	r6, r0, #8
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800403a:	f89d 5005 	ldrb.w	r5, [sp, #5]
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800403e:	f406 7340 	and.w	r3, r6, #768	; 0x300
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8004042:	0180      	lsls	r0, r0, #6
  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8004044:	f89d 6004 	ldrb.w	r6, [sp, #4]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8004048:	f400 7040 	and.w	r0, r0, #768	; 0x300
  T0_degC = T0_degC_x8_u16 >> 3;
 800404c:	431e      	orrs	r6, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 800404e:	4328      	orrs	r0, r5

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8004050:	2304      	movs	r3, #4
 8004052:	eb0d 0203 	add.w	r2, sp, r3
  T1_degC = T1_degC_x8_u16 >> 3;
 8004056:	08c5      	lsrs	r5, r0, #3
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8004058:	21bc      	movs	r1, #188	; 0xbc
 800405a:	4640      	mov	r0, r8
 800405c:	f7ff fe70 	bl	8003d40 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8004060:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8004064:	f89d 7004 	ldrb.w	r7, [sp, #4]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8004068:	f89d 3007 	ldrb.w	r3, [sp, #7]
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800406c:	ea47 2704 	orr.w	r7, r7, r4, lsl #8
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8004070:	f89d 4006 	ldrb.w	r4, [sp, #6]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8004074:	aa01      	add	r2, sp, #4
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8004076:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800407a:	21aa      	movs	r1, #170	; 0xaa
 800407c:	2302      	movs	r3, #2
 800407e:	4640      	mov	r0, r8
 8004080:	f7ff fe5e 	bl	8003d40 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8004084:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004088:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800408c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8004090:	b23f      	sxth	r7, r7

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8004092:	b21b      	sxth	r3, r3
 8004094:	1bdb      	subs	r3, r3, r7
  T0_degC = T0_degC_x8_u16 >> 3;
 8004096:	08f6      	lsrs	r6, r6, #3
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8004098:	ee07 3a90 	vmov	s15, r3
 800409c:	1bab      	subs	r3, r5, r6
 800409e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040a2:	ee07 3a90 	vmov	s15, r3
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80040a6:	b224      	sxth	r4, r4
  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80040a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040ac:	1be4      	subs	r4, r4, r7
 80040ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b2:	ee07 4a10 	vmov	s14, r4
 80040b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80040ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80040be:	ee07 6a90 	vmov	s15, r6
 80040c2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15

  return tmp_f;
}
 80040c6:	ee36 0a80 	vadd.f32	s0, s13, s0
 80040ca:	b002      	add	sp, #8
 80040cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080040d0 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 80040d0:	b507      	push	{r0, r1, r2, lr}
 80040d2:	ab02      	add	r3, sp, #8
 80040d4:	e903 0003 	stmdb	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 80040d8:	2120      	movs	r1, #32
 80040da:	f89d 2000 	ldrb.w	r2, [sp]
 80040de:	203c      	movs	r0, #60	; 0x3c
 80040e0:	f7ff fdf6 	bl	8003cd0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 80040e4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80040e8:	2121      	movs	r1, #33	; 0x21
 80040ea:	203c      	movs	r0, #60	; 0x3c
 80040ec:	f7ff fdf0 	bl	8003cd0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 80040f0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80040f4:	2122      	movs	r1, #34	; 0x22
 80040f6:	203c      	movs	r0, #60	; 0x3c
 80040f8:	f7ff fdea 	bl	8003cd0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 80040fc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004100:	2123      	movs	r1, #35	; 0x23
 8004102:	203c      	movs	r0, #60	; 0x3c
 8004104:	f7ff fde4 	bl	8003cd0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8004108:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800410c:	2124      	movs	r1, #36	; 0x24
 800410e:	203c      	movs	r0, #60	; 0x3c
}
 8004110:	b003      	add	sp, #12
 8004112:	f85d eb04 	ldr.w	lr, [sp], #4
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8004116:	f7ff bddb 	b.w	8003cd0 <SENSOR_IO_Write>

0800411a <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 800411a:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800411c:	2122      	movs	r1, #34	; 0x22
 800411e:	203c      	movs	r0, #60	; 0x3c
 8004120:	f7ff fdf0 	bl	8003d04 <SENSOR_IO_Read>

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8004124:	f000 02fc 	and.w	r2, r0, #252	; 0xfc

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8004128:	f042 0203 	orr.w	r2, r2, #3
 800412c:	2122      	movs	r1, #34	; 0x22
 800412e:	203c      	movs	r0, #60	; 0x3c
}
 8004130:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8004134:	f7ff bdcc 	b.w	8003cd0 <SENSOR_IO_Write>

08004138 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8004138:	b510      	push	{r4, lr}
  uint8_t ctrl = 0;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800413a:	2122      	movs	r1, #34	; 0x22
{  
 800413c:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800413e:	203c      	movs	r0, #60	; 0x3c
 8004140:	f7ff fde0 	bl	8003d04 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8004144:	f000 02df 	and.w	r2, r0, #223	; 0xdf

  /* Set Low Power Mode */
  if(status)
 8004148:	b10c      	cbz	r4, 800414e <LIS3MDL_MagLowPower+0x16>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 800414a:	f042 0220 	orr.w	r2, r2, #32
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800414e:	2122      	movs	r1, #34	; 0x22
 8004150:	203c      	movs	r0, #60	; 0x3c
}
 8004152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8004156:	f7ff bdbb 	b.w	8003cd0 <SENSOR_IO_Write>

0800415a <LIS3MDL_MagReadID>:
{
 800415a:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 800415c:	f7ff fdb6 	bl	8003ccc <SENSOR_IO_Init>
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8004160:	210f      	movs	r1, #15
 8004162:	203c      	movs	r0, #60	; 0x3c
}
 8004164:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8004168:	f7ff bdcc 	b.w	8003d04 <SENSOR_IO_Read>

0800416c <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 800416c:	b530      	push	{r4, r5, lr}
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800416e:	2121      	movs	r1, #33	; 0x21
{
 8004170:	b085      	sub	sp, #20
 8004172:	4605      	mov	r5, r0
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8004174:	203c      	movs	r0, #60	; 0x3c
 8004176:	f7ff fdc5 	bl	8003d04 <SENSOR_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800417a:	2306      	movs	r3, #6
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800417c:	4604      	mov	r4, r0
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800417e:	aa02      	add	r2, sp, #8
 8004180:	21a8      	movs	r1, #168	; 0xa8
 8004182:	203c      	movs	r0, #60	; 0x3c
 8004184:	f7ff fddc 	bl	8003d40 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8004188:	f89d 2009 	ldrb.w	r2, [sp, #9]
 800418c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004190:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004194:	f8ad 3000 	strh.w	r3, [sp]
 8004198:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800419c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80041a0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80041a4:	f8ad 3002 	strh.w	r3, [sp, #2]
 80041a8:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80041ac:	f89d 300c 	ldrb.w	r3, [sp, #12]
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 80041b0:	f004 0460 	and.w	r4, r4, #96	; 0x60
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80041b4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
  switch(ctrlm & 0x60)
 80041b8:	2c20      	cmp	r4, #32
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80041ba:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch(ctrlm & 0x60)
 80041be:	d021      	beq.n	8004204 <LIS3MDL_MagReadXYZ+0x98>
 80041c0:	d803      	bhi.n	80041ca <LIS3MDL_MagReadXYZ+0x5e>
 80041c2:	b14c      	cbz	r4, 80041d8 <LIS3MDL_MagReadXYZ+0x6c>
  float sensitivity = 0;
 80041c4:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004210 <LIS3MDL_MagReadXYZ+0xa4>
 80041c8:	e008      	b.n	80041dc <LIS3MDL_MagReadXYZ+0x70>
  switch(ctrlm & 0x60)
 80041ca:	2c40      	cmp	r4, #64	; 0x40
 80041cc:	d01d      	beq.n	800420a <LIS3MDL_MagReadXYZ+0x9e>
 80041ce:	2c60      	cmp	r4, #96	; 0x60
 80041d0:	d1f8      	bne.n	80041c4 <LIS3MDL_MagReadXYZ+0x58>
    break;
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
    break;
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80041d2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004214 <LIS3MDL_MagReadXYZ+0xa8>
    break;    
 80041d6:	e001      	b.n	80041dc <LIS3MDL_MagReadXYZ+0x70>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80041d8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004218 <LIS3MDL_MagReadXYZ+0xac>
 80041dc:	2200      	movs	r2, #0
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80041de:	f93d 3012 	ldrsh.w	r3, [sp, r2, lsl #1]
 80041e2:	ee07 3a90 	vmov	s15, r3
 80041e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80041f2:	ee17 3a90 	vmov	r3, s15
 80041f6:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
 80041fa:	3201      	adds	r2, #1
  for(i=0; i<3; i++)
 80041fc:	2a03      	cmp	r2, #3
 80041fe:	d1ee      	bne.n	80041de <LIS3MDL_MagReadXYZ+0x72>
  }
}
 8004200:	b005      	add	sp, #20
 8004202:	bd30      	pop	{r4, r5, pc}
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8004204:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800421c <LIS3MDL_MagReadXYZ+0xb0>
    break;
 8004208:	e7e8      	b.n	80041dc <LIS3MDL_MagReadXYZ+0x70>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 800420a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004220 <LIS3MDL_MagReadXYZ+0xb4>
    break;
 800420e:	e7e5      	b.n	80041dc <LIS3MDL_MagReadXYZ+0x70>
 8004210:	00000000 	.word	0x00000000
 8004214:	3f147ae1 	.word	0x3f147ae1
 8004218:	3e0f5c29 	.word	0x3e0f5c29
 800421c:	3e947ae1 	.word	0x3e947ae1
 8004220:	3edc28f6 	.word	0x3edc28f6

08004224 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8004224:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004226:	2400      	movs	r4, #0
  uint32_t tmp = 0;
  uint8_t i;

  for(i = 0; i < 3; i++)
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8004228:	b2c6      	uxtb	r6, r0
 800422a:	ad01      	add	r5, sp, #4
 800422c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8004230:	b2c9      	uxtb	r1, r1
 8004232:	4630      	mov	r0, r6
 8004234:	f7ff fd66 	bl	8003d04 <SENSOR_IO_Read>
 8004238:	5528      	strb	r0, [r5, r4]
 800423a:	3401      	adds	r4, #1
  for(i = 0; i < 3; i++)
 800423c:	2c03      	cmp	r4, #3
 800423e:	d1f5      	bne.n	800422c <LPS22HB_P_ReadPressure+0x8>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8004240:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004244:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004248:	041b      	lsls	r3, r3, #16
 800424a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800424e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004252:	4313      	orrs	r3, r2

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8004254:	021a      	lsls	r2, r3, #8
    tmp |= 0xFF000000;
 8004256:	bf48      	it	mi
 8004258:	f043 437f 	orrmi.w	r3, r3, #4278190080	; 0xff000000

  raw_press = ((int32_t)tmp);

  raw_press = (raw_press * 100) / 4096;
 800425c:	2264      	movs	r2, #100	; 0x64
 800425e:	4353      	muls	r3, r2
 8004260:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004264:	fb93 f3f2 	sdiv	r3, r3, r2

  return (float)((float)raw_press / 100.0f);
 8004268:	ee07 3a90 	vmov	s15, r3
 800426c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 8004270:	eddf 7a02 	vldr	s15, [pc, #8]	; 800427c <LPS22HB_P_ReadPressure+0x58>
 8004274:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8004278:	b002      	add	sp, #8
 800427a:	bd70      	pop	{r4, r5, r6, pc}
 800427c:	42c80000 	.word	0x42c80000

08004280 <LPS22HB_T_ReadTemp>:
  * @brief  Read temperature value of LPS22HB
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float LPS22HB_T_ReadTemp(uint16_t DeviceAddr)
{
 8004280:	b538      	push	{r3, r4, r5, lr}
  uint16_t tmp;
  uint8_t i;

  for(i = 0; i < 2; i++)
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_TEMP_OUT_L_REG + i));
 8004282:	b2c5      	uxtb	r5, r0
 8004284:	212b      	movs	r1, #43	; 0x2b
 8004286:	4628      	mov	r0, r5
 8004288:	f7ff fd3c 	bl	8003d04 <SENSOR_IO_Read>
 800428c:	212c      	movs	r1, #44	; 0x2c
 800428e:	4604      	mov	r4, r0
 8004290:	4628      	mov	r0, r5
 8004292:	f7ff fd37 	bl	8003d04 <SENSOR_IO_Read>
  }

  /* Build the raw tmp */
  tmp = (((uint16_t)buffer[1]) << 8) + (uint16_t)buffer[0];
 8004296:	eb04 2000 	add.w	r0, r4, r0, lsl #8

  raw_data = (tmp * 10) / 100;
 800429a:	b280      	uxth	r0, r0
 800429c:	240a      	movs	r4, #10
 800429e:	fb90 f0f4 	sdiv	r0, r0, r4
  
  return ((float)(raw_data / 10.0f));
 80042a2:	b203      	sxth	r3, r0
 80042a4:	ee00 3a10 	vmov	s0, r3
 80042a8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
 80042ac:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80042b0:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80042b4:	bd38      	pop	{r3, r4, r5, pc}

080042b6 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80042b6:	b510      	push	{r4, lr}
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80042b8:	b2c4      	uxtb	r4, r0
 80042ba:	211a      	movs	r1, #26
 80042bc:	4620      	mov	r0, r4
 80042be:	f7ff fd21 	bl	8003d04 <SENSOR_IO_Read>

  tmp &= ~LPS22HB_LCEN_MASK;
 80042c2:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
  tmp |= (uint8_t)0x01; /* Set low current mode */

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80042c6:	f042 0201 	orr.w	r2, r2, #1
 80042ca:	4620      	mov	r0, r4
 80042cc:	211a      	movs	r1, #26
 80042ce:	f7ff fcff 	bl	8003cd0 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80042d2:	2110      	movs	r1, #16
 80042d4:	4620      	mov	r0, r4
 80042d6:	f7ff fd15 	bl	8003d04 <SENSOR_IO_Read>
 80042da:	f000 028d 	and.w	r2, r0, #141	; 0x8d
  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
  tmp |= ((uint8_t)0x02);

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80042de:	f042 0232 	orr.w	r2, r2, #50	; 0x32
 80042e2:	4620      	mov	r0, r4
 80042e4:	2110      	movs	r1, #16
}  
 80042e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80042ea:	f7ff bcf1 	b.w	8003cd0 <SENSOR_IO_Write>

080042ee <LPS22HB_P_Init>:
  LPS22HB_Init(DeviceAddr);
 80042ee:	f7ff bfe2 	b.w	80042b6 <LPS22HB_Init>

080042f2 <LPS22HB_T_Init>:
  LPS22HB_Init(DeviceAddr);
 80042f2:	f7ff bfe0 	b.w	80042b6 <LPS22HB_Init>

080042f6 <LPS22HB_P_ReadID>:
{  
 80042f6:	b510      	push	{r4, lr}
 80042f8:	4604      	mov	r4, r0
  SENSOR_IO_Init();  
 80042fa:	f7ff fce7 	bl	8003ccc <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80042fe:	b2e0      	uxtb	r0, r4
 8004300:	210f      	movs	r1, #15
}
 8004302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8004306:	f7ff bcfd 	b.w	8003d04 <SENSOR_IO_Read>

0800430a <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800430a:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800430c:	2110      	movs	r1, #16
{  
 800430e:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004310:	20d4      	movs	r0, #212	; 0xd4
 8004312:	f7ff fcf7 	bl	8003d04 <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 8004316:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 800431a:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	2110      	movs	r1, #16
 8004320:	20d4      	movs	r0, #212	; 0xd4
 8004322:	f7ff fcd5 	bl	8003cd0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8004326:	2112      	movs	r1, #18
 8004328:	20d4      	movs	r0, #212	; 0xd4
 800432a:	f7ff fceb 	bl	8003d04 <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 800432e:	f000 02bb 	and.w	r2, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8004332:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 8004336:	2112      	movs	r1, #18
 8004338:	20d4      	movs	r0, #212	; 0xd4
}
 800433a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800433e:	f7ff bcc7 	b.w	8003cd0 <SENSOR_IO_Write>

08004342 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8004342:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004344:	2110      	movs	r1, #16
 8004346:	20d4      	movs	r0, #212	; 0xd4
 8004348:	f7ff fcdc 	bl	8003d04 <SENSOR_IO_Read>

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800434c:	2110      	movs	r1, #16
 800434e:	f000 020f 	and.w	r2, r0, #15
}
 8004352:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8004356:	20d4      	movs	r0, #212	; 0xd4
 8004358:	f7ff bcba 	b.w	8003cd0 <SENSOR_IO_Write>

0800435c <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800435c:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800435e:	2115      	movs	r1, #21
{
 8004360:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8004362:	20d4      	movs	r0, #212	; 0xd4
 8004364:	f7ff fcce 	bl	8003d04 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8004368:	f000 02ef 	and.w	r2, r0, #239	; 0xef

  /* Set Low Power Mode */
  if(status)
 800436c:	b10c      	cbz	r4, 8004372 <LSM6DSL_AccLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800436e:	f042 0210 	orr.w	r2, r2, #16
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8004372:	2115      	movs	r1, #21
 8004374:	20d4      	movs	r0, #212	; 0xd4
}
 8004376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800437a:	f7ff bca9 	b.w	8003cd0 <SENSOR_IO_Write>

0800437e <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 800437e:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8004380:	2111      	movs	r1, #17
{  
 8004382:	4604      	mov	r4, r0
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8004384:	20d4      	movs	r0, #212	; 0xd4
 8004386:	f7ff fcbd 	bl	8003d04 <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 800438a:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 800438e:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	2111      	movs	r1, #17
 8004394:	20d4      	movs	r0, #212	; 0xd4
 8004396:	f7ff fc9b 	bl	8003cd0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800439a:	2112      	movs	r1, #18
 800439c:	20d4      	movs	r0, #212	; 0xd4
 800439e:	f7ff fcb1 	bl	8003d04 <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 80043a2:	f000 02bb 	and.w	r2, r0, #187	; 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80043a6:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 80043aa:	2112      	movs	r1, #18
 80043ac:	20d4      	movs	r0, #212	; 0xd4
}
 80043ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80043b2:	f7ff bc8d 	b.w	8003cd0 <SENSOR_IO_Write>

080043b6 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80043b6:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80043b8:	2111      	movs	r1, #17
 80043ba:	20d4      	movs	r0, #212	; 0xd4
 80043bc:	f7ff fca2 	bl	8003d04 <SENSOR_IO_Read>

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80043c0:	2111      	movs	r1, #17
 80043c2:	f000 020f 	and.w	r2, r0, #15
}
 80043c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80043ca:	20d4      	movs	r0, #212	; 0xd4
 80043cc:	f7ff bc80 	b.w	8003cd0 <SENSOR_IO_Write>

080043d0 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80043d0:	b510      	push	{r4, lr}
  uint8_t ctrl = 0x00;
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80043d2:	2116      	movs	r1, #22
{  
 80043d4:	4604      	mov	r4, r0
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80043d6:	20d4      	movs	r0, #212	; 0xd4
 80043d8:	f7ff fc94 	bl	8003d04 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80043dc:	f000 027f 	and.w	r2, r0, #127	; 0x7f

  /* Set Low Power Mode */
  if(status)
 80043e0:	b10c      	cbz	r4, 80043e6 <LSM6DSL_GyroLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80043e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80043e6:	2116      	movs	r1, #22
 80043e8:	20d4      	movs	r0, #212	; 0xd4
}
 80043ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80043ee:	f7ff bc6f 	b.w	8003cd0 <SENSOR_IO_Write>

080043f2 <LSM6DSL_GyroReadID>:
{
 80043f2:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 80043f4:	f7ff fc6a 	bl	8003ccc <SENSOR_IO_Init>
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80043f8:	210f      	movs	r1, #15
 80043fa:	20d4      	movs	r0, #212	; 0xd4
}
 80043fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8004400:	f7ff bc80 	b.w	8003d04 <SENSOR_IO_Read>

08004404 <LSM6DSL_AccReadID>:
 8004404:	f7ff bff5 	b.w	80043f2 <LSM6DSL_GyroReadID>

08004408 <LSM6DSL_AccReadXYZ>:
{
 8004408:	b530      	push	{r4, r5, lr}
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800440a:	2110      	movs	r1, #16
{
 800440c:	b085      	sub	sp, #20
 800440e:	4605      	mov	r5, r0
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004410:	20d4      	movs	r0, #212	; 0xd4
 8004412:	f7ff fc77 	bl	8003d04 <SENSOR_IO_Read>
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8004416:	2306      	movs	r3, #6
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8004418:	4604      	mov	r4, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800441a:	aa02      	add	r2, sp, #8
 800441c:	2128      	movs	r1, #40	; 0x28
 800441e:	20d4      	movs	r0, #212	; 0xd4
 8004420:	f7ff fc8e 	bl	8003d40 <SENSOR_IO_ReadMultiple>
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8004424:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8004428:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800442c:	4817      	ldr	r0, [pc, #92]	; (800448c <LSM6DSL_AccReadXYZ+0x84>)
 800442e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004432:	f8ad 3000 	strh.w	r3, [sp]
 8004436:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800443a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800443e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004442:	f8ad 3002 	strh.w	r3, [sp, #2]
 8004446:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800444a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800444e:	f004 040c 	and.w	r4, r4, #12
 8004452:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8004456:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800445a:	ed90 7a00 	vldr	s14, [r0]
 800445e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004462:	2200      	movs	r2, #0
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8004464:	f93d 3012 	ldrsh.w	r3, [sp, r2, lsl #1]
 8004468:	ee07 3a90 	vmov	s15, r3
 800446c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004470:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004474:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004478:	ee17 3a90 	vmov	r3, s15
 800447c:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
 8004480:	3201      	adds	r2, #1
  for(i=0; i<3; i++)
 8004482:	2a03      	cmp	r2, #3
 8004484:	d1ee      	bne.n	8004464 <LSM6DSL_AccReadXYZ+0x5c>
}
 8004486:	b005      	add	sp, #20
 8004488:	bd30      	pop	{r4, r5, pc}
 800448a:	bf00      	nop
 800448c:	08008928 	.word	0x08008928

08004490 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8004490:	b530      	push	{r4, r5, lr}
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8004492:	2111      	movs	r1, #17
{
 8004494:	b085      	sub	sp, #20
 8004496:	4604      	mov	r4, r0
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8004498:	20d4      	movs	r0, #212	; 0xd4
 800449a:	f7ff fc33 	bl	8003d04 <SENSOR_IO_Read>
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800449e:	2306      	movs	r3, #6
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80044a0:	4605      	mov	r5, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80044a2:	aa02      	add	r2, sp, #8
 80044a4:	2122      	movs	r1, #34	; 0x22
 80044a6:	20d4      	movs	r0, #212	; 0xd4
 80044a8:	f7ff fc4a 	bl	8003d40 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80044ac:	f89d 2009 	ldrb.w	r2, [sp, #9]
 80044b0:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80044b4:	4815      	ldr	r0, [pc, #84]	; (800450c <LSM6DSL_GyroReadXYZAngRate+0x7c>)
 80044b6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80044ba:	f8ad 3000 	strh.w	r3, [sp]
 80044be:	f89d 200b 	ldrb.w	r2, [sp, #11]
 80044c2:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80044c6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80044ca:	f8ad 3002 	strh.w	r3, [sp, #2]
 80044ce:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80044d2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80044d6:	f005 050c 	and.w	r5, r5, #12
 80044da:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80044de:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 80044e2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80044e6:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 80044ea:	2300      	movs	r3, #0
 80044ec:	4620      	mov	r0, r4
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80044ee:	f93d 2013 	ldrsh.w	r2, [sp, r3, lsl #1]
 80044f2:	ee07 2a90 	vmov	s15, r2
 80044f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044fa:	3301      	adds	r3, #1
 80044fc:	ee67 7a87 	vmul.f32	s15, s15, s14
  for(i=0; i<3; i++)
 8004500:	2b03      	cmp	r3, #3
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8004502:	ece0 7a01 	vstmia	r0!, {s15}
  for(i=0; i<3; i++)
 8004506:	d1f2      	bne.n	80044ee <LSM6DSL_GyroReadXYZAngRate+0x5e>
  }
}
 8004508:	b005      	add	sp, #20
 800450a:	bd30      	pop	{r4, r5, pc}
 800450c:	08008928 	.word	0x08008928

08004510 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004510:	490f      	ldr	r1, [pc, #60]	; (8004550 <SystemInit+0x40>)
 8004512:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004516:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800451a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800451e:	4b0d      	ldr	r3, [pc, #52]	; (8004554 <SystemInit+0x44>)
 8004520:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004522:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8004524:	f042 0201 	orr.w	r2, r2, #1
 8004528:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800452a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8004532:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8004536:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8004538:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800453c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004544:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004546:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004548:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800454c:	608b      	str	r3, [r1, #8]
 800454e:	4770      	bx	lr
 8004550:	e000ed00 	.word	0xe000ed00
 8004554:	40021000 	.word	0x40021000

08004558 <HAL_MspInit>:
 8004558:	4770      	bx	lr
	...

0800455c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800455c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800455e:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <HAL_InitTick+0x2c>)
{
 8004560:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004568:	fbb0 f0f3 	udiv	r0, r0, r3
 800456c:	f000 f88c 	bl	8004688 <HAL_SYSTICK_Config>
 8004570:	4604      	mov	r4, r0
 8004572:	b938      	cbnz	r0, 8004584 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8004574:	4602      	mov	r2, r0
 8004576:	4629      	mov	r1, r5
 8004578:	f04f 30ff 	mov.w	r0, #4294967295
 800457c:	f000 f844 	bl	8004608 <HAL_NVIC_SetPriority>
 8004580:	4620      	mov	r0, r4
 8004582:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8004584:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8004586:	bd38      	pop	{r3, r4, r5, pc}
 8004588:	2000052c 	.word	0x2000052c

0800458c <HAL_Init>:
{
 800458c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800458e:	2003      	movs	r0, #3
 8004590:	f000 f828 	bl	80045e4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004594:	200f      	movs	r0, #15
 8004596:	f7ff ffe1 	bl	800455c <HAL_InitTick>
 800459a:	4604      	mov	r4, r0
 800459c:	b918      	cbnz	r0, 80045a6 <HAL_Init+0x1a>
    HAL_MspInit();
 800459e:	f7ff ffdb 	bl	8004558 <HAL_MspInit>
}
 80045a2:	4620      	mov	r0, r4
 80045a4:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80045a6:	2401      	movs	r4, #1
 80045a8:	e7fb      	b.n	80045a2 <HAL_Init+0x16>
	...

080045ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80045ac:	4a02      	ldr	r2, [pc, #8]	; (80045b8 <HAL_IncTick+0xc>)
 80045ae:	6813      	ldr	r3, [r2, #0]
 80045b0:	3301      	adds	r3, #1
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000848 	.word	0x20000848

080045bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80045bc:	4b01      	ldr	r3, [pc, #4]	; (80045c4 <HAL_GetTick+0x8>)
 80045be:	6818      	ldr	r0, [r3, #0]
}
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	20000848 	.word	0x20000848

080045c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045c8:	b538      	push	{r3, r4, r5, lr}
 80045ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80045cc:	f7ff fff6 	bl	80045bc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045d0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80045d2:	4605      	mov	r5, r0
  {
    wait++;
 80045d4:	bf18      	it	ne
 80045d6:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045d8:	f7ff fff0 	bl	80045bc <HAL_GetTick>
 80045dc:	1b40      	subs	r0, r0, r5
 80045de:	4284      	cmp	r4, r0
 80045e0:	d8fa      	bhi.n	80045d8 <HAL_Delay+0x10>
  {
  }
}
 80045e2:	bd38      	pop	{r3, r4, r5, pc}

080045e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045e4:	4a07      	ldr	r2, [pc, #28]	; (8004604 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80045e6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80045ec:	041b      	lsls	r3, r3, #16
 80045ee:	0c1b      	lsrs	r3, r3, #16
 80045f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80045f4:	0200      	lsls	r0, r0, #8
 80045f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80045fe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004600:	60d3      	str	r3, [r2, #12]
 8004602:	4770      	bx	lr
 8004604:	e000ed00 	.word	0xe000ed00

08004608 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004608:	4b17      	ldr	r3, [pc, #92]	; (8004668 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800460a:	b530      	push	{r4, r5, lr}
 800460c:	68dc      	ldr	r4, [r3, #12]
 800460e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004612:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004616:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004618:	2b04      	cmp	r3, #4
 800461a:	bf28      	it	cs
 800461c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800461e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004620:	f04f 0501 	mov.w	r5, #1
 8004624:	fa05 f303 	lsl.w	r3, r5, r3
 8004628:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800462c:	bf8c      	ite	hi
 800462e:	3c03      	subhi	r4, #3
 8004630:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004632:	4019      	ands	r1, r3
 8004634:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004636:	fa05 f404 	lsl.w	r4, r5, r4
 800463a:	3c01      	subs	r4, #1
 800463c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800463e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004640:	ea42 0201 	orr.w	r2, r2, r1
 8004644:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004648:	bfaf      	iteee	ge
 800464a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800464e:	f000 000f 	andlt.w	r0, r0, #15
 8004652:	4b06      	ldrlt	r3, [pc, #24]	; (800466c <HAL_NVIC_SetPriority+0x64>)
 8004654:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004656:	bfa5      	ittet	ge
 8004658:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800465c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800465e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004660:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8004664:	bd30      	pop	{r4, r5, pc}
 8004666:	bf00      	nop
 8004668:	e000ed00 	.word	0xe000ed00
 800466c:	e000ed14 	.word	0xe000ed14

08004670 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004670:	0942      	lsrs	r2, r0, #5
 8004672:	2301      	movs	r3, #1
 8004674:	f000 001f 	and.w	r0, r0, #31
 8004678:	fa03 f000 	lsl.w	r0, r3, r0
 800467c:	4b01      	ldr	r3, [pc, #4]	; (8004684 <HAL_NVIC_EnableIRQ+0x14>)
 800467e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004682:	4770      	bx	lr
 8004684:	e000e100 	.word	0xe000e100

08004688 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004688:	3801      	subs	r0, #1
 800468a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800468e:	d20a      	bcs.n	80046a6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004690:	4b06      	ldr	r3, [pc, #24]	; (80046ac <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004692:	4a07      	ldr	r2, [pc, #28]	; (80046b0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004694:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004696:	21f0      	movs	r1, #240	; 0xf0
 8004698:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800469c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800469e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046a0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80046a6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	e000e010 	.word	0xe000e010
 80046b0:	e000ed00 	.word	0xe000ed00

080046b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b8:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046ba:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046bc:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004868 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80046c0:	4c67      	ldr	r4, [pc, #412]	; (8004860 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046c2:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 80046c4:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046c6:	9a01      	ldr	r2, [sp, #4]
 80046c8:	40da      	lsrs	r2, r3
 80046ca:	d102      	bne.n	80046d2 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 80046cc:	b005      	add	sp, #20
 80046ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046d2:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 80046d4:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046d6:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 80046d8:	ea12 0e06 	ands.w	lr, r2, r6
 80046dc:	f000 80b1 	beq.w	8004842 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046e0:	684a      	ldr	r2, [r1, #4]
 80046e2:	f022 0710 	bic.w	r7, r2, #16
 80046e6:	2f02      	cmp	r7, #2
 80046e8:	d116      	bne.n	8004718 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 80046ea:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80046ee:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046f2:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80046f6:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046fa:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80046fe:	f04f 0c0f 	mov.w	ip, #15
 8004702:	fa0c fc0a 	lsl.w	ip, ip, sl
 8004706:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800470a:	690d      	ldr	r5, [r1, #16]
 800470c:	fa05 f50a 	lsl.w	r5, r5, sl
 8004710:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8004714:	f8c9 5020 	str.w	r5, [r9, #32]
 8004718:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800471c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800471e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004722:	fa05 f50c 	lsl.w	r5, r5, ip
 8004726:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004728:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800472c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004730:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004734:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004736:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800473a:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800473c:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004740:	d811      	bhi.n	8004766 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8004742:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004744:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004748:	68cf      	ldr	r7, [r1, #12]
 800474a:	fa07 f70c 	lsl.w	r7, r7, ip
 800474e:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8004752:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004754:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004756:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800475a:	f3c2 1700 	ubfx	r7, r2, #4, #1
 800475e:	409f      	lsls	r7, r3
 8004760:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8004764:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004766:	f1ba 0f03 	cmp.w	sl, #3
 800476a:	d107      	bne.n	800477c <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 800476c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800476e:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8004772:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8004776:	409f      	lsls	r7, r3
 8004778:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 800477a:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 800477c:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800477e:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004780:	688e      	ldr	r6, [r1, #8]
 8004782:	fa06 f60c 	lsl.w	r6, r6, ip
 8004786:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8004788:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800478a:	00d5      	lsls	r5, r2, #3
 800478c:	d559      	bpl.n	8004842 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800478e:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8004792:	f045 0501 	orr.w	r5, r5, #1
 8004796:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 800479a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 800479e:	f023 0603 	bic.w	r6, r3, #3
 80047a2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80047a6:	f005 0501 	and.w	r5, r5, #1
 80047aa:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80047ae:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80047b0:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047b4:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80047b6:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80047b8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80047bc:	270f      	movs	r7, #15
 80047be:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80047c2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80047c6:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80047ca:	d03c      	beq.n	8004846 <HAL_GPIO_Init+0x192>
 80047cc:	4d25      	ldr	r5, [pc, #148]	; (8004864 <HAL_GPIO_Init+0x1b0>)
 80047ce:	42a8      	cmp	r0, r5
 80047d0:	d03b      	beq.n	800484a <HAL_GPIO_Init+0x196>
 80047d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80047d6:	42a8      	cmp	r0, r5
 80047d8:	d039      	beq.n	800484e <HAL_GPIO_Init+0x19a>
 80047da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80047de:	42a8      	cmp	r0, r5
 80047e0:	d037      	beq.n	8004852 <HAL_GPIO_Init+0x19e>
 80047e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80047e6:	42a8      	cmp	r0, r5
 80047e8:	d035      	beq.n	8004856 <HAL_GPIO_Init+0x1a2>
 80047ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80047ee:	42a8      	cmp	r0, r5
 80047f0:	d033      	beq.n	800485a <HAL_GPIO_Init+0x1a6>
 80047f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80047f6:	42a8      	cmp	r0, r5
 80047f8:	bf14      	ite	ne
 80047fa:	2507      	movne	r5, #7
 80047fc:	2506      	moveq	r5, #6
 80047fe:	fa05 f50c 	lsl.w	r5, r5, ip
 8004802:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004804:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8004806:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8004808:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800480c:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 800480e:	bf54      	ite	pl
 8004810:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8004812:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8004816:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8004818:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800481a:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 800481c:	bf54      	ite	pl
 800481e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8004820:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8004824:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8004826:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004828:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 800482a:	bf54      	ite	pl
 800482c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800482e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8004832:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8004834:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004836:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8004838:	bf54      	ite	pl
 800483a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800483c:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8004840:	60e5      	str	r5, [r4, #12]
    position++;
 8004842:	3301      	adds	r3, #1
 8004844:	e73f      	b.n	80046c6 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004846:	2500      	movs	r5, #0
 8004848:	e7d9      	b.n	80047fe <HAL_GPIO_Init+0x14a>
 800484a:	2501      	movs	r5, #1
 800484c:	e7d7      	b.n	80047fe <HAL_GPIO_Init+0x14a>
 800484e:	2502      	movs	r5, #2
 8004850:	e7d5      	b.n	80047fe <HAL_GPIO_Init+0x14a>
 8004852:	2503      	movs	r5, #3
 8004854:	e7d3      	b.n	80047fe <HAL_GPIO_Init+0x14a>
 8004856:	2504      	movs	r5, #4
 8004858:	e7d1      	b.n	80047fe <HAL_GPIO_Init+0x14a>
 800485a:	2505      	movs	r5, #5
 800485c:	e7cf      	b.n	80047fe <HAL_GPIO_Init+0x14a>
 800485e:	bf00      	nop
 8004860:	40010400 	.word	0x40010400
 8004864:	48000400 	.word	0x48000400
 8004868:	40021000 	.word	0x40021000

0800486c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800486c:	b10a      	cbz	r2, 8004872 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800486e:	6181      	str	r1, [r0, #24]
 8004870:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004872:	6281      	str	r1, [r0, #40]	; 0x28
 8004874:	4770      	bx	lr

08004876 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004876:	6803      	ldr	r3, [r0, #0]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 800487c:	bf44      	itt	mi
 800487e:	2200      	movmi	r2, #0
 8004880:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004882:	699a      	ldr	r2, [r3, #24]
 8004884:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004886:	bf5e      	ittt	pl
 8004888:	699a      	ldrpl	r2, [r3, #24]
 800488a:	f042 0201 	orrpl.w	r2, r2, #1
 800488e:	619a      	strpl	r2, [r3, #24]
 8004890:	4770      	bx	lr

08004892 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004892:	b530      	push	{r4, r5, lr}
 8004894:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004896:	6805      	ldr	r5, [r0, #0]
 8004898:	4323      	orrs	r3, r4
 800489a:	0d64      	lsrs	r4, r4, #21
 800489c:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 80048a0:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 80048a4:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 80048a8:	6868      	ldr	r0, [r5, #4]
 80048aa:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80048ae:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 80048b2:	4319      	orrs	r1, r3
 80048b4:	f044 0403 	orr.w	r4, r4, #3
 80048b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80048bc:	ea20 0404 	bic.w	r4, r0, r4
 80048c0:	4321      	orrs	r1, r4
 80048c2:	6069      	str	r1, [r5, #4]
 80048c4:	bd30      	pop	{r4, r5, pc}

080048c6 <I2C_WaitOnFlagUntilTimeout>:
{
 80048c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ca:	9f06      	ldr	r7, [sp, #24]
 80048cc:	4604      	mov	r4, r0
 80048ce:	4688      	mov	r8, r1
 80048d0:	4616      	mov	r6, r2
 80048d2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048d4:	6822      	ldr	r2, [r4, #0]
 80048d6:	6993      	ldr	r3, [r2, #24]
 80048d8:	ea38 0303 	bics.w	r3, r8, r3
 80048dc:	bf0c      	ite	eq
 80048de:	2301      	moveq	r3, #1
 80048e0:	2300      	movne	r3, #0
 80048e2:	42b3      	cmp	r3, r6
 80048e4:	d002      	beq.n	80048ec <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80048e6:	2000      	movs	r0, #0
}
 80048e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80048ec:	1c6b      	adds	r3, r5, #1
 80048ee:	d0f2      	beq.n	80048d6 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f0:	f7ff fe64 	bl	80045bc <HAL_GetTick>
 80048f4:	1bc0      	subs	r0, r0, r7
 80048f6:	4285      	cmp	r5, r0
 80048f8:	d301      	bcc.n	80048fe <I2C_WaitOnFlagUntilTimeout+0x38>
 80048fa:	2d00      	cmp	r5, #0
 80048fc:	d1ea      	bne.n	80048d4 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004900:	f043 0320 	orr.w	r3, r3, #32
 8004904:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004906:	2320      	movs	r3, #32
 8004908:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800490c:	2300      	movs	r3, #0
 800490e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004912:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004916:	2001      	movs	r0, #1
 8004918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800491c <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800491c:	6803      	ldr	r3, [r0, #0]
{
 800491e:	b570      	push	{r4, r5, r6, lr}
 8004920:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004922:	6998      	ldr	r0, [r3, #24]
 8004924:	f010 0010 	ands.w	r0, r0, #16
{
 8004928:	460d      	mov	r5, r1
 800492a:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800492c:	d116      	bne.n	800495c <I2C_IsAcknowledgeFailed+0x40>
 800492e:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8004930:	1c69      	adds	r1, r5, #1
 8004932:	d014      	beq.n	800495e <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004934:	f7ff fe42 	bl	80045bc <HAL_GetTick>
 8004938:	1b80      	subs	r0, r0, r6
 800493a:	4285      	cmp	r5, r0
 800493c:	d300      	bcc.n	8004940 <I2C_IsAcknowledgeFailed+0x24>
 800493e:	b96d      	cbnz	r5, 800495c <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004940:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004942:	f043 0320 	orr.w	r3, r3, #32
 8004946:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004948:	2320      	movs	r3, #32
 800494a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800494e:	2300      	movs	r3, #0
 8004950:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8004954:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8004958:	2001      	movs	r0, #1
}
 800495a:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	6999      	ldr	r1, [r3, #24]
 8004960:	068a      	lsls	r2, r1, #26
 8004962:	d5e5      	bpl.n	8004930 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004964:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004966:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004968:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800496a:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800496c:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800496e:	f7ff ff82 	bl	8004876 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8004972:	6822      	ldr	r2, [r4, #0]
 8004974:	6853      	ldr	r3, [r2, #4]
 8004976:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800497a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800497e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004982:	f023 0301 	bic.w	r3, r3, #1
 8004986:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004988:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800498a:	f043 0304 	orr.w	r3, r3, #4
 800498e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004990:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8004994:	e7db      	b.n	800494e <I2C_IsAcknowledgeFailed+0x32>

08004996 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8004996:	b570      	push	{r4, r5, r6, lr}
 8004998:	4604      	mov	r4, r0
 800499a:	460d      	mov	r5, r1
 800499c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	079b      	lsls	r3, r3, #30
 80049a4:	d501      	bpl.n	80049aa <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80049a6:	2000      	movs	r0, #0
 80049a8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80049aa:	4632      	mov	r2, r6
 80049ac:	4629      	mov	r1, r5
 80049ae:	4620      	mov	r0, r4
 80049b0:	f7ff ffb4 	bl	800491c <I2C_IsAcknowledgeFailed>
 80049b4:	b9a0      	cbnz	r0, 80049e0 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80049b6:	1c6a      	adds	r2, r5, #1
 80049b8:	d0f1      	beq.n	800499e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ba:	f7ff fdff 	bl	80045bc <HAL_GetTick>
 80049be:	1b80      	subs	r0, r0, r6
 80049c0:	4285      	cmp	r5, r0
 80049c2:	d301      	bcc.n	80049c8 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80049c4:	2d00      	cmp	r5, #0
 80049c6:	d1ea      	bne.n	800499e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80049ca:	f043 0320 	orr.w	r3, r3, #32
 80049ce:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80049d0:	2320      	movs	r3, #32
 80049d2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d6:	2300      	movs	r3, #0
 80049d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80049dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80049e0:	2001      	movs	r0, #1
}
 80049e2:	bd70      	pop	{r4, r5, r6, pc}

080049e4 <I2C_RequestMemoryWrite>:
{
 80049e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049e6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80049e8:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80049ea:	4b16      	ldr	r3, [pc, #88]	; (8004a44 <I2C_RequestMemoryWrite+0x60>)
 80049ec:	9300      	str	r3, [sp, #0]
{
 80049ee:	4605      	mov	r5, r0
 80049f0:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80049f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049f6:	b2fa      	uxtb	r2, r7
 80049f8:	f7ff ff4b 	bl	8004892 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049fc:	4632      	mov	r2, r6
 80049fe:	9908      	ldr	r1, [sp, #32]
 8004a00:	4628      	mov	r0, r5
 8004a02:	f7ff ffc8 	bl	8004996 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a06:	b110      	cbz	r0, 8004a0e <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 8004a08:	2001      	movs	r0, #1
}
 8004a0a:	b003      	add	sp, #12
 8004a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a0e:	2f01      	cmp	r7, #1
 8004a10:	682b      	ldr	r3, [r5, #0]
 8004a12:	d10c      	bne.n	8004a2e <I2C_RequestMemoryWrite+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a14:	b2e4      	uxtb	r4, r4
 8004a16:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a18:	9b08      	ldr	r3, [sp, #32]
 8004a1a:	9600      	str	r6, [sp, #0]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2180      	movs	r1, #128	; 0x80
 8004a20:	4628      	mov	r0, r5
 8004a22:	f7ff ff50 	bl	80048c6 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8004a26:	3000      	adds	r0, #0
 8004a28:	bf18      	it	ne
 8004a2a:	2001      	movne	r0, #1
 8004a2c:	e7ed      	b.n	8004a0a <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a2e:	0a22      	lsrs	r2, r4, #8
 8004a30:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a32:	9908      	ldr	r1, [sp, #32]
 8004a34:	4632      	mov	r2, r6
 8004a36:	4628      	mov	r0, r5
 8004a38:	f7ff ffad 	bl	8004996 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	d1e3      	bne.n	8004a08 <I2C_RequestMemoryWrite+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	e7e7      	b.n	8004a14 <I2C_RequestMemoryWrite+0x30>
 8004a44:	80002000 	.word	0x80002000

08004a48 <I2C_RequestMemoryRead>:
{
 8004a48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a4a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004a4c:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a4e:	4b16      	ldr	r3, [pc, #88]	; (8004aa8 <I2C_RequestMemoryRead+0x60>)
 8004a50:	9300      	str	r3, [sp, #0]
{
 8004a52:	4605      	mov	r5, r0
 8004a54:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a56:	2300      	movs	r3, #0
 8004a58:	b2fa      	uxtb	r2, r7
 8004a5a:	f7ff ff1a 	bl	8004892 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a5e:	4632      	mov	r2, r6
 8004a60:	9908      	ldr	r1, [sp, #32]
 8004a62:	4628      	mov	r0, r5
 8004a64:	f7ff ff97 	bl	8004996 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a68:	b110      	cbz	r0, 8004a70 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8004a6a:	2001      	movs	r0, #1
}
 8004a6c:	b003      	add	sp, #12
 8004a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a70:	2f01      	cmp	r7, #1
 8004a72:	682b      	ldr	r3, [r5, #0]
 8004a74:	d10c      	bne.n	8004a90 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a76:	b2e4      	uxtb	r4, r4
 8004a78:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a7a:	9b08      	ldr	r3, [sp, #32]
 8004a7c:	9600      	str	r6, [sp, #0]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2140      	movs	r1, #64	; 0x40
 8004a82:	4628      	mov	r0, r5
 8004a84:	f7ff ff1f 	bl	80048c6 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8004a88:	3000      	adds	r0, #0
 8004a8a:	bf18      	it	ne
 8004a8c:	2001      	movne	r0, #1
 8004a8e:	e7ed      	b.n	8004a6c <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a90:	0a22      	lsrs	r2, r4, #8
 8004a92:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a94:	9908      	ldr	r1, [sp, #32]
 8004a96:	4632      	mov	r2, r6
 8004a98:	4628      	mov	r0, r5
 8004a9a:	f7ff ff7c 	bl	8004996 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	d1e3      	bne.n	8004a6a <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004aa2:	682b      	ldr	r3, [r5, #0]
 8004aa4:	e7e7      	b.n	8004a76 <I2C_RequestMemoryRead+0x2e>
 8004aa6:	bf00      	nop
 8004aa8:	80002000 	.word	0x80002000

08004aac <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8004aac:	b570      	push	{r4, r5, r6, lr}
 8004aae:	4604      	mov	r4, r0
 8004ab0:	460d      	mov	r5, r1
 8004ab2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	069b      	lsls	r3, r3, #26
 8004aba:	d501      	bpl.n	8004ac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8004abc:	2000      	movs	r0, #0
 8004abe:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ac0:	4632      	mov	r2, r6
 8004ac2:	4629      	mov	r1, r5
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	f7ff ff29 	bl	800491c <I2C_IsAcknowledgeFailed>
 8004aca:	b990      	cbnz	r0, 8004af2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004acc:	f7ff fd76 	bl	80045bc <HAL_GetTick>
 8004ad0:	1b80      	subs	r0, r0, r6
 8004ad2:	4285      	cmp	r5, r0
 8004ad4:	d301      	bcc.n	8004ada <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8004ad6:	2d00      	cmp	r5, #0
 8004ad8:	d1ec      	bne.n	8004ab4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ada:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004adc:	f043 0320 	orr.w	r3, r3, #32
 8004ae0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ae2:	2320      	movs	r3, #32
 8004ae4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004aee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004af2:	2001      	movs	r0, #1
}
 8004af4:	bd70      	pop	{r4, r5, r6, pc}

08004af6 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8004af6:	b570      	push	{r4, r5, r6, lr}
 8004af8:	4604      	mov	r4, r0
 8004afa:	460d      	mov	r5, r1
 8004afc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	075b      	lsls	r3, r3, #29
 8004b04:	d40e      	bmi.n	8004b24 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b06:	4632      	mov	r2, r6
 8004b08:	4629      	mov	r1, r5
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f7ff ff06 	bl	800491c <I2C_IsAcknowledgeFailed>
 8004b10:	b9f0      	cbnz	r0, 8004b50 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	699a      	ldr	r2, [r3, #24]
 8004b16:	0691      	lsls	r1, r2, #26
 8004b18:	d51c      	bpl.n	8004b54 <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004b1a:	699a      	ldr	r2, [r3, #24]
 8004b1c:	0752      	lsls	r2, r2, #29
 8004b1e:	d503      	bpl.n	8004b28 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8004b20:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004b22:	b10a      	cbz	r2, 8004b28 <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8004b24:	2000      	movs	r0, #0
 8004b26:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b28:	2120      	movs	r1, #32
 8004b2a:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004b32:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004b36:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004b3a:	f022 0201 	bic.w	r2, r2, #1
 8004b3e:	605a      	str	r2, [r3, #4]
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b40:	2300      	movs	r3, #0
 8004b42:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b44:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004b4c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8004b50:	2001      	movs	r0, #1
}
 8004b52:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b54:	f7ff fd32 	bl	80045bc <HAL_GetTick>
 8004b58:	1b80      	subs	r0, r0, r6
 8004b5a:	4285      	cmp	r5, r0
 8004b5c:	d301      	bcc.n	8004b62 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 8004b5e:	2d00      	cmp	r5, #0
 8004b60:	d1cd      	bne.n	8004afe <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b62:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004b64:	f043 0320 	orr.w	r3, r3, #32
 8004b68:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b6a:	2320      	movs	r3, #32
 8004b6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8004b70:	2300      	movs	r3, #0
 8004b72:	e7eb      	b.n	8004b4c <I2C_WaitOnRXNEFlagUntilTimeout+0x56>

08004b74 <HAL_I2C_MspInit>:
 8004b74:	4770      	bx	lr

08004b76 <HAL_I2C_Init>:
{
 8004b76:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8004b78:	4604      	mov	r4, r0
 8004b7a:	2800      	cmp	r0, #0
 8004b7c:	d04a      	beq.n	8004c14 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b7e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004b82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004b86:	b91b      	cbnz	r3, 8004b90 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8004b88:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004b8c:	f7ff fff2 	bl	8004b74 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b90:	2324      	movs	r3, #36	; 0x24
 8004b92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004b96:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b98:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	f022 0201 	bic.w	r2, r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ba2:	6862      	ldr	r2, [r4, #4]
 8004ba4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ba8:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004baa:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bac:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004bae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bb2:	609a      	str	r2, [r3, #8]
 8004bb4:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bb6:	d124      	bne.n	8004c02 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004bb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bbc:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bbe:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004bc0:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bc2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004bc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bca:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bd2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004bd4:	6922      	ldr	r2, [r4, #16]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	69a1      	ldr	r1, [r4, #24]
 8004bda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004bde:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004be0:	6a21      	ldr	r1, [r4, #32]
 8004be2:	69e2      	ldr	r2, [r4, #28]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	f042 0201 	orr.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bf0:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8004bf2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bf4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bf6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bfa:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bfc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8004c00:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c06:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c08:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c0a:	bf04      	itt	eq
 8004c0c:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8004c10:	605a      	streq	r2, [r3, #4]
 8004c12:	e7d4      	b.n	8004bbe <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8004c14:	2001      	movs	r0, #1
}
 8004c16:	bd10      	pop	{r4, pc}

08004c18 <HAL_I2C_MspDeInit>:
 8004c18:	4770      	bx	lr

08004c1a <HAL_I2C_DeInit>:
{
 8004c1a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	b198      	cbz	r0, 8004c48 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8004c20:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c22:	2324      	movs	r3, #36	; 0x24
 8004c24:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004c28:	6813      	ldr	r3, [r2, #0]
 8004c2a:	f023 0301 	bic.w	r3, r3, #1
 8004c2e:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8004c30:	f7ff fff2 	bl	8004c18 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c34:	2000      	movs	r0, #0
 8004c36:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 8004c38:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8004c3c:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c40:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c42:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8004c46:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004c48:	2001      	movs	r0, #1
}
 8004c4a:	bd10      	pop	{r4, pc}

08004c4c <HAL_I2C_Master_Transmit>:
{
 8004c4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004c50:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c52:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004c56:	2b20      	cmp	r3, #32
{
 8004c58:	4604      	mov	r4, r0
 8004c5a:	460e      	mov	r6, r1
 8004c5c:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c5e:	f040 8084 	bne.w	8004d6a <HAL_I2C_Master_Transmit+0x11e>
    __HAL_LOCK(hi2c);
 8004c62:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d07f      	beq.n	8004d6a <HAL_I2C_Master_Transmit+0x11e>
 8004c6a:	2701      	movs	r7, #1
 8004c6c:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004c70:	f7ff fca4 	bl	80045bc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c74:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8004c76:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004c78:	9000      	str	r0, [sp, #0]
 8004c7a:	463a      	mov	r2, r7
 8004c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c80:	4620      	mov	r0, r4
 8004c82:	f7ff fe20 	bl	80048c6 <I2C_WaitOnFlagUntilTimeout>
 8004c86:	b118      	cbz	r0, 8004c90 <HAL_I2C_Master_Transmit+0x44>
      return HAL_ERROR;
 8004c88:	2001      	movs	r0, #1
}
 8004c8a:	b003      	add	sp, #12
 8004c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c90:	2321      	movs	r3, #33	; 0x21
 8004c92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c96:	2310      	movs	r3, #16
 8004c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c9c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8004c9e:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ca2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8004ca4:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8004cac:	6360      	str	r0, [r4, #52]	; 0x34
 8004cae:	4b30      	ldr	r3, [pc, #192]	; (8004d70 <HAL_I2C_Master_Transmit+0x124>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cb0:	d926      	bls.n	8004d00 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cb2:	22ff      	movs	r2, #255	; 0xff
 8004cb4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004cb6:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004cbc:	4631      	mov	r1, r6
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	f7ff fde7 	bl	8004892 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004cc4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cc6:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8004cc8:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cca:	462a      	mov	r2, r5
 8004ccc:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8004cce:	b9fb      	cbnz	r3, 8004d10 <HAL_I2C_Master_Transmit+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cd0:	f7ff feec 	bl	8004aac <I2C_WaitOnSTOPFlagUntilTimeout>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	d1d7      	bne.n	8004c88 <HAL_I2C_Master_Transmit+0x3c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	2120      	movs	r1, #32
 8004cdc:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004ce4:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004ce8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004cec:	f022 0201 	bic.w	r2, r2, #1
 8004cf0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004cf2:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004cf6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004cfa:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8004cfe:	e7c4      	b.n	8004c8a <HAL_I2C_Master_Transmit+0x3e>
      hi2c->XferSize = hi2c->XferCount;
 8004d00:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004d02:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8004d04:	b292      	uxth	r2, r2
 8004d06:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	e7d5      	b.n	8004cbc <HAL_I2C_Master_Transmit+0x70>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d10:	f7ff fe41 	bl	8004996 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	d1b7      	bne.n	8004c88 <HAL_I2C_Master_Transmit+0x3c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d1a:	6822      	ldr	r2, [r4, #0]
 8004d1c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004d20:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004d22:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004d24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004d26:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004d30:	3a01      	subs	r2, #1
 8004d32:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d34:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8004d36:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0c3      	beq.n	8004cc4 <HAL_I2C_Master_Transmit+0x78>
 8004d3c:	2a00      	cmp	r2, #0
 8004d3e:	d1c1      	bne.n	8004cc4 <HAL_I2C_Master_Transmit+0x78>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d40:	9500      	str	r5, [sp, #0]
 8004d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d44:	2180      	movs	r1, #128	; 0x80
 8004d46:	4620      	mov	r0, r4
 8004d48:	f7ff fdbd 	bl	80048c6 <I2C_WaitOnFlagUntilTimeout>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d19b      	bne.n	8004c88 <HAL_I2C_Master_Transmit+0x3c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d50:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	2bff      	cmp	r3, #255	; 0xff
 8004d56:	d903      	bls.n	8004d60 <HAL_I2C_Master_Transmit+0x114>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d58:	22ff      	movs	r2, #255	; 0xff
 8004d5a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d5c:	9000      	str	r0, [sp, #0]
 8004d5e:	e7ab      	b.n	8004cb8 <HAL_I2C_Master_Transmit+0x6c>
          hi2c->XferSize = hi2c->XferCount;
 8004d60:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d62:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8004d64:	b292      	uxth	r2, r2
 8004d66:	8522      	strh	r2, [r4, #40]	; 0x28
 8004d68:	e7ce      	b.n	8004d08 <HAL_I2C_Master_Transmit+0xbc>
    return HAL_BUSY;
 8004d6a:	2002      	movs	r0, #2
 8004d6c:	e78d      	b.n	8004c8a <HAL_I2C_Master_Transmit+0x3e>
 8004d6e:	bf00      	nop
 8004d70:	80002000 	.word	0x80002000

08004d74 <HAL_I2C_Master_Receive>:
{
 8004d74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004d78:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d7a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004d7e:	2b20      	cmp	r3, #32
{
 8004d80:	4604      	mov	r4, r0
 8004d82:	460e      	mov	r6, r1
 8004d84:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d86:	f040 8086 	bne.w	8004e96 <HAL_I2C_Master_Receive+0x122>
    __HAL_LOCK(hi2c);
 8004d8a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	f000 8081 	beq.w	8004e96 <HAL_I2C_Master_Receive+0x122>
 8004d94:	2701      	movs	r7, #1
 8004d96:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004d9a:	f7ff fc0f 	bl	80045bc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d9e:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8004da0:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004da2:	9000      	str	r0, [sp, #0]
 8004da4:	463a      	mov	r2, r7
 8004da6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004daa:	4620      	mov	r0, r4
 8004dac:	f7ff fd8b 	bl	80048c6 <I2C_WaitOnFlagUntilTimeout>
 8004db0:	b118      	cbz	r0, 8004dba <HAL_I2C_Master_Receive+0x46>
      return HAL_ERROR;
 8004db2:	2001      	movs	r0, #1
}
 8004db4:	b003      	add	sp, #12
 8004db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004dba:	2322      	movs	r3, #34	; 0x22
 8004dbc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004dc0:	2310      	movs	r3, #16
 8004dc2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc6:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8004dc8:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dcc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8004dce:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 8004dd6:	6360      	str	r0, [r4, #52]	; 0x34
 8004dd8:	4b30      	ldr	r3, [pc, #192]	; (8004e9c <HAL_I2C_Master_Receive+0x128>)
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dda:	d926      	bls.n	8004e2a <HAL_I2C_Master_Receive+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ddc:	22ff      	movs	r2, #255	; 0xff
 8004dde:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004de0:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004de2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004de6:	4631      	mov	r1, r6
 8004de8:	4620      	mov	r0, r4
 8004dea:	f7ff fd52 	bl	8004892 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004dee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004df0:	990a      	ldr	r1, [sp, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 8004df2:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004df4:	462a      	mov	r2, r5
 8004df6:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8004df8:	b9fb      	cbnz	r3, 8004e3a <HAL_I2C_Master_Receive+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dfa:	f7ff fe57 	bl	8004aac <I2C_WaitOnSTOPFlagUntilTimeout>
 8004dfe:	2800      	cmp	r0, #0
 8004e00:	d1d7      	bne.n	8004db2 <HAL_I2C_Master_Receive+0x3e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	2120      	movs	r1, #32
 8004e06:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004e0e:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004e12:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004e16:	f022 0201 	bic.w	r2, r2, #1
 8004e1a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004e1c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004e20:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e24:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8004e28:	e7c4      	b.n	8004db4 <HAL_I2C_Master_Receive+0x40>
      hi2c->XferSize = hi2c->XferCount;
 8004e2a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004e2c:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8004e2e:	b292      	uxth	r2, r2
 8004e30:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	e7d5      	b.n	8004de6 <HAL_I2C_Master_Receive+0x72>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e3a:	f7ff fe5c 	bl	8004af6 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e3e:	2800      	cmp	r0, #0
 8004e40:	d1b7      	bne.n	8004db2 <HAL_I2C_Master_Receive+0x3e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e42:	6822      	ldr	r2, [r4, #0]
 8004e44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e48:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004e4c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004e4e:	3301      	adds	r3, #1
 8004e50:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004e52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004e5c:	3a01      	subs	r2, #1
 8004e5e:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e60:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8004e62:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0c2      	beq.n	8004dee <HAL_I2C_Master_Receive+0x7a>
 8004e68:	2a00      	cmp	r2, #0
 8004e6a:	d1c0      	bne.n	8004dee <HAL_I2C_Master_Receive+0x7a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e6c:	9500      	str	r5, [sp, #0]
 8004e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e70:	2180      	movs	r1, #128	; 0x80
 8004e72:	4620      	mov	r0, r4
 8004e74:	f7ff fd27 	bl	80048c6 <I2C_WaitOnFlagUntilTimeout>
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	d19a      	bne.n	8004db2 <HAL_I2C_Master_Receive+0x3e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2bff      	cmp	r3, #255	; 0xff
 8004e82:	d903      	bls.n	8004e8c <HAL_I2C_Master_Receive+0x118>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e84:	22ff      	movs	r2, #255	; 0xff
 8004e86:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e88:	9000      	str	r0, [sp, #0]
 8004e8a:	e7aa      	b.n	8004de2 <HAL_I2C_Master_Receive+0x6e>
          hi2c->XferSize = hi2c->XferCount;
 8004e8c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e8e:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8004e90:	b292      	uxth	r2, r2
 8004e92:	8522      	strh	r2, [r4, #40]	; 0x28
 8004e94:	e7cd      	b.n	8004e32 <HAL_I2C_Master_Receive+0xbe>
    return HAL_BUSY;
 8004e96:	2002      	movs	r0, #2
 8004e98:	e78c      	b.n	8004db4 <HAL_I2C_Master_Receive+0x40>
 8004e9a:	bf00      	nop
 8004e9c:	80002400 	.word	0x80002400

08004ea0 <HAL_I2C_Mem_Write>:
{
 8004ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea4:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ea6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8004eaa:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eac:	2b20      	cmp	r3, #32
{
 8004eae:	4604      	mov	r4, r0
 8004eb0:	460f      	mov	r7, r1
 8004eb2:	9203      	str	r2, [sp, #12]
 8004eb4:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8004eb8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ebc:	f040 80a5 	bne.w	800500a <HAL_I2C_Mem_Write+0x16a>
    if ((pData == NULL) || (Size == 0U))
 8004ec0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ec2:	b113      	cbz	r3, 8004eca <HAL_I2C_Mem_Write+0x2a>
 8004ec4:	f1ba 0f00 	cmp.w	sl, #0
 8004ec8:	d106      	bne.n	8004ed8 <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004eca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ece:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8004ed0:	2001      	movs	r0, #1
}
 8004ed2:	b005      	add	sp, #20
 8004ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004ed8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	f000 8094 	beq.w	800500a <HAL_I2C_Mem_Write+0x16a>
 8004ee2:	2501      	movs	r5, #1
 8004ee4:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8004ee8:	f7ff fb68 	bl	80045bc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004eec:	2319      	movs	r3, #25
 8004eee:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8004ef0:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ef2:	462a      	mov	r2, r5
 8004ef4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ef8:	4620      	mov	r0, r4
 8004efa:	f7ff fce4 	bl	80048c6 <I2C_WaitOnFlagUntilTimeout>
 8004efe:	4681      	mov	r9, r0
 8004f00:	2800      	cmp	r0, #0
 8004f02:	d1e5      	bne.n	8004ed0 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f04:	2321      	movs	r3, #33	; 0x21
 8004f06:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f0a:	2340      	movs	r3, #64	; 0x40
 8004f0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8004f10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f12:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8004f14:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8004f16:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8004f18:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f1c:	9601      	str	r6, [sp, #4]
 8004f1e:	f8cd 8000 	str.w	r8, [sp]
 8004f22:	465b      	mov	r3, fp
 8004f24:	9a03      	ldr	r2, [sp, #12]
 8004f26:	4639      	mov	r1, r7
 8004f28:	4620      	mov	r0, r4
 8004f2a:	f7ff fd5b 	bl	80049e4 <I2C_RequestMemoryWrite>
 8004f2e:	b110      	cbz	r0, 8004f36 <HAL_I2C_Mem_Write+0x96>
      __HAL_UNLOCK(hi2c);
 8004f30:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8004f34:	e7cc      	b.n	8004ed0 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2bff      	cmp	r3, #255	; 0xff
 8004f3c:	d955      	bls.n	8004fea <HAL_I2C_Mem_Write+0x14a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f3e:	22ff      	movs	r2, #255	; 0xff
 8004f40:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f42:	9000      	str	r0, [sp, #0]
 8004f44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f48:	4639      	mov	r1, r7
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f7ff fca1 	bl	8004892 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f50:	4632      	mov	r2, r6
 8004f52:	4641      	mov	r1, r8
 8004f54:	4620      	mov	r0, r4
 8004f56:	f7ff fd1e 	bl	8004996 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d1b8      	bne.n	8004ed0 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f60:	6822      	ldr	r2, [r4, #0]
 8004f62:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004f66:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8004f68:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004f6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004f6c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f74:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8004f76:	3a01      	subs	r2, #1
 8004f78:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f7a:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8004f7c:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f7e:	b1ab      	cbz	r3, 8004fac <HAL_I2C_Mem_Write+0x10c>
 8004f80:	b9a2      	cbnz	r2, 8004fac <HAL_I2C_Mem_Write+0x10c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f82:	9600      	str	r6, [sp, #0]
 8004f84:	4643      	mov	r3, r8
 8004f86:	2180      	movs	r1, #128	; 0x80
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f7ff fc9c 	bl	80048c6 <I2C_WaitOnFlagUntilTimeout>
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	d19e      	bne.n	8004ed0 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	2bff      	cmp	r3, #255	; 0xff
 8004f98:	d92f      	bls.n	8004ffa <HAL_I2C_Mem_Write+0x15a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f9a:	22ff      	movs	r2, #255	; 0xff
 8004f9c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f9e:	9000      	str	r0, [sp, #0]
 8004fa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004fa4:	4639      	mov	r1, r7
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	f7ff fc73 	bl	8004892 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8004fac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1cd      	bne.n	8004f50 <HAL_I2C_Mem_Write+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fb4:	4632      	mov	r2, r6
 8004fb6:	4641      	mov	r1, r8
 8004fb8:	4620      	mov	r0, r4
 8004fba:	f7ff fd77 	bl	8004aac <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	d186      	bne.n	8004ed0 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	2120      	movs	r1, #32
 8004fc6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8004fce:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8004fd2:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8004fd6:	f022 0201 	bic.w	r2, r2, #1
 8004fda:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004fdc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8004fe0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fe4:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8004fe8:	e773      	b.n	8004ed2 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8004fea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004fec:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8004fee:	b292      	uxth	r2, r2
 8004ff0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ff2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	e7a6      	b.n	8004f48 <HAL_I2C_Mem_Write+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8004ffa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004ffc:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8004ffe:	b292      	uxth	r2, r2
 8005000:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005002:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	e7cc      	b.n	8004fa4 <HAL_I2C_Mem_Write+0x104>
    return HAL_BUSY;
 800500a:	2002      	movs	r0, #2
 800500c:	e761      	b.n	8004ed2 <HAL_I2C_Mem_Write+0x32>
	...

08005010 <HAL_I2C_Mem_Read>:
{
 8005010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005014:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005016:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800501a:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 800501c:	2b20      	cmp	r3, #32
{
 800501e:	4604      	mov	r4, r0
 8005020:	460f      	mov	r7, r1
 8005022:	9203      	str	r2, [sp, #12]
 8005024:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8005028:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800502c:	f040 80a9 	bne.w	8005182 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8005030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005032:	b113      	cbz	r3, 800503a <HAL_I2C_Mem_Read+0x2a>
 8005034:	f1ba 0f00 	cmp.w	sl, #0
 8005038:	d106      	bne.n	8005048 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800503a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800503e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005040:	2001      	movs	r0, #1
}
 8005042:	b005      	add	sp, #20
 8005044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005048:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800504c:	2b01      	cmp	r3, #1
 800504e:	f000 8098 	beq.w	8005182 <HAL_I2C_Mem_Read+0x172>
 8005052:	2501      	movs	r5, #1
 8005054:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005058:	f7ff fab0 	bl	80045bc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800505c:	2319      	movs	r3, #25
 800505e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005060:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005062:	462a      	mov	r2, r5
 8005064:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005068:	4620      	mov	r0, r4
 800506a:	f7ff fc2c 	bl	80048c6 <I2C_WaitOnFlagUntilTimeout>
 800506e:	4681      	mov	r9, r0
 8005070:	2800      	cmp	r0, #0
 8005072:	d1e5      	bne.n	8005040 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005074:	2322      	movs	r3, #34	; 0x22
 8005076:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800507a:	2340      	movs	r3, #64	; 0x40
 800507c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005082:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005084:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8005086:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8005088:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800508c:	9601      	str	r6, [sp, #4]
 800508e:	f8cd 8000 	str.w	r8, [sp]
 8005092:	465b      	mov	r3, fp
 8005094:	9a03      	ldr	r2, [sp, #12]
 8005096:	4639      	mov	r1, r7
 8005098:	4620      	mov	r0, r4
 800509a:	f7ff fcd5 	bl	8004a48 <I2C_RequestMemoryRead>
 800509e:	b110      	cbz	r0, 80050a6 <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 80050a0:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 80050a4:	e7cc      	b.n	8005040 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	2bff      	cmp	r3, #255	; 0xff
 80050ac:	4b36      	ldr	r3, [pc, #216]	; (8005188 <HAL_I2C_Mem_Read+0x178>)
 80050ae:	d958      	bls.n	8005162 <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050b0:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80050b2:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050b4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80050b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80050ba:	4639      	mov	r1, r7
 80050bc:	4620      	mov	r0, r4
 80050be:	f7ff fbe8 	bl	8004892 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80050c2:	9600      	str	r6, [sp, #0]
 80050c4:	4643      	mov	r3, r8
 80050c6:	2200      	movs	r2, #0
 80050c8:	2104      	movs	r1, #4
 80050ca:	4620      	mov	r0, r4
 80050cc:	f7ff fbfb 	bl	80048c6 <I2C_WaitOnFlagUntilTimeout>
 80050d0:	2800      	cmp	r0, #0
 80050d2:	d1b5      	bne.n	8005040 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050d4:	6822      	ldr	r2, [r4, #0]
 80050d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050da:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80050dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80050de:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80050e0:	3301      	adds	r3, #1
 80050e2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80050e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80050ee:	3a01      	subs	r2, #1
 80050f0:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050f2:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80050f4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050f6:	b1ab      	cbz	r3, 8005124 <HAL_I2C_Mem_Read+0x114>
 80050f8:	b9a2      	cbnz	r2, 8005124 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050fa:	9600      	str	r6, [sp, #0]
 80050fc:	4643      	mov	r3, r8
 80050fe:	2180      	movs	r1, #128	; 0x80
 8005100:	4620      	mov	r0, r4
 8005102:	f7ff fbe0 	bl	80048c6 <I2C_WaitOnFlagUntilTimeout>
 8005106:	2800      	cmp	r0, #0
 8005108:	d19a      	bne.n	8005040 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800510a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800510c:	b29b      	uxth	r3, r3
 800510e:	2bff      	cmp	r3, #255	; 0xff
 8005110:	d92f      	bls.n	8005172 <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005112:	22ff      	movs	r2, #255	; 0xff
 8005114:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005116:	9000      	str	r0, [sp, #0]
 8005118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800511c:	4639      	mov	r1, r7
 800511e:	4620      	mov	r0, r4
 8005120:	f7ff fbb7 	bl	8004892 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8005124:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005126:	b29b      	uxth	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1ca      	bne.n	80050c2 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800512c:	4632      	mov	r2, r6
 800512e:	4641      	mov	r1, r8
 8005130:	4620      	mov	r0, r4
 8005132:	f7ff fcbb 	bl	8004aac <I2C_WaitOnSTOPFlagUntilTimeout>
 8005136:	2800      	cmp	r0, #0
 8005138:	d182      	bne.n	8005040 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	2120      	movs	r1, #32
 800513e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005146:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800514a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800514e:	f022 0201 	bic.w	r2, r2, #1
 8005152:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005154:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005158:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800515c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005160:	e76f      	b.n	8005042 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8005162:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005164:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8005166:	b292      	uxth	r2, r2
 8005168:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800516a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	e7a3      	b.n	80050ba <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8005172:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005174:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005176:	b292      	uxth	r2, r2
 8005178:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800517a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	e7cc      	b.n	800511c <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 8005182:	2002      	movs	r0, #2
 8005184:	e75d      	b.n	8005042 <HAL_I2C_Mem_Read+0x32>
 8005186:	bf00      	nop
 8005188:	80002400 	.word	0x80002400

0800518c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800518c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	2a20      	cmp	r2, #32
{
 8005194:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005196:	d11d      	bne.n	80051d4 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005198:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800519c:	2b01      	cmp	r3, #1
 800519e:	d019      	beq.n	80051d4 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051a0:	2324      	movs	r3, #36	; 0x24
 80051a2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051a6:	6803      	ldr	r3, [r0, #0]
 80051a8:	681c      	ldr	r4, [r3, #0]
 80051aa:	f024 0401 	bic.w	r4, r4, #1
 80051ae:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051b0:	681c      	ldr	r4, [r3, #0]
 80051b2:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80051b6:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051b8:	681c      	ldr	r4, [r3, #0]
 80051ba:	4321      	orrs	r1, r4
 80051bc:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051be:	6819      	ldr	r1, [r3, #0]
 80051c0:	f041 0101 	orr.w	r1, r1, #1
 80051c4:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051c6:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80051c8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80051cc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80051d0:	4618      	mov	r0, r3
 80051d2:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80051d4:	2002      	movs	r0, #2
  }
}
 80051d6:	bd10      	pop	{r4, pc}

080051d8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80051d8:	4b02      	ldr	r3, [pc, #8]	; (80051e4 <HAL_PWREx_GetVoltageRange+0xc>)
 80051da:	6818      	ldr	r0, [r3, #0]
#endif
}
 80051dc:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40007000 	.word	0x40007000

080051e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80051e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80051ea:	4d1e      	ldr	r5, [pc, #120]	; (8005264 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80051ec:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80051ee:	00da      	lsls	r2, r3, #3
{
 80051f0:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80051f2:	d518      	bpl.n	8005226 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051f4:	f7ff fff0 	bl	80051d8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051f8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80051fc:	d123      	bne.n	8005246 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 80051fe:	2c80      	cmp	r4, #128	; 0x80
 8005200:	d929      	bls.n	8005256 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005202:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005204:	bf8c      	ite	hi
 8005206:	2002      	movhi	r0, #2
 8005208:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800520a:	4a17      	ldr	r2, [pc, #92]	; (8005268 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800520c:	6813      	ldr	r3, [r2, #0]
 800520e:	f023 0307 	bic.w	r3, r3, #7
 8005212:	4303      	orrs	r3, r0
 8005214:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005216:	6813      	ldr	r3, [r2, #0]
 8005218:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800521c:	1a18      	subs	r0, r3, r0
 800521e:	bf18      	it	ne
 8005220:	2001      	movne	r0, #1
 8005222:	b003      	add	sp, #12
 8005224:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8005226:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800522c:	65ab      	str	r3, [r5, #88]	; 0x58
 800522e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8005230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8005238:	f7ff ffce 	bl	80051d8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800523c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800523e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005242:	65ab      	str	r3, [r5, #88]	; 0x58
 8005244:	e7d8      	b.n	80051f8 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8005246:	2c80      	cmp	r4, #128	; 0x80
 8005248:	d807      	bhi.n	800525a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800524a:	d008      	beq.n	800525e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 800524c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8005250:	4258      	negs	r0, r3
 8005252:	4158      	adcs	r0, r3
 8005254:	e7d9      	b.n	800520a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005256:	2000      	movs	r0, #0
 8005258:	e7d7      	b.n	800520a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800525a:	2003      	movs	r0, #3
 800525c:	e7d5      	b.n	800520a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800525e:	2002      	movs	r0, #2
 8005260:	e7d3      	b.n	800520a <RCC_SetFlashLatencyFromMSIRange+0x22>
 8005262:	bf00      	nop
 8005264:	40021000 	.word	0x40021000
 8005268:	40022000 	.word	0x40022000

0800526c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800526c:	4b25      	ldr	r3, [pc, #148]	; (8005304 <HAL_RCC_GetSysClockFreq+0x98>)
 800526e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005270:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005272:	f012 020c 	ands.w	r2, r2, #12
 8005276:	d005      	beq.n	8005284 <HAL_RCC_GetSysClockFreq+0x18>
 8005278:	2a0c      	cmp	r2, #12
 800527a:	d115      	bne.n	80052a8 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800527c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005280:	2901      	cmp	r1, #1
 8005282:	d118      	bne.n	80052b6 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005284:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8005286:	4820      	ldr	r0, [pc, #128]	; (8005308 <HAL_RCC_GetSysClockFreq+0x9c>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005288:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800528a:	bf55      	itete	pl
 800528c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005290:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005292:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005296:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 800529a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800529e:	b382      	cbz	r2, 8005302 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80052a0:	2a0c      	cmp	r2, #12
 80052a2:	d009      	beq.n	80052b8 <HAL_RCC_GetSysClockFreq+0x4c>
 80052a4:	2000      	movs	r0, #0
  return sysclockfreq;
 80052a6:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80052a8:	2a04      	cmp	r2, #4
 80052aa:	d029      	beq.n	8005300 <HAL_RCC_GetSysClockFreq+0x94>
 80052ac:	2a08      	cmp	r2, #8
 80052ae:	4817      	ldr	r0, [pc, #92]	; (800530c <HAL_RCC_GetSysClockFreq+0xa0>)
 80052b0:	bf18      	it	ne
 80052b2:	2000      	movne	r0, #0
 80052b4:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80052b6:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052b8:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052ba:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052bc:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052c0:	f3c2 1202 	ubfx	r2, r2, #4, #3
    switch (pllsource)
 80052c4:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052c6:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 80052ca:	d005      	beq.n	80052d8 <HAL_RCC_GetSysClockFreq+0x6c>
 80052cc:	2903      	cmp	r1, #3
 80052ce:	d012      	beq.n	80052f6 <HAL_RCC_GetSysClockFreq+0x8a>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052d0:	68d9      	ldr	r1, [r3, #12]
 80052d2:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80052d6:	e003      	b.n	80052e0 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052d8:	68d9      	ldr	r1, [r3, #12]
 80052da:	480d      	ldr	r0, [pc, #52]	; (8005310 <HAL_RCC_GetSysClockFreq+0xa4>)
 80052dc:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052e0:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052e2:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052e6:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80052ea:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052ec:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052ee:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80052f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80052f4:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052f6:	68d9      	ldr	r1, [r3, #12]
 80052f8:	4804      	ldr	r0, [pc, #16]	; (800530c <HAL_RCC_GetSysClockFreq+0xa0>)
 80052fa:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80052fe:	e7ef      	b.n	80052e0 <HAL_RCC_GetSysClockFreq+0x74>
    sysclockfreq = HSI_VALUE;
 8005300:	4803      	ldr	r0, [pc, #12]	; (8005310 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8005302:	4770      	bx	lr
 8005304:	40021000 	.word	0x40021000
 8005308:	08008990 	.word	0x08008990
 800530c:	007a1200 	.word	0x007a1200
 8005310:	00f42400 	.word	0x00f42400

08005314 <HAL_RCC_OscConfig>:
{
 8005314:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8005318:	4605      	mov	r5, r0
 800531a:	b918      	cbnz	r0, 8005324 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800531c:	2001      	movs	r0, #1
}
 800531e:	b003      	add	sp, #12
 8005320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005324:	4ca5      	ldr	r4, [pc, #660]	; (80055bc <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005326:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005328:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800532a:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800532c:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800532e:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005332:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005336:	d53c      	bpl.n	80053b2 <HAL_RCC_OscConfig+0x9e>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005338:	b11e      	cbz	r6, 8005342 <HAL_RCC_OscConfig+0x2e>
 800533a:	2e0c      	cmp	r6, #12
 800533c:	d163      	bne.n	8005406 <HAL_RCC_OscConfig+0xf2>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800533e:	2f01      	cmp	r7, #1
 8005340:	d161      	bne.n	8005406 <HAL_RCC_OscConfig+0xf2>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005342:	6823      	ldr	r3, [r4, #0]
 8005344:	0798      	lsls	r0, r3, #30
 8005346:	d502      	bpl.n	800534e <HAL_RCC_OscConfig+0x3a>
 8005348:	69ab      	ldr	r3, [r5, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0e6      	beq.n	800531c <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800534e:	6823      	ldr	r3, [r4, #0]
 8005350:	6a28      	ldr	r0, [r5, #32]
 8005352:	0719      	lsls	r1, r3, #28
 8005354:	bf56      	itet	pl
 8005356:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800535a:	6823      	ldrmi	r3, [r4, #0]
 800535c:	091b      	lsrpl	r3, r3, #4
 800535e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005362:	4283      	cmp	r3, r0
 8005364:	d23a      	bcs.n	80053dc <HAL_RCC_OscConfig+0xc8>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005366:	f7ff ff3f 	bl	80051e8 <RCC_SetFlashLatencyFromMSIRange>
 800536a:	2800      	cmp	r0, #0
 800536c:	d1d6      	bne.n	800531c <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	f043 0308 	orr.w	r3, r3, #8
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	6a2a      	ldr	r2, [r5, #32]
 800537a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800537e:	4313      	orrs	r3, r2
 8005380:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005382:	6863      	ldr	r3, [r4, #4]
 8005384:	69ea      	ldr	r2, [r5, #28]
 8005386:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800538a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800538e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005390:	f7ff ff6c 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8005394:	68a3      	ldr	r3, [r4, #8]
 8005396:	4a8a      	ldr	r2, [pc, #552]	; (80055c0 <HAL_RCC_OscConfig+0x2ac>)
 8005398:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800539c:	5cd3      	ldrb	r3, [r2, r3]
 800539e:	f003 031f 	and.w	r3, r3, #31
 80053a2:	40d8      	lsrs	r0, r3
 80053a4:	4b87      	ldr	r3, [pc, #540]	; (80055c4 <HAL_RCC_OscConfig+0x2b0>)
 80053a6:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80053a8:	200f      	movs	r0, #15
 80053aa:	f7ff f8d7 	bl	800455c <HAL_InitTick>
        if(status != HAL_OK)
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d1b5      	bne.n	800531e <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053b2:	682b      	ldr	r3, [r5, #0]
 80053b4:	07d8      	lsls	r0, r3, #31
 80053b6:	d45d      	bmi.n	8005474 <HAL_RCC_OscConfig+0x160>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	0799      	lsls	r1, r3, #30
 80053bc:	f100 809c 	bmi.w	80054f8 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	0718      	lsls	r0, r3, #28
 80053c4:	f100 80d0 	bmi.w	8005568 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	0759      	lsls	r1, r3, #29
 80053cc:	f100 80fc 	bmi.w	80055c8 <HAL_RCC_OscConfig+0x2b4>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80053d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f040 8165 	bne.w	80056a2 <HAL_RCC_OscConfig+0x38e>
  return HAL_OK;
 80053d8:	2000      	movs	r0, #0
 80053da:	e7a0      	b.n	800531e <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	f043 0308 	orr.w	r3, r3, #8
 80053e2:	6023      	str	r3, [r4, #0]
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053ea:	4303      	orrs	r3, r0
 80053ec:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053ee:	6863      	ldr	r3, [r4, #4]
 80053f0:	69ea      	ldr	r2, [r5, #28]
 80053f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80053fa:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053fc:	f7ff fef4 	bl	80051e8 <RCC_SetFlashLatencyFromMSIRange>
 8005400:	2800      	cmp	r0, #0
 8005402:	d0c5      	beq.n	8005390 <HAL_RCC_OscConfig+0x7c>
 8005404:	e78a      	b.n	800531c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005406:	69ab      	ldr	r3, [r5, #24]
 8005408:	b31b      	cbz	r3, 8005452 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_MSI_ENABLE();
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005412:	f7ff f8d3 	bl	80045bc <HAL_GetTick>
 8005416:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005418:	6823      	ldr	r3, [r4, #0]
 800541a:	079a      	lsls	r2, r3, #30
 800541c:	d511      	bpl.n	8005442 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	f043 0308 	orr.w	r3, r3, #8
 8005424:	6023      	str	r3, [r4, #0]
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	6a2a      	ldr	r2, [r5, #32]
 800542a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800542e:	4313      	orrs	r3, r2
 8005430:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005432:	6863      	ldr	r3, [r4, #4]
 8005434:	69ea      	ldr	r2, [r5, #28]
 8005436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800543a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800543e:	6063      	str	r3, [r4, #4]
 8005440:	e7b7      	b.n	80053b2 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005442:	f7ff f8bb 	bl	80045bc <HAL_GetTick>
 8005446:	eba0 0008 	sub.w	r0, r0, r8
 800544a:	2802      	cmp	r0, #2
 800544c:	d9e4      	bls.n	8005418 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 800544e:	2003      	movs	r0, #3
 8005450:	e765      	b.n	800531e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	f023 0301 	bic.w	r3, r3, #1
 8005458:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800545a:	f7ff f8af 	bl	80045bc <HAL_GetTick>
 800545e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	079b      	lsls	r3, r3, #30
 8005464:	d5a5      	bpl.n	80053b2 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005466:	f7ff f8a9 	bl	80045bc <HAL_GetTick>
 800546a:	eba0 0008 	sub.w	r0, r0, r8
 800546e:	2802      	cmp	r0, #2
 8005470:	d9f6      	bls.n	8005460 <HAL_RCC_OscConfig+0x14c>
 8005472:	e7ec      	b.n	800544e <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005474:	2e08      	cmp	r6, #8
 8005476:	d003      	beq.n	8005480 <HAL_RCC_OscConfig+0x16c>
 8005478:	2e0c      	cmp	r6, #12
 800547a:	d108      	bne.n	800548e <HAL_RCC_OscConfig+0x17a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 800547c:	2f03      	cmp	r7, #3
 800547e:	d106      	bne.n	800548e <HAL_RCC_OscConfig+0x17a>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	039a      	lsls	r2, r3, #14
 8005484:	d598      	bpl.n	80053b8 <HAL_RCC_OscConfig+0xa4>
 8005486:	686b      	ldr	r3, [r5, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d195      	bne.n	80053b8 <HAL_RCC_OscConfig+0xa4>
 800548c:	e746      	b.n	800531c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800548e:	686b      	ldr	r3, [r5, #4]
 8005490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005494:	d110      	bne.n	80054b8 <HAL_RCC_OscConfig+0x1a4>
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800549c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800549e:	f7ff f88d 	bl	80045bc <HAL_GetTick>
 80054a2:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	039b      	lsls	r3, r3, #14
 80054a8:	d486      	bmi.n	80053b8 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054aa:	f7ff f887 	bl	80045bc <HAL_GetTick>
 80054ae:	eba0 0008 	sub.w	r0, r0, r8
 80054b2:	2864      	cmp	r0, #100	; 0x64
 80054b4:	d9f6      	bls.n	80054a4 <HAL_RCC_OscConfig+0x190>
 80054b6:	e7ca      	b.n	800544e <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054bc:	d104      	bne.n	80054c8 <HAL_RCC_OscConfig+0x1b4>
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054c4:	6023      	str	r3, [r4, #0]
 80054c6:	e7e6      	b.n	8005496 <HAL_RCC_OscConfig+0x182>
 80054c8:	6822      	ldr	r2, [r4, #0]
 80054ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80054ce:	6022      	str	r2, [r4, #0]
 80054d0:	6822      	ldr	r2, [r4, #0]
 80054d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054d6:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1e0      	bne.n	800549e <HAL_RCC_OscConfig+0x18a>
        tickstart = HAL_GetTick();
 80054dc:	f7ff f86e 	bl	80045bc <HAL_GetTick>
 80054e0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	0398      	lsls	r0, r3, #14
 80054e6:	f57f af67 	bpl.w	80053b8 <HAL_RCC_OscConfig+0xa4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054ea:	f7ff f867 	bl	80045bc <HAL_GetTick>
 80054ee:	eba0 0008 	sub.w	r0, r0, r8
 80054f2:	2864      	cmp	r0, #100	; 0x64
 80054f4:	d9f5      	bls.n	80054e2 <HAL_RCC_OscConfig+0x1ce>
 80054f6:	e7aa      	b.n	800544e <HAL_RCC_OscConfig+0x13a>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80054f8:	2e04      	cmp	r6, #4
 80054fa:	d003      	beq.n	8005504 <HAL_RCC_OscConfig+0x1f0>
 80054fc:	2e0c      	cmp	r6, #12
 80054fe:	d110      	bne.n	8005522 <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8005500:	2f02      	cmp	r7, #2
 8005502:	d10e      	bne.n	8005522 <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	0559      	lsls	r1, r3, #21
 8005508:	d503      	bpl.n	8005512 <HAL_RCC_OscConfig+0x1fe>
 800550a:	68eb      	ldr	r3, [r5, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	f43f af05 	beq.w	800531c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005512:	6863      	ldr	r3, [r4, #4]
 8005514:	692a      	ldr	r2, [r5, #16]
 8005516:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800551a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800551e:	6063      	str	r3, [r4, #4]
 8005520:	e74e      	b.n	80053c0 <HAL_RCC_OscConfig+0xac>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005522:	68eb      	ldr	r3, [r5, #12]
 8005524:	b17b      	cbz	r3, 8005546 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800552e:	f7ff f845 	bl	80045bc <HAL_GetTick>
 8005532:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	055a      	lsls	r2, r3, #21
 8005538:	d4eb      	bmi.n	8005512 <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800553a:	f7ff f83f 	bl	80045bc <HAL_GetTick>
 800553e:	1bc0      	subs	r0, r0, r7
 8005540:	2802      	cmp	r0, #2
 8005542:	d9f7      	bls.n	8005534 <HAL_RCC_OscConfig+0x220>
 8005544:	e783      	b.n	800544e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800554c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800554e:	f7ff f835 	bl	80045bc <HAL_GetTick>
 8005552:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	055b      	lsls	r3, r3, #21
 8005558:	f57f af32 	bpl.w	80053c0 <HAL_RCC_OscConfig+0xac>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800555c:	f7ff f82e 	bl	80045bc <HAL_GetTick>
 8005560:	1bc0      	subs	r0, r0, r7
 8005562:	2802      	cmp	r0, #2
 8005564:	d9f6      	bls.n	8005554 <HAL_RCC_OscConfig+0x240>
 8005566:	e772      	b.n	800544e <HAL_RCC_OscConfig+0x13a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005568:	696b      	ldr	r3, [r5, #20]
 800556a:	b19b      	cbz	r3, 8005594 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 800556c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005570:	f043 0301 	orr.w	r3, r3, #1
 8005574:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005578:	f7ff f820 	bl	80045bc <HAL_GetTick>
 800557c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800557e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005582:	079a      	lsls	r2, r3, #30
 8005584:	f53f af20 	bmi.w	80053c8 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005588:	f7ff f818 	bl	80045bc <HAL_GetTick>
 800558c:	1bc0      	subs	r0, r0, r7
 800558e:	2802      	cmp	r0, #2
 8005590:	d9f5      	bls.n	800557e <HAL_RCC_OscConfig+0x26a>
 8005592:	e75c      	b.n	800544e <HAL_RCC_OscConfig+0x13a>
      __HAL_RCC_LSI_DISABLE();
 8005594:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8005598:	f023 0301 	bic.w	r3, r3, #1
 800559c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80055a0:	f7ff f80c 	bl	80045bc <HAL_GetTick>
 80055a4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80055a6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80055aa:	079b      	lsls	r3, r3, #30
 80055ac:	f57f af0c 	bpl.w	80053c8 <HAL_RCC_OscConfig+0xb4>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055b0:	f7ff f804 	bl	80045bc <HAL_GetTick>
 80055b4:	1bc0      	subs	r0, r0, r7
 80055b6:	2802      	cmp	r0, #2
 80055b8:	d9f5      	bls.n	80055a6 <HAL_RCC_OscConfig+0x292>
 80055ba:	e748      	b.n	800544e <HAL_RCC_OscConfig+0x13a>
 80055bc:	40021000 	.word	0x40021000
 80055c0:	080089c0 	.word	0x080089c0
 80055c4:	2000052c 	.word	0x2000052c
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80055c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055ca:	00d8      	lsls	r0, r3, #3
 80055cc:	d429      	bmi.n	8005622 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d4:	65a3      	str	r3, [r4, #88]	; 0x58
 80055d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055dc:	9301      	str	r3, [sp, #4]
 80055de:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80055e0:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055e4:	4f5d      	ldr	r7, [pc, #372]	; (800575c <HAL_RCC_OscConfig+0x448>)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	05d9      	lsls	r1, r3, #23
 80055ea:	d51d      	bpl.n	8005628 <HAL_RCC_OscConfig+0x314>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055ec:	68ab      	ldr	r3, [r5, #8]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d12b      	bne.n	800564a <HAL_RCC_OscConfig+0x336>
 80055f2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80055f6:	f043 0301 	orr.w	r3, r3, #1
 80055fa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80055fe:	f7fe ffdd 	bl	80045bc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005602:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005606:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005608:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800560c:	079b      	lsls	r3, r3, #30
 800560e:	d542      	bpl.n	8005696 <HAL_RCC_OscConfig+0x382>
    if(pwrclkchanged == SET)
 8005610:	f1b8 0f00 	cmp.w	r8, #0
 8005614:	f43f aedc 	beq.w	80053d0 <HAL_RCC_OscConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005618:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800561a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800561e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005620:	e6d6      	b.n	80053d0 <HAL_RCC_OscConfig+0xbc>
    FlagStatus       pwrclkchanged = RESET;
 8005622:	f04f 0800 	mov.w	r8, #0
 8005626:	e7dd      	b.n	80055e4 <HAL_RCC_OscConfig+0x2d0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800562e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005630:	f7fe ffc4 	bl	80045bc <HAL_GetTick>
 8005634:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	05da      	lsls	r2, r3, #23
 800563a:	d4d7      	bmi.n	80055ec <HAL_RCC_OscConfig+0x2d8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800563c:	f7fe ffbe 	bl	80045bc <HAL_GetTick>
 8005640:	eba0 0009 	sub.w	r0, r0, r9
 8005644:	2802      	cmp	r0, #2
 8005646:	d9f6      	bls.n	8005636 <HAL_RCC_OscConfig+0x322>
 8005648:	e701      	b.n	800544e <HAL_RCC_OscConfig+0x13a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800564a:	2b05      	cmp	r3, #5
 800564c:	d106      	bne.n	800565c <HAL_RCC_OscConfig+0x348>
 800564e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005652:	f043 0304 	orr.w	r3, r3, #4
 8005656:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800565a:	e7ca      	b.n	80055f2 <HAL_RCC_OscConfig+0x2de>
 800565c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8005660:	f022 0201 	bic.w	r2, r2, #1
 8005664:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8005668:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800566c:	f022 0204 	bic.w	r2, r2, #4
 8005670:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1c2      	bne.n	80055fe <HAL_RCC_OscConfig+0x2ea>
      tickstart = HAL_GetTick();
 8005678:	f7fe ffa0 	bl	80045bc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800567c:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005680:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005682:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005686:	0798      	lsls	r0, r3, #30
 8005688:	d5c2      	bpl.n	8005610 <HAL_RCC_OscConfig+0x2fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800568a:	f7fe ff97 	bl	80045bc <HAL_GetTick>
 800568e:	1bc0      	subs	r0, r0, r7
 8005690:	4548      	cmp	r0, r9
 8005692:	d9f6      	bls.n	8005682 <HAL_RCC_OscConfig+0x36e>
 8005694:	e6db      	b.n	800544e <HAL_RCC_OscConfig+0x13a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005696:	f7fe ff91 	bl	80045bc <HAL_GetTick>
 800569a:	1bc0      	subs	r0, r0, r7
 800569c:	4548      	cmp	r0, r9
 800569e:	d9b3      	bls.n	8005608 <HAL_RCC_OscConfig+0x2f4>
 80056a0:	e6d5      	b.n	800544e <HAL_RCC_OscConfig+0x13a>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056a2:	2e0c      	cmp	r6, #12
 80056a4:	f43f ae3a 	beq.w	800531c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056a8:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80056aa:	6823      	ldr	r3, [r4, #0]
 80056ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056b0:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056b2:	d137      	bne.n	8005724 <HAL_RCC_OscConfig+0x410>
        tickstart = HAL_GetTick();
 80056b4:	f7fe ff82 	bl	80045bc <HAL_GetTick>
 80056b8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	0199      	lsls	r1, r3, #6
 80056be:	d42b      	bmi.n	8005718 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056c0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80056c2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80056c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80056c8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80056ca:	3a01      	subs	r2, #1
 80056cc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80056d0:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80056d2:	0912      	lsrs	r2, r2, #4
 80056d4:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80056d8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80056da:	0852      	lsrs	r2, r2, #1
 80056dc:	3a01      	subs	r2, #1
 80056de:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80056e2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80056e4:	0852      	lsrs	r2, r2, #1
 80056e6:	3a01      	subs	r2, #1
 80056e8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80056ec:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056f4:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056f6:	68e3      	ldr	r3, [r4, #12]
 80056f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056fc:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80056fe:	f7fe ff5d 	bl	80045bc <HAL_GetTick>
 8005702:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	019a      	lsls	r2, r3, #6
 8005708:	f53f ae66 	bmi.w	80053d8 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800570c:	f7fe ff56 	bl	80045bc <HAL_GetTick>
 8005710:	1b40      	subs	r0, r0, r5
 8005712:	2802      	cmp	r0, #2
 8005714:	d9f6      	bls.n	8005704 <HAL_RCC_OscConfig+0x3f0>
 8005716:	e69a      	b.n	800544e <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005718:	f7fe ff50 	bl	80045bc <HAL_GetTick>
 800571c:	1b80      	subs	r0, r0, r6
 800571e:	2802      	cmp	r0, #2
 8005720:	d9cb      	bls.n	80056ba <HAL_RCC_OscConfig+0x3a6>
 8005722:	e694      	b.n	800544e <HAL_RCC_OscConfig+0x13a>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800572a:	bf02      	ittt	eq
 800572c:	68e3      	ldreq	r3, [r4, #12]
 800572e:	f023 0303 	biceq.w	r3, r3, #3
 8005732:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005734:	68e3      	ldr	r3, [r4, #12]
 8005736:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800573a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800573e:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8005740:	f7fe ff3c 	bl	80045bc <HAL_GetTick>
 8005744:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	019b      	lsls	r3, r3, #6
 800574a:	f57f ae45 	bpl.w	80053d8 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800574e:	f7fe ff35 	bl	80045bc <HAL_GetTick>
 8005752:	1b40      	subs	r0, r0, r5
 8005754:	2802      	cmp	r0, #2
 8005756:	d9f6      	bls.n	8005746 <HAL_RCC_OscConfig+0x432>
 8005758:	e679      	b.n	800544e <HAL_RCC_OscConfig+0x13a>
 800575a:	bf00      	nop
 800575c:	40007000 	.word	0x40007000

08005760 <HAL_RCC_ClockConfig>:
{
 8005760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005764:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8005766:	4604      	mov	r4, r0
 8005768:	b910      	cbnz	r0, 8005770 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800576a:	2001      	movs	r0, #1
 800576c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005770:	4a40      	ldr	r2, [pc, #256]	; (8005874 <HAL_RCC_ClockConfig+0x114>)
 8005772:	6813      	ldr	r3, [r2, #0]
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	428b      	cmp	r3, r1
 800577a:	d329      	bcc.n	80057d0 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800577c:	6823      	ldr	r3, [r4, #0]
 800577e:	07d9      	lsls	r1, r3, #31
 8005780:	d431      	bmi.n	80057e6 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005782:	6821      	ldr	r1, [r4, #0]
 8005784:	078a      	lsls	r2, r1, #30
 8005786:	d45b      	bmi.n	8005840 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005788:	4a3a      	ldr	r2, [pc, #232]	; (8005874 <HAL_RCC_ClockConfig+0x114>)
 800578a:	6813      	ldr	r3, [r2, #0]
 800578c:	f003 0307 	and.w	r3, r3, #7
 8005790:	429e      	cmp	r6, r3
 8005792:	d35d      	bcc.n	8005850 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005794:	f011 0f04 	tst.w	r1, #4
 8005798:	4d37      	ldr	r5, [pc, #220]	; (8005878 <HAL_RCC_ClockConfig+0x118>)
 800579a:	d164      	bne.n	8005866 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800579c:	070b      	lsls	r3, r1, #28
 800579e:	d506      	bpl.n	80057ae <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057a0:	68ab      	ldr	r3, [r5, #8]
 80057a2:	6922      	ldr	r2, [r4, #16]
 80057a4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80057a8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80057ac:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057ae:	f7ff fd5d 	bl	800526c <HAL_RCC_GetSysClockFreq>
 80057b2:	68ab      	ldr	r3, [r5, #8]
 80057b4:	4a31      	ldr	r2, [pc, #196]	; (800587c <HAL_RCC_ClockConfig+0x11c>)
 80057b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 80057ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80057be:	5cd3      	ldrb	r3, [r2, r3]
 80057c0:	f003 031f 	and.w	r3, r3, #31
 80057c4:	40d8      	lsrs	r0, r3
 80057c6:	4b2e      	ldr	r3, [pc, #184]	; (8005880 <HAL_RCC_ClockConfig+0x120>)
 80057c8:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 80057ca:	200f      	movs	r0, #15
 80057cc:	f7fe bec6 	b.w	800455c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d0:	6813      	ldr	r3, [r2, #0]
 80057d2:	f023 0307 	bic.w	r3, r3, #7
 80057d6:	430b      	orrs	r3, r1
 80057d8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057da:	6813      	ldr	r3, [r2, #0]
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	4299      	cmp	r1, r3
 80057e2:	d1c2      	bne.n	800576a <HAL_RCC_ClockConfig+0xa>
 80057e4:	e7ca      	b.n	800577c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057e6:	6862      	ldr	r2, [r4, #4]
 80057e8:	4d23      	ldr	r5, [pc, #140]	; (8005878 <HAL_RCC_ClockConfig+0x118>)
 80057ea:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057ec:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057ee:	d11b      	bne.n	8005828 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057f4:	d0b9      	beq.n	800576a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057f6:	68ab      	ldr	r3, [r5, #8]
 80057f8:	f023 0303 	bic.w	r3, r3, #3
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8005800:	f7fe fedc 	bl	80045bc <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005804:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8005808:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800580a:	68ab      	ldr	r3, [r5, #8]
 800580c:	6862      	ldr	r2, [r4, #4]
 800580e:	f003 030c 	and.w	r3, r3, #12
 8005812:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005816:	d0b4      	beq.n	8005782 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005818:	f7fe fed0 	bl	80045bc <HAL_GetTick>
 800581c:	1bc0      	subs	r0, r0, r7
 800581e:	4540      	cmp	r0, r8
 8005820:	d9f3      	bls.n	800580a <HAL_RCC_ClockConfig+0xaa>
        return HAL_TIMEOUT;
 8005822:	2003      	movs	r0, #3
}
 8005824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005828:	2a02      	cmp	r2, #2
 800582a:	d102      	bne.n	8005832 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800582c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005830:	e7e0      	b.n	80057f4 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005832:	b912      	cbnz	r2, 800583a <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005834:	f013 0f02 	tst.w	r3, #2
 8005838:	e7dc      	b.n	80057f4 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800583a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800583e:	e7d9      	b.n	80057f4 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005840:	4a0d      	ldr	r2, [pc, #52]	; (8005878 <HAL_RCC_ClockConfig+0x118>)
 8005842:	68a0      	ldr	r0, [r4, #8]
 8005844:	6893      	ldr	r3, [r2, #8]
 8005846:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800584a:	4303      	orrs	r3, r0
 800584c:	6093      	str	r3, [r2, #8]
 800584e:	e79b      	b.n	8005788 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005850:	6813      	ldr	r3, [r2, #0]
 8005852:	f023 0307 	bic.w	r3, r3, #7
 8005856:	4333      	orrs	r3, r6
 8005858:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800585a:	6813      	ldr	r3, [r2, #0]
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	429e      	cmp	r6, r3
 8005862:	d182      	bne.n	800576a <HAL_RCC_ClockConfig+0xa>
 8005864:	e796      	b.n	8005794 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005866:	68ab      	ldr	r3, [r5, #8]
 8005868:	68e2      	ldr	r2, [r4, #12]
 800586a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800586e:	4313      	orrs	r3, r2
 8005870:	60ab      	str	r3, [r5, #8]
 8005872:	e793      	b.n	800579c <HAL_RCC_ClockConfig+0x3c>
 8005874:	40022000 	.word	0x40022000
 8005878:	40021000 	.word	0x40021000
 800587c:	080089c0 	.word	0x080089c0
 8005880:	2000052c 	.word	0x2000052c

08005884 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005884:	4b05      	ldr	r3, [pc, #20]	; (800589c <HAL_RCC_GetPCLK1Freq+0x18>)
 8005886:	4a06      	ldr	r2, [pc, #24]	; (80058a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800588e:	5cd3      	ldrb	r3, [r2, r3]
 8005890:	4a04      	ldr	r2, [pc, #16]	; (80058a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005892:	6810      	ldr	r0, [r2, #0]
 8005894:	f003 031f 	and.w	r3, r3, #31
}
 8005898:	40d8      	lsrs	r0, r3
 800589a:	4770      	bx	lr
 800589c:	40021000 	.word	0x40021000
 80058a0:	080089d0 	.word	0x080089d0
 80058a4:	2000052c 	.word	0x2000052c

080058a8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80058a8:	4b05      	ldr	r3, [pc, #20]	; (80058c0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80058aa:	4a06      	ldr	r2, [pc, #24]	; (80058c4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80058b2:	5cd3      	ldrb	r3, [r2, r3]
 80058b4:	4a04      	ldr	r2, [pc, #16]	; (80058c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058b6:	6810      	ldr	r0, [r2, #0]
 80058b8:	f003 031f 	and.w	r3, r3, #31
}
 80058bc:	40d8      	lsrs	r0, r3
 80058be:	4770      	bx	lr
 80058c0:	40021000 	.word	0x40021000
 80058c4:	080089d0 	.word	0x080089d0
 80058c8:	2000052c 	.word	0x2000052c

080058cc <HAL_UART_MspInit>:
 80058cc:	4770      	bx	lr
	...

080058d0 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80058d0:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058d2:	69c1      	ldr	r1, [r0, #28]
{
 80058d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d6:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058d8:	6883      	ldr	r3, [r0, #8]
 80058da:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058dc:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058de:	4303      	orrs	r3, r0
 80058e0:	6960      	ldr	r0, [r4, #20]
 80058e2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058e4:	48af      	ldr	r0, [pc, #700]	; (8005ba4 <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058e6:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058e8:	4028      	ands	r0, r5
 80058ea:	4303      	orrs	r3, r0
 80058ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058ee:	6853      	ldr	r3, [r2, #4]
 80058f0:	68e0      	ldr	r0, [r4, #12]
 80058f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80058f6:	4303      	orrs	r3, r0
 80058f8:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058fa:	4bab      	ldr	r3, [pc, #684]	; (8005ba8 <UART_SetConfig+0x2d8>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058fc:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058fe:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005900:	bf1c      	itt	ne
 8005902:	6a23      	ldrne	r3, [r4, #32]
 8005904:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005906:	6893      	ldr	r3, [r2, #8]
 8005908:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800590c:	4303      	orrs	r3, r0
 800590e:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005910:	4ba6      	ldr	r3, [pc, #664]	; (8005bac <UART_SetConfig+0x2dc>)
 8005912:	429a      	cmp	r2, r3
 8005914:	d119      	bne.n	800594a <UART_SetConfig+0x7a>
 8005916:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800591a:	4aa5      	ldr	r2, [pc, #660]	; (8005bb0 <UART_SetConfig+0x2e0>)
 800591c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005920:	f003 0303 	and.w	r3, r3, #3
 8005924:	5cd3      	ldrb	r3, [r2, r3]
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005926:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800592a:	f040 8151 	bne.w	8005bd0 <UART_SetConfig+0x300>
  {
    switch (clocksource)
 800592e:	2b08      	cmp	r3, #8
 8005930:	f200 8091 	bhi.w	8005a56 <UART_SetConfig+0x186>
 8005934:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005938:	00cc011c 	.word	0x00cc011c
 800593c:	008f00fb 	.word	0x008f00fb
 8005940:	008f0116 	.word	0x008f0116
 8005944:	008f008f 	.word	0x008f008f
 8005948:	0038      	.short	0x0038
  UART_GETCLOCKSOURCE(huart, clocksource);
 800594a:	4b9a      	ldr	r3, [pc, #616]	; (8005bb4 <UART_SetConfig+0x2e4>)
 800594c:	429a      	cmp	r2, r3
 800594e:	d109      	bne.n	8005964 <UART_SetConfig+0x94>
 8005950:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8005954:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005958:	4b95      	ldr	r3, [pc, #596]	; (8005bb0 <UART_SetConfig+0x2e0>)
 800595a:	f002 020c 	and.w	r2, r2, #12
 800595e:	4413      	add	r3, r2
 8005960:	791b      	ldrb	r3, [r3, #4]
 8005962:	e7e0      	b.n	8005926 <UART_SetConfig+0x56>
 8005964:	4b94      	ldr	r3, [pc, #592]	; (8005bb8 <UART_SetConfig+0x2e8>)
 8005966:	429a      	cmp	r2, r3
 8005968:	d123      	bne.n	80059b2 <UART_SetConfig+0xe2>
 800596a:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800596e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005972:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005976:	2b10      	cmp	r3, #16
 8005978:	f000 80f1 	beq.w	8005b5e <UART_SetConfig+0x28e>
 800597c:	d80b      	bhi.n	8005996 <UART_SetConfig+0xc6>
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 80f3 	beq.w	8005b6a <UART_SetConfig+0x29a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005984:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005988:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 800598c:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005990:	f000 80f8 	beq.w	8005b84 <UART_SetConfig+0x2b4>
 8005994:	e0a8      	b.n	8005ae8 <UART_SetConfig+0x218>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005996:	2b20      	cmp	r3, #32
 8005998:	f000 80c6 	beq.w	8005b28 <UART_SetConfig+0x258>
 800599c:	2b30      	cmp	r3, #48	; 0x30
 800599e:	d1f1      	bne.n	8005984 <UART_SetConfig+0xb4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059a0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80059a4:	f040 80b8 	bne.w	8005b18 <UART_SetConfig+0x248>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80059a8:	6860      	ldr	r0, [r4, #4]
 80059aa:	0843      	lsrs	r3, r0, #1
 80059ac:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80059b0:	e0c3      	b.n	8005b3a <UART_SetConfig+0x26a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059b2:	4b82      	ldr	r3, [pc, #520]	; (8005bbc <UART_SetConfig+0x2ec>)
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d11e      	bne.n	80059f6 <UART_SetConfig+0x126>
 80059b8:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80059bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059c4:	2b40      	cmp	r3, #64	; 0x40
 80059c6:	f000 80bb 	beq.w	8005b40 <UART_SetConfig+0x270>
 80059ca:	d80a      	bhi.n	80059e2 <UART_SetConfig+0x112>
 80059cc:	b97b      	cbnz	r3, 80059ee <UART_SetConfig+0x11e>
  if (UART_INSTANCE_LOWPOWER(huart))
 80059ce:	4b76      	ldr	r3, [pc, #472]	; (8005ba8 <UART_SetConfig+0x2d8>)
 80059d0:	429a      	cmp	r2, r3
 80059d2:	f040 80ca 	bne.w	8005b6a <UART_SetConfig+0x29a>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80059d6:	f7ff ff55 	bl	8005884 <HAL_RCC_GetPCLK1Freq>
        break;
 80059da:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 80059dc:	bbb0      	cbnz	r0, 8005a4c <UART_SetConfig+0x17c>
 80059de:	4602      	mov	r2, r0
 80059e0:	e03a      	b.n	8005a58 <UART_SetConfig+0x188>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059e2:	2b80      	cmp	r3, #128	; 0x80
 80059e4:	f000 809d 	beq.w	8005b22 <UART_SetConfig+0x252>
 80059e8:	2bc0      	cmp	r3, #192	; 0xc0
 80059ea:	f000 80b0 	beq.w	8005b4e <UART_SetConfig+0x27e>
  if (UART_INSTANCE_LOWPOWER(huart))
 80059ee:	4b6e      	ldr	r3, [pc, #440]	; (8005ba8 <UART_SetConfig+0x2d8>)
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d1c7      	bne.n	8005984 <UART_SetConfig+0xb4>
 80059f4:	e02f      	b.n	8005a56 <UART_SetConfig+0x186>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059f6:	4b72      	ldr	r3, [pc, #456]	; (8005bc0 <UART_SetConfig+0x2f0>)
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d111      	bne.n	8005a20 <UART_SetConfig+0x150>
 80059fc:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8005a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a0c:	f000 8098 	beq.w	8005b40 <UART_SetConfig+0x270>
 8005a10:	d9dc      	bls.n	80059cc <UART_SetConfig+0xfc>
 8005a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a16:	f000 8084 	beq.w	8005b22 <UART_SetConfig+0x252>
 8005a1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a1e:	e7e4      	b.n	80059ea <UART_SetConfig+0x11a>
 8005a20:	4b61      	ldr	r3, [pc, #388]	; (8005ba8 <UART_SetConfig+0x2d8>)
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d1ae      	bne.n	8005984 <UART_SetConfig+0xb4>
 8005a26:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8005a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a2e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a36:	f000 8083 	beq.w	8005b40 <UART_SetConfig+0x270>
 8005a3a:	d9c7      	bls.n	80059cc <UART_SetConfig+0xfc>
 8005a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a40:	d06f      	beq.n	8005b22 <UART_SetConfig+0x252>
 8005a42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a46:	e7d0      	b.n	80059ea <UART_SetConfig+0x11a>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8005a48:	485e      	ldr	r0, [pc, #376]	; (8005bc4 <UART_SetConfig+0x2f4>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a4a:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8005a4c:	6862      	ldr	r2, [r4, #4]
 8005a4e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8005a52:	4281      	cmp	r1, r0
 8005a54:	d905      	bls.n	8005a62 <UART_SetConfig+0x192>
        ret = HAL_ERROR;
 8005a56:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8005a5c:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8005a5e:	4610      	mov	r0, r2
 8005a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8005a62:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8005a66:	d8f6      	bhi.n	8005a56 <UART_SetConfig+0x186>
        switch (clocksource)
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d82e      	bhi.n	8005aca <UART_SetConfig+0x1fa>
 8005a6c:	e8df f003 	tbb	[pc, r3]
 8005a70:	2d1c2d05 	.word	0x2d1c2d05
 8005a74:	2d2d2d24 	.word	0x2d2d2d24
 8005a78:	27          	.byte	0x27
 8005a79:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005a7a:	f7ff ff03 	bl	8005884 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005a7e:	6862      	ldr	r2, [r4, #4]
 8005a80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a84:	0856      	lsrs	r6, r2, #1
 8005a86:	2700      	movs	r7, #0
 8005a88:	fbe1 6700 	umlal	r6, r7, r1, r0
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	4630      	mov	r0, r6
 8005a90:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005a92:	f7fb f885 	bl	8000ba0 <__aeabi_uldivmod>
            break;
 8005a96:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a98:	4b4b      	ldr	r3, [pc, #300]	; (8005bc8 <UART_SetConfig+0x2f8>)
 8005a9a:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8005a9e:	4299      	cmp	r1, r3
 8005aa0:	d8d9      	bhi.n	8005a56 <UART_SetConfig+0x186>
          huart->Instance->BRR = usartdiv;
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	60d8      	str	r0, [r3, #12]
 8005aa6:	e7d7      	b.n	8005a58 <UART_SetConfig+0x188>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8005aa8:	4848      	ldr	r0, [pc, #288]	; (8005bcc <UART_SetConfig+0x2fc>)
 8005aaa:	0855      	lsrs	r5, r2, #1
 8005aac:	2300      	movs	r3, #0
 8005aae:	2100      	movs	r1, #0
 8005ab0:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005ab2:	f141 0100 	adc.w	r1, r1, #0
 8005ab6:	e7ec      	b.n	8005a92 <UART_SetConfig+0x1c2>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005ab8:	f7ff fbd8 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8005abc:	e7df      	b.n	8005a7e <UART_SetConfig+0x1ae>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8005abe:	0850      	lsrs	r0, r2, #1
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8005ac8:	e7f3      	b.n	8005ab2 <UART_SetConfig+0x1e2>
            ret = HAL_ERROR;
 8005aca:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8005acc:	2000      	movs	r0, #0
 8005ace:	e7e3      	b.n	8005a98 <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005ad0:	f7ff feea 	bl	80058a8 <HAL_RCC_GetPCLK2Freq>
 8005ad4:	e04e      	b.n	8005b74 <UART_SetConfig+0x2a4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005ad6:	f7ff fed5 	bl	8005884 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005ada:	6862      	ldr	r2, [r4, #4]
 8005adc:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ae4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ae6:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ae8:	f1a3 0010 	sub.w	r0, r3, #16
 8005aec:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8005af0:	4288      	cmp	r0, r1
 8005af2:	d8b0      	bhi.n	8005a56 <UART_SetConfig+0x186>
      huart->Instance->BRR = usartdiv;
 8005af4:	6821      	ldr	r1, [r4, #0]
 8005af6:	60cb      	str	r3, [r1, #12]
 8005af8:	e7ae      	b.n	8005a58 <UART_SetConfig+0x188>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005afa:	f7ff fed5 	bl	80058a8 <HAL_RCC_GetPCLK2Freq>
 8005afe:	e7ec      	b.n	8005ada <UART_SetConfig+0x20a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005b00:	6860      	ldr	r0, [r4, #4]
 8005b02:	0843      	lsrs	r3, r0, #1
 8005b04:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005b08:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005b0c:	fbb3 f3f0 	udiv	r3, r3, r0
 8005b10:	e7e8      	b.n	8005ae4 <UART_SetConfig+0x214>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005b12:	f7ff fbab 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8005b16:	e7e0      	b.n	8005ada <UART_SetConfig+0x20a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005b18:	6860      	ldr	r0, [r4, #4]
 8005b1a:	0843      	lsrs	r3, r0, #1
 8005b1c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005b20:	e7f4      	b.n	8005b0c <UART_SetConfig+0x23c>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b22:	4b21      	ldr	r3, [pc, #132]	; (8005ba8 <UART_SetConfig+0x2d8>)
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d08f      	beq.n	8005a48 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b28:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005b2c:	d1e8      	bne.n	8005b00 <UART_SetConfig+0x230>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005b2e:	6860      	ldr	r0, [r4, #4]
 8005b30:	0843      	lsrs	r3, r0, #1
 8005b32:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8005b36:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005b3a:	fbb3 f3f0 	udiv	r3, r3, r0
 8005b3e:	e01f      	b.n	8005b80 <UART_SetConfig+0x2b0>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b40:	4b19      	ldr	r3, [pc, #100]	; (8005ba8 <UART_SetConfig+0x2d8>)
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d10b      	bne.n	8005b5e <UART_SetConfig+0x28e>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8005b46:	f7ff fb91 	bl	800526c <HAL_RCC_GetSysClockFreq>
        break;
 8005b4a:	2304      	movs	r3, #4
 8005b4c:	e746      	b.n	80059dc <UART_SetConfig+0x10c>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b4e:	4b16      	ldr	r3, [pc, #88]	; (8005ba8 <UART_SetConfig+0x2d8>)
 8005b50:	429a      	cmp	r2, r3
 8005b52:	f47f af25 	bne.w	80059a0 <UART_SetConfig+0xd0>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8005b56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b5a:	2308      	movs	r3, #8
 8005b5c:	e776      	b.n	8005a4c <UART_SetConfig+0x17c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b5e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005b62:	d1d6      	bne.n	8005b12 <UART_SetConfig+0x242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005b64:	f7ff fb82 	bl	800526c <HAL_RCC_GetSysClockFreq>
 8005b68:	e004      	b.n	8005b74 <UART_SetConfig+0x2a4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b6a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005b6e:	d1b2      	bne.n	8005ad6 <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005b70:	f7ff fe88 	bl	8005884 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005b74:	6861      	ldr	r1, [r4, #4]
 8005b76:	084a      	lsrs	r2, r1, #1
 8005b78:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8005b7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b80:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b82:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b84:	f1a3 0010 	sub.w	r0, r3, #16
 8005b88:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8005b8c:	4288      	cmp	r0, r1
 8005b8e:	f63f af62 	bhi.w	8005a56 <UART_SetConfig+0x186>
      brrtemp = usartdiv & 0xFFF0U;
 8005b92:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8005b96:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b98:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8005b9c:	430b      	orrs	r3, r1
 8005b9e:	60c3      	str	r3, [r0, #12]
 8005ba0:	e75a      	b.n	8005a58 <UART_SetConfig+0x188>
 8005ba2:	bf00      	nop
 8005ba4:	efff69f3 	.word	0xefff69f3
 8005ba8:	40008000 	.word	0x40008000
 8005bac:	40013800 	.word	0x40013800
 8005bb0:	080089d8 	.word	0x080089d8
 8005bb4:	40004400 	.word	0x40004400
 8005bb8:	40004800 	.word	0x40004800
 8005bbc:	40004c00 	.word	0x40004c00
 8005bc0:	40005000 	.word	0x40005000
 8005bc4:	00f42400 	.word	0x00f42400
 8005bc8:	000ffcff 	.word	0x000ffcff
 8005bcc:	f4240000 	.word	0xf4240000
    switch (clocksource)
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	f63f af40 	bhi.w	8005a56 <UART_SetConfig+0x186>
 8005bd6:	a201      	add	r2, pc, #4	; (adr r2, 8005bdc <UART_SetConfig+0x30c>)
 8005bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bdc:	08005ad7 	.word	0x08005ad7
 8005be0:	08005afb 	.word	0x08005afb
 8005be4:	08005b01 	.word	0x08005b01
 8005be8:	08005a57 	.word	0x08005a57
 8005bec:	08005b13 	.word	0x08005b13
 8005bf0:	08005a57 	.word	0x08005a57
 8005bf4:	08005a57 	.word	0x08005a57
 8005bf8:	08005a57 	.word	0x08005a57
 8005bfc:	08005b19 	.word	0x08005b19

08005c00 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c00:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005c02:	07da      	lsls	r2, r3, #31
{
 8005c04:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c06:	d506      	bpl.n	8005c16 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c08:	6801      	ldr	r1, [r0, #0]
 8005c0a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005c0c:	684a      	ldr	r2, [r1, #4]
 8005c0e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8005c12:	4322      	orrs	r2, r4
 8005c14:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c16:	079c      	lsls	r4, r3, #30
 8005c18:	d506      	bpl.n	8005c28 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c1a:	6801      	ldr	r1, [r0, #0]
 8005c1c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005c1e:	684a      	ldr	r2, [r1, #4]
 8005c20:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c24:	4322      	orrs	r2, r4
 8005c26:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c28:	0759      	lsls	r1, r3, #29
 8005c2a:	d506      	bpl.n	8005c3a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c2c:	6801      	ldr	r1, [r0, #0]
 8005c2e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005c30:	684a      	ldr	r2, [r1, #4]
 8005c32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c36:	4322      	orrs	r2, r4
 8005c38:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c3a:	071a      	lsls	r2, r3, #28
 8005c3c:	d506      	bpl.n	8005c4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c3e:	6801      	ldr	r1, [r0, #0]
 8005c40:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005c42:	684a      	ldr	r2, [r1, #4]
 8005c44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c48:	4322      	orrs	r2, r4
 8005c4a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c4c:	06dc      	lsls	r4, r3, #27
 8005c4e:	d506      	bpl.n	8005c5e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c50:	6801      	ldr	r1, [r0, #0]
 8005c52:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005c54:	688a      	ldr	r2, [r1, #8]
 8005c56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c5a:	4322      	orrs	r2, r4
 8005c5c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c5e:	0699      	lsls	r1, r3, #26
 8005c60:	d506      	bpl.n	8005c70 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c62:	6801      	ldr	r1, [r0, #0]
 8005c64:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005c66:	688a      	ldr	r2, [r1, #8]
 8005c68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c6c:	4322      	orrs	r2, r4
 8005c6e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c70:	065a      	lsls	r2, r3, #25
 8005c72:	d50f      	bpl.n	8005c94 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c74:	6801      	ldr	r1, [r0, #0]
 8005c76:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005c78:	684a      	ldr	r2, [r1, #4]
 8005c7a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005c7e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c80:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c84:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c86:	d105      	bne.n	8005c94 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c88:	684a      	ldr	r2, [r1, #4]
 8005c8a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005c8c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005c90:	4322      	orrs	r2, r4
 8005c92:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c94:	061b      	lsls	r3, r3, #24
 8005c96:	d506      	bpl.n	8005ca6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c98:	6802      	ldr	r2, [r0, #0]
 8005c9a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005c9c:	6853      	ldr	r3, [r2, #4]
 8005c9e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005ca2:	430b      	orrs	r3, r1
 8005ca4:	6053      	str	r3, [r2, #4]
 8005ca6:	bd10      	pop	{r4, pc}

08005ca8 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cac:	9d06      	ldr	r5, [sp, #24]
 8005cae:	4604      	mov	r4, r0
 8005cb0:	460f      	mov	r7, r1
 8005cb2:	4616      	mov	r6, r2
 8005cb4:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cb6:	6821      	ldr	r1, [r4, #0]
 8005cb8:	69ca      	ldr	r2, [r1, #28]
 8005cba:	ea37 0302 	bics.w	r3, r7, r2
 8005cbe:	bf0c      	ite	eq
 8005cc0:	2201      	moveq	r2, #1
 8005cc2:	2200      	movne	r2, #0
 8005cc4:	42b2      	cmp	r2, r6
 8005cc6:	d002      	beq.n	8005cce <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8005cc8:	2000      	movs	r0, #0
}
 8005cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8005cce:	1c6b      	adds	r3, r5, #1
 8005cd0:	d0f2      	beq.n	8005cb8 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cd2:	b99d      	cbnz	r5, 8005cfc <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cdc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	f022 0201 	bic.w	r2, r2, #1
 8005ce4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005ce6:	2320      	movs	r3, #32
 8005ce8:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8005cec:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8005cf6:	2003      	movs	r0, #3
 8005cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cfc:	f7fe fc5e 	bl	80045bc <HAL_GetTick>
 8005d00:	eba0 0008 	sub.w	r0, r0, r8
 8005d04:	4285      	cmp	r5, r0
 8005d06:	d2d6      	bcs.n	8005cb6 <UART_WaitOnFlagUntilTimeout+0xe>
 8005d08:	e7e4      	b.n	8005cd4 <UART_WaitOnFlagUntilTimeout+0x2c>

08005d0a <HAL_UART_Transmit>:
{
 8005d0a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005d0e:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8005d10:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8005d14:	2b20      	cmp	r3, #32
{
 8005d16:	4604      	mov	r4, r0
 8005d18:	460d      	mov	r5, r1
 8005d1a:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005d1c:	d14a      	bne.n	8005db4 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8005d1e:	2900      	cmp	r1, #0
 8005d20:	d046      	beq.n	8005db0 <HAL_UART_Transmit+0xa6>
 8005d22:	2a00      	cmp	r2, #0
 8005d24:	d044      	beq.n	8005db0 <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8005d26:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d042      	beq.n	8005db4 <HAL_UART_Transmit+0xaa>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d34:	2300      	movs	r3, #0
 8005d36:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d38:	2321      	movs	r3, #33	; 0x21
 8005d3a:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8005d3e:	f7fe fc3d 	bl	80045bc <HAL_GetTick>
    huart->TxXferSize  = Size;
 8005d42:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8005d46:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8005d48:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005d4c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d50:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 8005d52:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d54:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 8005d56:	b952      	cbnz	r2, 8005d6e <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d58:	2140      	movs	r1, #64	; 0x40
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f7ff ffa4 	bl	8005ca8 <UART_WaitOnFlagUntilTimeout>
 8005d60:	b958      	cbnz	r0, 8005d7a <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8005d62:	2320      	movs	r3, #32
 8005d64:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8005d68:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8005d6c:	e006      	b.n	8005d7c <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	2180      	movs	r1, #128	; 0x80
 8005d72:	4620      	mov	r0, r4
 8005d74:	f7ff ff98 	bl	8005ca8 <UART_WaitOnFlagUntilTimeout>
 8005d78:	b118      	cbz	r0, 8005d82 <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8005d7a:	2003      	movs	r0, #3
}
 8005d7c:	b002      	add	sp, #8
 8005d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d82:	68a3      	ldr	r3, [r4, #8]
 8005d84:	6822      	ldr	r2, [r4, #0]
 8005d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d8a:	d10d      	bne.n	8005da8 <HAL_UART_Transmit+0x9e>
 8005d8c:	6923      	ldr	r3, [r4, #16]
 8005d8e:	b95b      	cbnz	r3, 8005da8 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8005d90:	f835 3b02 	ldrh.w	r3, [r5], #2
 8005d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d98:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8005d9a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8005da6:	e7d1      	b.n	8005d4c <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8005da8:	782b      	ldrb	r3, [r5, #0]
 8005daa:	8513      	strh	r3, [r2, #40]	; 0x28
 8005dac:	3501      	adds	r5, #1
 8005dae:	e7f4      	b.n	8005d9a <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8005db0:	2001      	movs	r0, #1
 8005db2:	e7e3      	b.n	8005d7c <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8005db4:	2002      	movs	r0, #2
 8005db6:	e7e1      	b.n	8005d7c <HAL_UART_Transmit+0x72>

08005db8 <HAL_UART_Receive>:
{
 8005db8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005dbc:	4698      	mov	r8, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dbe:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8005dc2:	2b20      	cmp	r3, #32
{
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	460d      	mov	r5, r1
 8005dc8:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dca:	d160      	bne.n	8005e8e <HAL_UART_Receive+0xd6>
    if ((pData == NULL) || (Size == 0U))
 8005dcc:	2900      	cmp	r1, #0
 8005dce:	d05c      	beq.n	8005e8a <HAL_UART_Receive+0xd2>
 8005dd0:	2a00      	cmp	r2, #0
 8005dd2:	d05a      	beq.n	8005e8a <HAL_UART_Receive+0xd2>
    __HAL_LOCK(huart);
 8005dd4:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d058      	beq.n	8005e8e <HAL_UART_Receive+0xd6>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005de2:	2300      	movs	r3, #0
 8005de4:	6743      	str	r3, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005de6:	2322      	movs	r3, #34	; 0x22
 8005de8:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
    tickstart = HAL_GetTick();
 8005dec:	f7fe fbe6 	bl	80045bc <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8005df0:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 8005df2:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8005df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8005dfa:	4607      	mov	r7, r0
    huart->RxXferCount = Size;
 8005dfc:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8005e00:	d115      	bne.n	8005e2e <HAL_UART_Receive+0x76>
 8005e02:	6923      	ldr	r3, [r4, #16]
 8005e04:	b98b      	cbnz	r3, 8005e2a <HAL_UART_Receive+0x72>
 8005e06:	f240 13ff 	movw	r3, #511	; 0x1ff
 8005e0a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8005e0e:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
    while (huart->RxXferCount > 0U)
 8005e12:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8005e16:	b280      	uxth	r0, r0
 8005e18:	b9b8      	cbnz	r0, 8005e4a <HAL_UART_Receive+0x92>
    huart->RxState = HAL_UART_STATE_READY;
 8005e1a:	2320      	movs	r3, #32
 8005e1c:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
    __HAL_UNLOCK(huart);
 8005e20:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8005e24:	b002      	add	sp, #8
 8005e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    UART_MASK_COMPUTATION(huart);
 8005e2a:	23ff      	movs	r3, #255	; 0xff
 8005e2c:	e7ed      	b.n	8005e0a <HAL_UART_Receive+0x52>
 8005e2e:	b923      	cbnz	r3, 8005e3a <HAL_UART_Receive+0x82>
 8005e30:	6923      	ldr	r3, [r4, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0f9      	beq.n	8005e2a <HAL_UART_Receive+0x72>
 8005e36:	237f      	movs	r3, #127	; 0x7f
 8005e38:	e7e7      	b.n	8005e0a <HAL_UART_Receive+0x52>
 8005e3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e3e:	d1e6      	bne.n	8005e0e <HAL_UART_Receive+0x56>
 8005e40:	6923      	ldr	r3, [r4, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0f7      	beq.n	8005e36 <HAL_UART_Receive+0x7e>
 8005e46:	233f      	movs	r3, #63	; 0x3f
 8005e48:	e7df      	b.n	8005e0a <HAL_UART_Receive+0x52>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e4a:	f8cd 8000 	str.w	r8, [sp]
 8005e4e:	463b      	mov	r3, r7
 8005e50:	2200      	movs	r2, #0
 8005e52:	2120      	movs	r1, #32
 8005e54:	4620      	mov	r0, r4
 8005e56:	f7ff ff27 	bl	8005ca8 <UART_WaitOnFlagUntilTimeout>
 8005e5a:	b9d0      	cbnz	r0, 8005e92 <HAL_UART_Receive+0xda>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e5c:	68a3      	ldr	r3, [r4, #8]
 8005e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	d10c      	bne.n	8005e80 <HAL_UART_Receive+0xc8>
 8005e66:	6922      	ldr	r2, [r4, #16]
 8005e68:	b952      	cbnz	r2, 8005e80 <HAL_UART_Receive+0xc8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8005e6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e6c:	4033      	ands	r3, r6
 8005e6e:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 8005e72:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8005e76:	3b01      	subs	r3, #1
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8005e7e:	e7c8      	b.n	8005e12 <HAL_UART_Receive+0x5a>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005e80:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e82:	4033      	ands	r3, r6
 8005e84:	702b      	strb	r3, [r5, #0]
 8005e86:	3501      	adds	r5, #1
 8005e88:	e7f3      	b.n	8005e72 <HAL_UART_Receive+0xba>
      return  HAL_ERROR;
 8005e8a:	2001      	movs	r0, #1
 8005e8c:	e7ca      	b.n	8005e24 <HAL_UART_Receive+0x6c>
    return HAL_BUSY;
 8005e8e:	2002      	movs	r0, #2
 8005e90:	e7c8      	b.n	8005e24 <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 8005e92:	2003      	movs	r0, #3
 8005e94:	e7c6      	b.n	8005e24 <HAL_UART_Receive+0x6c>

08005e96 <UART_CheckIdleState>:
{
 8005e96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e98:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9a:	2600      	movs	r6, #0
 8005e9c:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8005e9e:	f7fe fb8d 	bl	80045bc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8005ea8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005eaa:	d417      	bmi.n	8005edc <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005eac:	6823      	ldr	r3, [r4, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	075b      	lsls	r3, r3, #29
 8005eb2:	d50a      	bpl.n	8005eca <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005eb8:	9300      	str	r3, [sp, #0]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	462b      	mov	r3, r5
 8005ebe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	f7ff fef0 	bl	8005ca8 <UART_WaitOnFlagUntilTimeout>
 8005ec8:	b9a0      	cbnz	r0, 8005ef4 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8005eca:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8005ecc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005ece:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8005ed2:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8005ed6:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8005eda:	e00c      	b.n	8005ef6 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005edc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	4632      	mov	r2, r6
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005eea:	4620      	mov	r0, r4
 8005eec:	f7ff fedc 	bl	8005ca8 <UART_WaitOnFlagUntilTimeout>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	d0db      	beq.n	8005eac <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8005ef4:	2003      	movs	r0, #3
}
 8005ef6:	b002      	add	sp, #8
 8005ef8:	bd70      	pop	{r4, r5, r6, pc}

08005efa <HAL_UART_Init>:
{
 8005efa:	b510      	push	{r4, lr}
  if (huart == NULL)
 8005efc:	4604      	mov	r4, r0
 8005efe:	b360      	cbz	r0, 8005f5a <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005f00:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8005f04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005f08:	b91b      	cbnz	r3, 8005f12 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8005f0a:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8005f0e:	f7ff fcdd 	bl	80058cc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8005f12:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005f14:	2324      	movs	r3, #36	; 0x24
 8005f16:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8005f1a:	6813      	ldr	r3, [r2, #0]
 8005f1c:	f023 0301 	bic.w	r3, r3, #1
 8005f20:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f22:	4620      	mov	r0, r4
 8005f24:	f7ff fcd4 	bl	80058d0 <UART_SetConfig>
 8005f28:	2801      	cmp	r0, #1
 8005f2a:	d016      	beq.n	8005f5a <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f2e:	b113      	cbz	r3, 8005f36 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8005f30:	4620      	mov	r0, r4
 8005f32:	f7ff fe65 	bl	8005c00 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f40:	689a      	ldr	r2, [r3, #8]
 8005f42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f46:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005f4e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005f50:	601a      	str	r2, [r3, #0]
}
 8005f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8005f56:	f7ff bf9e 	b.w	8005e96 <UART_CheckIdleState>
}
 8005f5a:	2001      	movs	r0, #1
 8005f5c:	bd10      	pop	{r4, pc}
	...

08005f60 <__errno>:
 8005f60:	4b01      	ldr	r3, [pc, #4]	; (8005f68 <__errno+0x8>)
 8005f62:	6818      	ldr	r0, [r3, #0]
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	20000530 	.word	0x20000530

08005f6c <__libc_init_array>:
 8005f6c:	b570      	push	{r4, r5, r6, lr}
 8005f6e:	4e0d      	ldr	r6, [pc, #52]	; (8005fa4 <__libc_init_array+0x38>)
 8005f70:	4c0d      	ldr	r4, [pc, #52]	; (8005fa8 <__libc_init_array+0x3c>)
 8005f72:	1ba4      	subs	r4, r4, r6
 8005f74:	10a4      	asrs	r4, r4, #2
 8005f76:	2500      	movs	r5, #0
 8005f78:	42a5      	cmp	r5, r4
 8005f7a:	d109      	bne.n	8005f90 <__libc_init_array+0x24>
 8005f7c:	4e0b      	ldr	r6, [pc, #44]	; (8005fac <__libc_init_array+0x40>)
 8005f7e:	4c0c      	ldr	r4, [pc, #48]	; (8005fb0 <__libc_init_array+0x44>)
 8005f80:	f002 fcc4 	bl	800890c <_init>
 8005f84:	1ba4      	subs	r4, r4, r6
 8005f86:	10a4      	asrs	r4, r4, #2
 8005f88:	2500      	movs	r5, #0
 8005f8a:	42a5      	cmp	r5, r4
 8005f8c:	d105      	bne.n	8005f9a <__libc_init_array+0x2e>
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}
 8005f90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f94:	4798      	blx	r3
 8005f96:	3501      	adds	r5, #1
 8005f98:	e7ee      	b.n	8005f78 <__libc_init_array+0xc>
 8005f9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f9e:	4798      	blx	r3
 8005fa0:	3501      	adds	r5, #1
 8005fa2:	e7f2      	b.n	8005f8a <__libc_init_array+0x1e>
 8005fa4:	08009460 	.word	0x08009460
 8005fa8:	08009460 	.word	0x08009460
 8005fac:	08009460 	.word	0x08009460
 8005fb0:	08009464 	.word	0x08009464

08005fb4 <memcpy>:
 8005fb4:	b510      	push	{r4, lr}
 8005fb6:	1e43      	subs	r3, r0, #1
 8005fb8:	440a      	add	r2, r1
 8005fba:	4291      	cmp	r1, r2
 8005fbc:	d100      	bne.n	8005fc0 <memcpy+0xc>
 8005fbe:	bd10      	pop	{r4, pc}
 8005fc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fc8:	e7f7      	b.n	8005fba <memcpy+0x6>

08005fca <memset>:
 8005fca:	4402      	add	r2, r0
 8005fcc:	4603      	mov	r3, r0
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d100      	bne.n	8005fd4 <memset+0xa>
 8005fd2:	4770      	bx	lr
 8005fd4:	f803 1b01 	strb.w	r1, [r3], #1
 8005fd8:	e7f9      	b.n	8005fce <memset+0x4>

08005fda <__cvt>:
 8005fda:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fde:	ec55 4b10 	vmov	r4, r5, d0
 8005fe2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005fe4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005fe8:	2d00      	cmp	r5, #0
 8005fea:	460e      	mov	r6, r1
 8005fec:	4691      	mov	r9, r2
 8005fee:	4619      	mov	r1, r3
 8005ff0:	bfb8      	it	lt
 8005ff2:	4622      	movlt	r2, r4
 8005ff4:	462b      	mov	r3, r5
 8005ff6:	f027 0720 	bic.w	r7, r7, #32
 8005ffa:	bfbb      	ittet	lt
 8005ffc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006000:	461d      	movlt	r5, r3
 8006002:	2300      	movge	r3, #0
 8006004:	232d      	movlt	r3, #45	; 0x2d
 8006006:	bfb8      	it	lt
 8006008:	4614      	movlt	r4, r2
 800600a:	2f46      	cmp	r7, #70	; 0x46
 800600c:	700b      	strb	r3, [r1, #0]
 800600e:	d004      	beq.n	800601a <__cvt+0x40>
 8006010:	2f45      	cmp	r7, #69	; 0x45
 8006012:	d100      	bne.n	8006016 <__cvt+0x3c>
 8006014:	3601      	adds	r6, #1
 8006016:	2102      	movs	r1, #2
 8006018:	e000      	b.n	800601c <__cvt+0x42>
 800601a:	2103      	movs	r1, #3
 800601c:	ab03      	add	r3, sp, #12
 800601e:	9301      	str	r3, [sp, #4]
 8006020:	ab02      	add	r3, sp, #8
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	4632      	mov	r2, r6
 8006026:	4653      	mov	r3, sl
 8006028:	ec45 4b10 	vmov	d0, r4, r5
 800602c:	f000 fe40 	bl	8006cb0 <_dtoa_r>
 8006030:	2f47      	cmp	r7, #71	; 0x47
 8006032:	4680      	mov	r8, r0
 8006034:	d102      	bne.n	800603c <__cvt+0x62>
 8006036:	f019 0f01 	tst.w	r9, #1
 800603a:	d026      	beq.n	800608a <__cvt+0xb0>
 800603c:	2f46      	cmp	r7, #70	; 0x46
 800603e:	eb08 0906 	add.w	r9, r8, r6
 8006042:	d111      	bne.n	8006068 <__cvt+0x8e>
 8006044:	f898 3000 	ldrb.w	r3, [r8]
 8006048:	2b30      	cmp	r3, #48	; 0x30
 800604a:	d10a      	bne.n	8006062 <__cvt+0x88>
 800604c:	2200      	movs	r2, #0
 800604e:	2300      	movs	r3, #0
 8006050:	4620      	mov	r0, r4
 8006052:	4629      	mov	r1, r5
 8006054:	f7fa fd34 	bl	8000ac0 <__aeabi_dcmpeq>
 8006058:	b918      	cbnz	r0, 8006062 <__cvt+0x88>
 800605a:	f1c6 0601 	rsb	r6, r6, #1
 800605e:	f8ca 6000 	str.w	r6, [sl]
 8006062:	f8da 3000 	ldr.w	r3, [sl]
 8006066:	4499      	add	r9, r3
 8006068:	2200      	movs	r2, #0
 800606a:	2300      	movs	r3, #0
 800606c:	4620      	mov	r0, r4
 800606e:	4629      	mov	r1, r5
 8006070:	f7fa fd26 	bl	8000ac0 <__aeabi_dcmpeq>
 8006074:	b938      	cbnz	r0, 8006086 <__cvt+0xac>
 8006076:	2230      	movs	r2, #48	; 0x30
 8006078:	9b03      	ldr	r3, [sp, #12]
 800607a:	4599      	cmp	r9, r3
 800607c:	d905      	bls.n	800608a <__cvt+0xb0>
 800607e:	1c59      	adds	r1, r3, #1
 8006080:	9103      	str	r1, [sp, #12]
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	e7f8      	b.n	8006078 <__cvt+0x9e>
 8006086:	f8cd 900c 	str.w	r9, [sp, #12]
 800608a:	9b03      	ldr	r3, [sp, #12]
 800608c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800608e:	eba3 0308 	sub.w	r3, r3, r8
 8006092:	4640      	mov	r0, r8
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	b004      	add	sp, #16
 8006098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800609c <__exponent>:
 800609c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800609e:	4603      	mov	r3, r0
 80060a0:	2900      	cmp	r1, #0
 80060a2:	bfb8      	it	lt
 80060a4:	4249      	neglt	r1, r1
 80060a6:	f803 2b02 	strb.w	r2, [r3], #2
 80060aa:	bfb4      	ite	lt
 80060ac:	222d      	movlt	r2, #45	; 0x2d
 80060ae:	222b      	movge	r2, #43	; 0x2b
 80060b0:	2909      	cmp	r1, #9
 80060b2:	7042      	strb	r2, [r0, #1]
 80060b4:	dd20      	ble.n	80060f8 <__exponent+0x5c>
 80060b6:	f10d 0207 	add.w	r2, sp, #7
 80060ba:	4617      	mov	r7, r2
 80060bc:	260a      	movs	r6, #10
 80060be:	fb91 f5f6 	sdiv	r5, r1, r6
 80060c2:	fb06 1115 	mls	r1, r6, r5, r1
 80060c6:	3130      	adds	r1, #48	; 0x30
 80060c8:	2d09      	cmp	r5, #9
 80060ca:	f802 1c01 	strb.w	r1, [r2, #-1]
 80060ce:	f102 34ff 	add.w	r4, r2, #4294967295
 80060d2:	4629      	mov	r1, r5
 80060d4:	dc09      	bgt.n	80060ea <__exponent+0x4e>
 80060d6:	3130      	adds	r1, #48	; 0x30
 80060d8:	3a02      	subs	r2, #2
 80060da:	f804 1c01 	strb.w	r1, [r4, #-1]
 80060de:	42ba      	cmp	r2, r7
 80060e0:	461c      	mov	r4, r3
 80060e2:	d304      	bcc.n	80060ee <__exponent+0x52>
 80060e4:	1a20      	subs	r0, r4, r0
 80060e6:	b003      	add	sp, #12
 80060e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060ea:	4622      	mov	r2, r4
 80060ec:	e7e7      	b.n	80060be <__exponent+0x22>
 80060ee:	f812 1b01 	ldrb.w	r1, [r2], #1
 80060f2:	f803 1b01 	strb.w	r1, [r3], #1
 80060f6:	e7f2      	b.n	80060de <__exponent+0x42>
 80060f8:	2230      	movs	r2, #48	; 0x30
 80060fa:	461c      	mov	r4, r3
 80060fc:	4411      	add	r1, r2
 80060fe:	f804 2b02 	strb.w	r2, [r4], #2
 8006102:	7059      	strb	r1, [r3, #1]
 8006104:	e7ee      	b.n	80060e4 <__exponent+0x48>
	...

08006108 <_printf_float>:
 8006108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610c:	b08d      	sub	sp, #52	; 0x34
 800610e:	460c      	mov	r4, r1
 8006110:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006114:	4616      	mov	r6, r2
 8006116:	461f      	mov	r7, r3
 8006118:	4605      	mov	r5, r0
 800611a:	f001 fd41 	bl	8007ba0 <_localeconv_r>
 800611e:	6803      	ldr	r3, [r0, #0]
 8006120:	9304      	str	r3, [sp, #16]
 8006122:	4618      	mov	r0, r3
 8006124:	f7fa f854 	bl	80001d0 <strlen>
 8006128:	2300      	movs	r3, #0
 800612a:	930a      	str	r3, [sp, #40]	; 0x28
 800612c:	f8d8 3000 	ldr.w	r3, [r8]
 8006130:	9005      	str	r0, [sp, #20]
 8006132:	3307      	adds	r3, #7
 8006134:	f023 0307 	bic.w	r3, r3, #7
 8006138:	f103 0208 	add.w	r2, r3, #8
 800613c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006140:	f8d4 b000 	ldr.w	fp, [r4]
 8006144:	f8c8 2000 	str.w	r2, [r8]
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006150:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006154:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006158:	9307      	str	r3, [sp, #28]
 800615a:	f8cd 8018 	str.w	r8, [sp, #24]
 800615e:	f04f 32ff 	mov.w	r2, #4294967295
 8006162:	4ba5      	ldr	r3, [pc, #660]	; (80063f8 <_printf_float+0x2f0>)
 8006164:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006168:	f7fa fcdc 	bl	8000b24 <__aeabi_dcmpun>
 800616c:	2800      	cmp	r0, #0
 800616e:	f040 81fb 	bne.w	8006568 <_printf_float+0x460>
 8006172:	f04f 32ff 	mov.w	r2, #4294967295
 8006176:	4ba0      	ldr	r3, [pc, #640]	; (80063f8 <_printf_float+0x2f0>)
 8006178:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800617c:	f7fa fcb4 	bl	8000ae8 <__aeabi_dcmple>
 8006180:	2800      	cmp	r0, #0
 8006182:	f040 81f1 	bne.w	8006568 <_printf_float+0x460>
 8006186:	2200      	movs	r2, #0
 8006188:	2300      	movs	r3, #0
 800618a:	4640      	mov	r0, r8
 800618c:	4649      	mov	r1, r9
 800618e:	f7fa fca1 	bl	8000ad4 <__aeabi_dcmplt>
 8006192:	b110      	cbz	r0, 800619a <_printf_float+0x92>
 8006194:	232d      	movs	r3, #45	; 0x2d
 8006196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800619a:	4b98      	ldr	r3, [pc, #608]	; (80063fc <_printf_float+0x2f4>)
 800619c:	4a98      	ldr	r2, [pc, #608]	; (8006400 <_printf_float+0x2f8>)
 800619e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80061a2:	bf8c      	ite	hi
 80061a4:	4690      	movhi	r8, r2
 80061a6:	4698      	movls	r8, r3
 80061a8:	2303      	movs	r3, #3
 80061aa:	f02b 0204 	bic.w	r2, fp, #4
 80061ae:	6123      	str	r3, [r4, #16]
 80061b0:	6022      	str	r2, [r4, #0]
 80061b2:	f04f 0900 	mov.w	r9, #0
 80061b6:	9700      	str	r7, [sp, #0]
 80061b8:	4633      	mov	r3, r6
 80061ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80061bc:	4621      	mov	r1, r4
 80061be:	4628      	mov	r0, r5
 80061c0:	f000 f9e2 	bl	8006588 <_printf_common>
 80061c4:	3001      	adds	r0, #1
 80061c6:	f040 8093 	bne.w	80062f0 <_printf_float+0x1e8>
 80061ca:	f04f 30ff 	mov.w	r0, #4294967295
 80061ce:	b00d      	add	sp, #52	; 0x34
 80061d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d4:	6861      	ldr	r1, [r4, #4]
 80061d6:	1c4b      	adds	r3, r1, #1
 80061d8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80061dc:	d13f      	bne.n	800625e <_printf_float+0x156>
 80061de:	2306      	movs	r3, #6
 80061e0:	6063      	str	r3, [r4, #4]
 80061e2:	2300      	movs	r3, #0
 80061e4:	9303      	str	r3, [sp, #12]
 80061e6:	ab0a      	add	r3, sp, #40	; 0x28
 80061e8:	9302      	str	r3, [sp, #8]
 80061ea:	ab09      	add	r3, sp, #36	; 0x24
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	ec49 8b10 	vmov	d0, r8, r9
 80061f2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80061f6:	6022      	str	r2, [r4, #0]
 80061f8:	f8cd a004 	str.w	sl, [sp, #4]
 80061fc:	6861      	ldr	r1, [r4, #4]
 80061fe:	4628      	mov	r0, r5
 8006200:	f7ff feeb 	bl	8005fda <__cvt>
 8006204:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006208:	2b47      	cmp	r3, #71	; 0x47
 800620a:	4680      	mov	r8, r0
 800620c:	d109      	bne.n	8006222 <_printf_float+0x11a>
 800620e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006210:	1cd8      	adds	r0, r3, #3
 8006212:	db02      	blt.n	800621a <_printf_float+0x112>
 8006214:	6862      	ldr	r2, [r4, #4]
 8006216:	4293      	cmp	r3, r2
 8006218:	dd57      	ble.n	80062ca <_printf_float+0x1c2>
 800621a:	f1aa 0a02 	sub.w	sl, sl, #2
 800621e:	fa5f fa8a 	uxtb.w	sl, sl
 8006222:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006226:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006228:	d834      	bhi.n	8006294 <_printf_float+0x18c>
 800622a:	3901      	subs	r1, #1
 800622c:	4652      	mov	r2, sl
 800622e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006232:	9109      	str	r1, [sp, #36]	; 0x24
 8006234:	f7ff ff32 	bl	800609c <__exponent>
 8006238:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800623a:	1883      	adds	r3, r0, r2
 800623c:	2a01      	cmp	r2, #1
 800623e:	4681      	mov	r9, r0
 8006240:	6123      	str	r3, [r4, #16]
 8006242:	dc02      	bgt.n	800624a <_printf_float+0x142>
 8006244:	6822      	ldr	r2, [r4, #0]
 8006246:	07d1      	lsls	r1, r2, #31
 8006248:	d501      	bpl.n	800624e <_printf_float+0x146>
 800624a:	3301      	adds	r3, #1
 800624c:	6123      	str	r3, [r4, #16]
 800624e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0af      	beq.n	80061b6 <_printf_float+0xae>
 8006256:	232d      	movs	r3, #45	; 0x2d
 8006258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800625c:	e7ab      	b.n	80061b6 <_printf_float+0xae>
 800625e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006262:	d002      	beq.n	800626a <_printf_float+0x162>
 8006264:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006268:	d1bb      	bne.n	80061e2 <_printf_float+0xda>
 800626a:	b189      	cbz	r1, 8006290 <_printf_float+0x188>
 800626c:	2300      	movs	r3, #0
 800626e:	9303      	str	r3, [sp, #12]
 8006270:	ab0a      	add	r3, sp, #40	; 0x28
 8006272:	9302      	str	r3, [sp, #8]
 8006274:	ab09      	add	r3, sp, #36	; 0x24
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	ec49 8b10 	vmov	d0, r8, r9
 800627c:	6022      	str	r2, [r4, #0]
 800627e:	f8cd a004 	str.w	sl, [sp, #4]
 8006282:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006286:	4628      	mov	r0, r5
 8006288:	f7ff fea7 	bl	8005fda <__cvt>
 800628c:	4680      	mov	r8, r0
 800628e:	e7be      	b.n	800620e <_printf_float+0x106>
 8006290:	2301      	movs	r3, #1
 8006292:	e7a5      	b.n	80061e0 <_printf_float+0xd8>
 8006294:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006298:	d119      	bne.n	80062ce <_printf_float+0x1c6>
 800629a:	2900      	cmp	r1, #0
 800629c:	6863      	ldr	r3, [r4, #4]
 800629e:	dd0c      	ble.n	80062ba <_printf_float+0x1b2>
 80062a0:	6121      	str	r1, [r4, #16]
 80062a2:	b913      	cbnz	r3, 80062aa <_printf_float+0x1a2>
 80062a4:	6822      	ldr	r2, [r4, #0]
 80062a6:	07d2      	lsls	r2, r2, #31
 80062a8:	d502      	bpl.n	80062b0 <_printf_float+0x1a8>
 80062aa:	3301      	adds	r3, #1
 80062ac:	440b      	add	r3, r1
 80062ae:	6123      	str	r3, [r4, #16]
 80062b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b2:	65a3      	str	r3, [r4, #88]	; 0x58
 80062b4:	f04f 0900 	mov.w	r9, #0
 80062b8:	e7c9      	b.n	800624e <_printf_float+0x146>
 80062ba:	b913      	cbnz	r3, 80062c2 <_printf_float+0x1ba>
 80062bc:	6822      	ldr	r2, [r4, #0]
 80062be:	07d0      	lsls	r0, r2, #31
 80062c0:	d501      	bpl.n	80062c6 <_printf_float+0x1be>
 80062c2:	3302      	adds	r3, #2
 80062c4:	e7f3      	b.n	80062ae <_printf_float+0x1a6>
 80062c6:	2301      	movs	r3, #1
 80062c8:	e7f1      	b.n	80062ae <_printf_float+0x1a6>
 80062ca:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80062ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062d2:	4293      	cmp	r3, r2
 80062d4:	db05      	blt.n	80062e2 <_printf_float+0x1da>
 80062d6:	6822      	ldr	r2, [r4, #0]
 80062d8:	6123      	str	r3, [r4, #16]
 80062da:	07d1      	lsls	r1, r2, #31
 80062dc:	d5e8      	bpl.n	80062b0 <_printf_float+0x1a8>
 80062de:	3301      	adds	r3, #1
 80062e0:	e7e5      	b.n	80062ae <_printf_float+0x1a6>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	bfd4      	ite	le
 80062e6:	f1c3 0302 	rsble	r3, r3, #2
 80062ea:	2301      	movgt	r3, #1
 80062ec:	4413      	add	r3, r2
 80062ee:	e7de      	b.n	80062ae <_printf_float+0x1a6>
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	055a      	lsls	r2, r3, #21
 80062f4:	d407      	bmi.n	8006306 <_printf_float+0x1fe>
 80062f6:	6923      	ldr	r3, [r4, #16]
 80062f8:	4642      	mov	r2, r8
 80062fa:	4631      	mov	r1, r6
 80062fc:	4628      	mov	r0, r5
 80062fe:	47b8      	blx	r7
 8006300:	3001      	adds	r0, #1
 8006302:	d12b      	bne.n	800635c <_printf_float+0x254>
 8006304:	e761      	b.n	80061ca <_printf_float+0xc2>
 8006306:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800630a:	f240 80e2 	bls.w	80064d2 <_printf_float+0x3ca>
 800630e:	2200      	movs	r2, #0
 8006310:	2300      	movs	r3, #0
 8006312:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006316:	f7fa fbd3 	bl	8000ac0 <__aeabi_dcmpeq>
 800631a:	2800      	cmp	r0, #0
 800631c:	d03c      	beq.n	8006398 <_printf_float+0x290>
 800631e:	2301      	movs	r3, #1
 8006320:	4a38      	ldr	r2, [pc, #224]	; (8006404 <_printf_float+0x2fc>)
 8006322:	4631      	mov	r1, r6
 8006324:	4628      	mov	r0, r5
 8006326:	47b8      	blx	r7
 8006328:	3001      	adds	r0, #1
 800632a:	f43f af4e 	beq.w	80061ca <_printf_float+0xc2>
 800632e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006330:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006332:	429a      	cmp	r2, r3
 8006334:	db02      	blt.n	800633c <_printf_float+0x234>
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	07d8      	lsls	r0, r3, #31
 800633a:	d50f      	bpl.n	800635c <_printf_float+0x254>
 800633c:	9b05      	ldr	r3, [sp, #20]
 800633e:	9a04      	ldr	r2, [sp, #16]
 8006340:	4631      	mov	r1, r6
 8006342:	4628      	mov	r0, r5
 8006344:	47b8      	blx	r7
 8006346:	3001      	adds	r0, #1
 8006348:	f43f af3f 	beq.w	80061ca <_printf_float+0xc2>
 800634c:	f04f 0800 	mov.w	r8, #0
 8006350:	f104 091a 	add.w	r9, r4, #26
 8006354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006356:	3b01      	subs	r3, #1
 8006358:	4598      	cmp	r8, r3
 800635a:	db12      	blt.n	8006382 <_printf_float+0x27a>
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	079b      	lsls	r3, r3, #30
 8006360:	d509      	bpl.n	8006376 <_printf_float+0x26e>
 8006362:	f04f 0800 	mov.w	r8, #0
 8006366:	f104 0919 	add.w	r9, r4, #25
 800636a:	68e3      	ldr	r3, [r4, #12]
 800636c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800636e:	1a9b      	subs	r3, r3, r2
 8006370:	4598      	cmp	r8, r3
 8006372:	f2c0 80ee 	blt.w	8006552 <_printf_float+0x44a>
 8006376:	68e0      	ldr	r0, [r4, #12]
 8006378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800637a:	4298      	cmp	r0, r3
 800637c:	bfb8      	it	lt
 800637e:	4618      	movlt	r0, r3
 8006380:	e725      	b.n	80061ce <_printf_float+0xc6>
 8006382:	2301      	movs	r3, #1
 8006384:	464a      	mov	r2, r9
 8006386:	4631      	mov	r1, r6
 8006388:	4628      	mov	r0, r5
 800638a:	47b8      	blx	r7
 800638c:	3001      	adds	r0, #1
 800638e:	f43f af1c 	beq.w	80061ca <_printf_float+0xc2>
 8006392:	f108 0801 	add.w	r8, r8, #1
 8006396:	e7dd      	b.n	8006354 <_printf_float+0x24c>
 8006398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800639a:	2b00      	cmp	r3, #0
 800639c:	dc34      	bgt.n	8006408 <_printf_float+0x300>
 800639e:	2301      	movs	r3, #1
 80063a0:	4a18      	ldr	r2, [pc, #96]	; (8006404 <_printf_float+0x2fc>)
 80063a2:	4631      	mov	r1, r6
 80063a4:	4628      	mov	r0, r5
 80063a6:	47b8      	blx	r7
 80063a8:	3001      	adds	r0, #1
 80063aa:	f43f af0e 	beq.w	80061ca <_printf_float+0xc2>
 80063ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b0:	b923      	cbnz	r3, 80063bc <_printf_float+0x2b4>
 80063b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063b4:	b913      	cbnz	r3, 80063bc <_printf_float+0x2b4>
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	07d9      	lsls	r1, r3, #31
 80063ba:	d5cf      	bpl.n	800635c <_printf_float+0x254>
 80063bc:	9b05      	ldr	r3, [sp, #20]
 80063be:	9a04      	ldr	r2, [sp, #16]
 80063c0:	4631      	mov	r1, r6
 80063c2:	4628      	mov	r0, r5
 80063c4:	47b8      	blx	r7
 80063c6:	3001      	adds	r0, #1
 80063c8:	f43f aeff 	beq.w	80061ca <_printf_float+0xc2>
 80063cc:	f04f 0900 	mov.w	r9, #0
 80063d0:	f104 0a1a 	add.w	sl, r4, #26
 80063d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063d6:	425b      	negs	r3, r3
 80063d8:	4599      	cmp	r9, r3
 80063da:	db01      	blt.n	80063e0 <_printf_float+0x2d8>
 80063dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063de:	e78b      	b.n	80062f8 <_printf_float+0x1f0>
 80063e0:	2301      	movs	r3, #1
 80063e2:	4652      	mov	r2, sl
 80063e4:	4631      	mov	r1, r6
 80063e6:	4628      	mov	r0, r5
 80063e8:	47b8      	blx	r7
 80063ea:	3001      	adds	r0, #1
 80063ec:	f43f aeed 	beq.w	80061ca <_printf_float+0xc2>
 80063f0:	f109 0901 	add.w	r9, r9, #1
 80063f4:	e7ee      	b.n	80063d4 <_printf_float+0x2cc>
 80063f6:	bf00      	nop
 80063f8:	7fefffff 	.word	0x7fefffff
 80063fc:	0800919c 	.word	0x0800919c
 8006400:	080091a0 	.word	0x080091a0
 8006404:	08008c46 	.word	0x08008c46
 8006408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800640a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800640c:	429a      	cmp	r2, r3
 800640e:	bfa8      	it	ge
 8006410:	461a      	movge	r2, r3
 8006412:	2a00      	cmp	r2, #0
 8006414:	4691      	mov	r9, r2
 8006416:	dc38      	bgt.n	800648a <_printf_float+0x382>
 8006418:	f104 031a 	add.w	r3, r4, #26
 800641c:	f04f 0b00 	mov.w	fp, #0
 8006420:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006424:	9306      	str	r3, [sp, #24]
 8006426:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800642a:	ebaa 0309 	sub.w	r3, sl, r9
 800642e:	459b      	cmp	fp, r3
 8006430:	db33      	blt.n	800649a <_printf_float+0x392>
 8006432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006436:	429a      	cmp	r2, r3
 8006438:	db3a      	blt.n	80064b0 <_printf_float+0x3a8>
 800643a:	6823      	ldr	r3, [r4, #0]
 800643c:	07da      	lsls	r2, r3, #31
 800643e:	d437      	bmi.n	80064b0 <_printf_float+0x3a8>
 8006440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006442:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006444:	eba3 020a 	sub.w	r2, r3, sl
 8006448:	eba3 0901 	sub.w	r9, r3, r1
 800644c:	4591      	cmp	r9, r2
 800644e:	bfa8      	it	ge
 8006450:	4691      	movge	r9, r2
 8006452:	f1b9 0f00 	cmp.w	r9, #0
 8006456:	dc33      	bgt.n	80064c0 <_printf_float+0x3b8>
 8006458:	f04f 0800 	mov.w	r8, #0
 800645c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006460:	f104 0a1a 	add.w	sl, r4, #26
 8006464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006468:	1a9b      	subs	r3, r3, r2
 800646a:	eba3 0309 	sub.w	r3, r3, r9
 800646e:	4598      	cmp	r8, r3
 8006470:	f6bf af74 	bge.w	800635c <_printf_float+0x254>
 8006474:	2301      	movs	r3, #1
 8006476:	4652      	mov	r2, sl
 8006478:	4631      	mov	r1, r6
 800647a:	4628      	mov	r0, r5
 800647c:	47b8      	blx	r7
 800647e:	3001      	adds	r0, #1
 8006480:	f43f aea3 	beq.w	80061ca <_printf_float+0xc2>
 8006484:	f108 0801 	add.w	r8, r8, #1
 8006488:	e7ec      	b.n	8006464 <_printf_float+0x35c>
 800648a:	4613      	mov	r3, r2
 800648c:	4631      	mov	r1, r6
 800648e:	4642      	mov	r2, r8
 8006490:	4628      	mov	r0, r5
 8006492:	47b8      	blx	r7
 8006494:	3001      	adds	r0, #1
 8006496:	d1bf      	bne.n	8006418 <_printf_float+0x310>
 8006498:	e697      	b.n	80061ca <_printf_float+0xc2>
 800649a:	2301      	movs	r3, #1
 800649c:	9a06      	ldr	r2, [sp, #24]
 800649e:	4631      	mov	r1, r6
 80064a0:	4628      	mov	r0, r5
 80064a2:	47b8      	blx	r7
 80064a4:	3001      	adds	r0, #1
 80064a6:	f43f ae90 	beq.w	80061ca <_printf_float+0xc2>
 80064aa:	f10b 0b01 	add.w	fp, fp, #1
 80064ae:	e7ba      	b.n	8006426 <_printf_float+0x31e>
 80064b0:	9b05      	ldr	r3, [sp, #20]
 80064b2:	9a04      	ldr	r2, [sp, #16]
 80064b4:	4631      	mov	r1, r6
 80064b6:	4628      	mov	r0, r5
 80064b8:	47b8      	blx	r7
 80064ba:	3001      	adds	r0, #1
 80064bc:	d1c0      	bne.n	8006440 <_printf_float+0x338>
 80064be:	e684      	b.n	80061ca <_printf_float+0xc2>
 80064c0:	464b      	mov	r3, r9
 80064c2:	eb08 020a 	add.w	r2, r8, sl
 80064c6:	4631      	mov	r1, r6
 80064c8:	4628      	mov	r0, r5
 80064ca:	47b8      	blx	r7
 80064cc:	3001      	adds	r0, #1
 80064ce:	d1c3      	bne.n	8006458 <_printf_float+0x350>
 80064d0:	e67b      	b.n	80061ca <_printf_float+0xc2>
 80064d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064d4:	2a01      	cmp	r2, #1
 80064d6:	dc01      	bgt.n	80064dc <_printf_float+0x3d4>
 80064d8:	07db      	lsls	r3, r3, #31
 80064da:	d537      	bpl.n	800654c <_printf_float+0x444>
 80064dc:	2301      	movs	r3, #1
 80064de:	4642      	mov	r2, r8
 80064e0:	4631      	mov	r1, r6
 80064e2:	4628      	mov	r0, r5
 80064e4:	47b8      	blx	r7
 80064e6:	3001      	adds	r0, #1
 80064e8:	f43f ae6f 	beq.w	80061ca <_printf_float+0xc2>
 80064ec:	9b05      	ldr	r3, [sp, #20]
 80064ee:	9a04      	ldr	r2, [sp, #16]
 80064f0:	4631      	mov	r1, r6
 80064f2:	4628      	mov	r0, r5
 80064f4:	47b8      	blx	r7
 80064f6:	3001      	adds	r0, #1
 80064f8:	f43f ae67 	beq.w	80061ca <_printf_float+0xc2>
 80064fc:	2200      	movs	r2, #0
 80064fe:	2300      	movs	r3, #0
 8006500:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006504:	f7fa fadc 	bl	8000ac0 <__aeabi_dcmpeq>
 8006508:	b158      	cbz	r0, 8006522 <_printf_float+0x41a>
 800650a:	f04f 0800 	mov.w	r8, #0
 800650e:	f104 0a1a 	add.w	sl, r4, #26
 8006512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006514:	3b01      	subs	r3, #1
 8006516:	4598      	cmp	r8, r3
 8006518:	db0d      	blt.n	8006536 <_printf_float+0x42e>
 800651a:	464b      	mov	r3, r9
 800651c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006520:	e6eb      	b.n	80062fa <_printf_float+0x1f2>
 8006522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006524:	f108 0201 	add.w	r2, r8, #1
 8006528:	3b01      	subs	r3, #1
 800652a:	4631      	mov	r1, r6
 800652c:	4628      	mov	r0, r5
 800652e:	47b8      	blx	r7
 8006530:	3001      	adds	r0, #1
 8006532:	d1f2      	bne.n	800651a <_printf_float+0x412>
 8006534:	e649      	b.n	80061ca <_printf_float+0xc2>
 8006536:	2301      	movs	r3, #1
 8006538:	4652      	mov	r2, sl
 800653a:	4631      	mov	r1, r6
 800653c:	4628      	mov	r0, r5
 800653e:	47b8      	blx	r7
 8006540:	3001      	adds	r0, #1
 8006542:	f43f ae42 	beq.w	80061ca <_printf_float+0xc2>
 8006546:	f108 0801 	add.w	r8, r8, #1
 800654a:	e7e2      	b.n	8006512 <_printf_float+0x40a>
 800654c:	2301      	movs	r3, #1
 800654e:	4642      	mov	r2, r8
 8006550:	e7eb      	b.n	800652a <_printf_float+0x422>
 8006552:	2301      	movs	r3, #1
 8006554:	464a      	mov	r2, r9
 8006556:	4631      	mov	r1, r6
 8006558:	4628      	mov	r0, r5
 800655a:	47b8      	blx	r7
 800655c:	3001      	adds	r0, #1
 800655e:	f43f ae34 	beq.w	80061ca <_printf_float+0xc2>
 8006562:	f108 0801 	add.w	r8, r8, #1
 8006566:	e700      	b.n	800636a <_printf_float+0x262>
 8006568:	4642      	mov	r2, r8
 800656a:	464b      	mov	r3, r9
 800656c:	4640      	mov	r0, r8
 800656e:	4649      	mov	r1, r9
 8006570:	f7fa fad8 	bl	8000b24 <__aeabi_dcmpun>
 8006574:	2800      	cmp	r0, #0
 8006576:	f43f ae2d 	beq.w	80061d4 <_printf_float+0xcc>
 800657a:	4b01      	ldr	r3, [pc, #4]	; (8006580 <_printf_float+0x478>)
 800657c:	4a01      	ldr	r2, [pc, #4]	; (8006584 <_printf_float+0x47c>)
 800657e:	e60e      	b.n	800619e <_printf_float+0x96>
 8006580:	080091a4 	.word	0x080091a4
 8006584:	080091a8 	.word	0x080091a8

08006588 <_printf_common>:
 8006588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800658c:	4691      	mov	r9, r2
 800658e:	461f      	mov	r7, r3
 8006590:	688a      	ldr	r2, [r1, #8]
 8006592:	690b      	ldr	r3, [r1, #16]
 8006594:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006598:	4293      	cmp	r3, r2
 800659a:	bfb8      	it	lt
 800659c:	4613      	movlt	r3, r2
 800659e:	f8c9 3000 	str.w	r3, [r9]
 80065a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065a6:	4606      	mov	r6, r0
 80065a8:	460c      	mov	r4, r1
 80065aa:	b112      	cbz	r2, 80065b2 <_printf_common+0x2a>
 80065ac:	3301      	adds	r3, #1
 80065ae:	f8c9 3000 	str.w	r3, [r9]
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	0699      	lsls	r1, r3, #26
 80065b6:	bf42      	ittt	mi
 80065b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80065bc:	3302      	addmi	r3, #2
 80065be:	f8c9 3000 	strmi.w	r3, [r9]
 80065c2:	6825      	ldr	r5, [r4, #0]
 80065c4:	f015 0506 	ands.w	r5, r5, #6
 80065c8:	d107      	bne.n	80065da <_printf_common+0x52>
 80065ca:	f104 0a19 	add.w	sl, r4, #25
 80065ce:	68e3      	ldr	r3, [r4, #12]
 80065d0:	f8d9 2000 	ldr.w	r2, [r9]
 80065d4:	1a9b      	subs	r3, r3, r2
 80065d6:	429d      	cmp	r5, r3
 80065d8:	db29      	blt.n	800662e <_printf_common+0xa6>
 80065da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80065de:	6822      	ldr	r2, [r4, #0]
 80065e0:	3300      	adds	r3, #0
 80065e2:	bf18      	it	ne
 80065e4:	2301      	movne	r3, #1
 80065e6:	0692      	lsls	r2, r2, #26
 80065e8:	d42e      	bmi.n	8006648 <_printf_common+0xc0>
 80065ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065ee:	4639      	mov	r1, r7
 80065f0:	4630      	mov	r0, r6
 80065f2:	47c0      	blx	r8
 80065f4:	3001      	adds	r0, #1
 80065f6:	d021      	beq.n	800663c <_printf_common+0xb4>
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	68e5      	ldr	r5, [r4, #12]
 80065fc:	f8d9 2000 	ldr.w	r2, [r9]
 8006600:	f003 0306 	and.w	r3, r3, #6
 8006604:	2b04      	cmp	r3, #4
 8006606:	bf08      	it	eq
 8006608:	1aad      	subeq	r5, r5, r2
 800660a:	68a3      	ldr	r3, [r4, #8]
 800660c:	6922      	ldr	r2, [r4, #16]
 800660e:	bf0c      	ite	eq
 8006610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006614:	2500      	movne	r5, #0
 8006616:	4293      	cmp	r3, r2
 8006618:	bfc4      	itt	gt
 800661a:	1a9b      	subgt	r3, r3, r2
 800661c:	18ed      	addgt	r5, r5, r3
 800661e:	f04f 0900 	mov.w	r9, #0
 8006622:	341a      	adds	r4, #26
 8006624:	454d      	cmp	r5, r9
 8006626:	d11b      	bne.n	8006660 <_printf_common+0xd8>
 8006628:	2000      	movs	r0, #0
 800662a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800662e:	2301      	movs	r3, #1
 8006630:	4652      	mov	r2, sl
 8006632:	4639      	mov	r1, r7
 8006634:	4630      	mov	r0, r6
 8006636:	47c0      	blx	r8
 8006638:	3001      	adds	r0, #1
 800663a:	d103      	bne.n	8006644 <_printf_common+0xbc>
 800663c:	f04f 30ff 	mov.w	r0, #4294967295
 8006640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006644:	3501      	adds	r5, #1
 8006646:	e7c2      	b.n	80065ce <_printf_common+0x46>
 8006648:	18e1      	adds	r1, r4, r3
 800664a:	1c5a      	adds	r2, r3, #1
 800664c:	2030      	movs	r0, #48	; 0x30
 800664e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006652:	4422      	add	r2, r4
 8006654:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006658:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800665c:	3302      	adds	r3, #2
 800665e:	e7c4      	b.n	80065ea <_printf_common+0x62>
 8006660:	2301      	movs	r3, #1
 8006662:	4622      	mov	r2, r4
 8006664:	4639      	mov	r1, r7
 8006666:	4630      	mov	r0, r6
 8006668:	47c0      	blx	r8
 800666a:	3001      	adds	r0, #1
 800666c:	d0e6      	beq.n	800663c <_printf_common+0xb4>
 800666e:	f109 0901 	add.w	r9, r9, #1
 8006672:	e7d7      	b.n	8006624 <_printf_common+0x9c>

08006674 <_printf_i>:
 8006674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006678:	4617      	mov	r7, r2
 800667a:	7e0a      	ldrb	r2, [r1, #24]
 800667c:	b085      	sub	sp, #20
 800667e:	2a6e      	cmp	r2, #110	; 0x6e
 8006680:	4698      	mov	r8, r3
 8006682:	4606      	mov	r6, r0
 8006684:	460c      	mov	r4, r1
 8006686:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006688:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800668c:	f000 80bc 	beq.w	8006808 <_printf_i+0x194>
 8006690:	d81a      	bhi.n	80066c8 <_printf_i+0x54>
 8006692:	2a63      	cmp	r2, #99	; 0x63
 8006694:	d02e      	beq.n	80066f4 <_printf_i+0x80>
 8006696:	d80a      	bhi.n	80066ae <_printf_i+0x3a>
 8006698:	2a00      	cmp	r2, #0
 800669a:	f000 80c8 	beq.w	800682e <_printf_i+0x1ba>
 800669e:	2a58      	cmp	r2, #88	; 0x58
 80066a0:	f000 808a 	beq.w	80067b8 <_printf_i+0x144>
 80066a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066a8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80066ac:	e02a      	b.n	8006704 <_printf_i+0x90>
 80066ae:	2a64      	cmp	r2, #100	; 0x64
 80066b0:	d001      	beq.n	80066b6 <_printf_i+0x42>
 80066b2:	2a69      	cmp	r2, #105	; 0x69
 80066b4:	d1f6      	bne.n	80066a4 <_printf_i+0x30>
 80066b6:	6821      	ldr	r1, [r4, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	f011 0f80 	tst.w	r1, #128	; 0x80
 80066be:	d023      	beq.n	8006708 <_printf_i+0x94>
 80066c0:	1d11      	adds	r1, r2, #4
 80066c2:	6019      	str	r1, [r3, #0]
 80066c4:	6813      	ldr	r3, [r2, #0]
 80066c6:	e027      	b.n	8006718 <_printf_i+0xa4>
 80066c8:	2a73      	cmp	r2, #115	; 0x73
 80066ca:	f000 80b4 	beq.w	8006836 <_printf_i+0x1c2>
 80066ce:	d808      	bhi.n	80066e2 <_printf_i+0x6e>
 80066d0:	2a6f      	cmp	r2, #111	; 0x6f
 80066d2:	d02a      	beq.n	800672a <_printf_i+0xb6>
 80066d4:	2a70      	cmp	r2, #112	; 0x70
 80066d6:	d1e5      	bne.n	80066a4 <_printf_i+0x30>
 80066d8:	680a      	ldr	r2, [r1, #0]
 80066da:	f042 0220 	orr.w	r2, r2, #32
 80066de:	600a      	str	r2, [r1, #0]
 80066e0:	e003      	b.n	80066ea <_printf_i+0x76>
 80066e2:	2a75      	cmp	r2, #117	; 0x75
 80066e4:	d021      	beq.n	800672a <_printf_i+0xb6>
 80066e6:	2a78      	cmp	r2, #120	; 0x78
 80066e8:	d1dc      	bne.n	80066a4 <_printf_i+0x30>
 80066ea:	2278      	movs	r2, #120	; 0x78
 80066ec:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80066f0:	496e      	ldr	r1, [pc, #440]	; (80068ac <_printf_i+0x238>)
 80066f2:	e064      	b.n	80067be <_printf_i+0x14a>
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80066fa:	1d11      	adds	r1, r2, #4
 80066fc:	6019      	str	r1, [r3, #0]
 80066fe:	6813      	ldr	r3, [r2, #0]
 8006700:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006704:	2301      	movs	r3, #1
 8006706:	e0a3      	b.n	8006850 <_printf_i+0x1dc>
 8006708:	f011 0f40 	tst.w	r1, #64	; 0x40
 800670c:	f102 0104 	add.w	r1, r2, #4
 8006710:	6019      	str	r1, [r3, #0]
 8006712:	d0d7      	beq.n	80066c4 <_printf_i+0x50>
 8006714:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006718:	2b00      	cmp	r3, #0
 800671a:	da03      	bge.n	8006724 <_printf_i+0xb0>
 800671c:	222d      	movs	r2, #45	; 0x2d
 800671e:	425b      	negs	r3, r3
 8006720:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006724:	4962      	ldr	r1, [pc, #392]	; (80068b0 <_printf_i+0x23c>)
 8006726:	220a      	movs	r2, #10
 8006728:	e017      	b.n	800675a <_printf_i+0xe6>
 800672a:	6820      	ldr	r0, [r4, #0]
 800672c:	6819      	ldr	r1, [r3, #0]
 800672e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006732:	d003      	beq.n	800673c <_printf_i+0xc8>
 8006734:	1d08      	adds	r0, r1, #4
 8006736:	6018      	str	r0, [r3, #0]
 8006738:	680b      	ldr	r3, [r1, #0]
 800673a:	e006      	b.n	800674a <_printf_i+0xd6>
 800673c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006740:	f101 0004 	add.w	r0, r1, #4
 8006744:	6018      	str	r0, [r3, #0]
 8006746:	d0f7      	beq.n	8006738 <_printf_i+0xc4>
 8006748:	880b      	ldrh	r3, [r1, #0]
 800674a:	4959      	ldr	r1, [pc, #356]	; (80068b0 <_printf_i+0x23c>)
 800674c:	2a6f      	cmp	r2, #111	; 0x6f
 800674e:	bf14      	ite	ne
 8006750:	220a      	movne	r2, #10
 8006752:	2208      	moveq	r2, #8
 8006754:	2000      	movs	r0, #0
 8006756:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800675a:	6865      	ldr	r5, [r4, #4]
 800675c:	60a5      	str	r5, [r4, #8]
 800675e:	2d00      	cmp	r5, #0
 8006760:	f2c0 809c 	blt.w	800689c <_printf_i+0x228>
 8006764:	6820      	ldr	r0, [r4, #0]
 8006766:	f020 0004 	bic.w	r0, r0, #4
 800676a:	6020      	str	r0, [r4, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d13f      	bne.n	80067f0 <_printf_i+0x17c>
 8006770:	2d00      	cmp	r5, #0
 8006772:	f040 8095 	bne.w	80068a0 <_printf_i+0x22c>
 8006776:	4675      	mov	r5, lr
 8006778:	2a08      	cmp	r2, #8
 800677a:	d10b      	bne.n	8006794 <_printf_i+0x120>
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	07da      	lsls	r2, r3, #31
 8006780:	d508      	bpl.n	8006794 <_printf_i+0x120>
 8006782:	6923      	ldr	r3, [r4, #16]
 8006784:	6862      	ldr	r2, [r4, #4]
 8006786:	429a      	cmp	r2, r3
 8006788:	bfde      	ittt	le
 800678a:	2330      	movle	r3, #48	; 0x30
 800678c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006790:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006794:	ebae 0305 	sub.w	r3, lr, r5
 8006798:	6123      	str	r3, [r4, #16]
 800679a:	f8cd 8000 	str.w	r8, [sp]
 800679e:	463b      	mov	r3, r7
 80067a0:	aa03      	add	r2, sp, #12
 80067a2:	4621      	mov	r1, r4
 80067a4:	4630      	mov	r0, r6
 80067a6:	f7ff feef 	bl	8006588 <_printf_common>
 80067aa:	3001      	adds	r0, #1
 80067ac:	d155      	bne.n	800685a <_printf_i+0x1e6>
 80067ae:	f04f 30ff 	mov.w	r0, #4294967295
 80067b2:	b005      	add	sp, #20
 80067b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067b8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80067bc:	493c      	ldr	r1, [pc, #240]	; (80068b0 <_printf_i+0x23c>)
 80067be:	6822      	ldr	r2, [r4, #0]
 80067c0:	6818      	ldr	r0, [r3, #0]
 80067c2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80067c6:	f100 0504 	add.w	r5, r0, #4
 80067ca:	601d      	str	r5, [r3, #0]
 80067cc:	d001      	beq.n	80067d2 <_printf_i+0x15e>
 80067ce:	6803      	ldr	r3, [r0, #0]
 80067d0:	e002      	b.n	80067d8 <_printf_i+0x164>
 80067d2:	0655      	lsls	r5, r2, #25
 80067d4:	d5fb      	bpl.n	80067ce <_printf_i+0x15a>
 80067d6:	8803      	ldrh	r3, [r0, #0]
 80067d8:	07d0      	lsls	r0, r2, #31
 80067da:	bf44      	itt	mi
 80067dc:	f042 0220 	orrmi.w	r2, r2, #32
 80067e0:	6022      	strmi	r2, [r4, #0]
 80067e2:	b91b      	cbnz	r3, 80067ec <_printf_i+0x178>
 80067e4:	6822      	ldr	r2, [r4, #0]
 80067e6:	f022 0220 	bic.w	r2, r2, #32
 80067ea:	6022      	str	r2, [r4, #0]
 80067ec:	2210      	movs	r2, #16
 80067ee:	e7b1      	b.n	8006754 <_printf_i+0xe0>
 80067f0:	4675      	mov	r5, lr
 80067f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80067f6:	fb02 3310 	mls	r3, r2, r0, r3
 80067fa:	5ccb      	ldrb	r3, [r1, r3]
 80067fc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006800:	4603      	mov	r3, r0
 8006802:	2800      	cmp	r0, #0
 8006804:	d1f5      	bne.n	80067f2 <_printf_i+0x17e>
 8006806:	e7b7      	b.n	8006778 <_printf_i+0x104>
 8006808:	6808      	ldr	r0, [r1, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	6949      	ldr	r1, [r1, #20]
 800680e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006812:	d004      	beq.n	800681e <_printf_i+0x1aa>
 8006814:	1d10      	adds	r0, r2, #4
 8006816:	6018      	str	r0, [r3, #0]
 8006818:	6813      	ldr	r3, [r2, #0]
 800681a:	6019      	str	r1, [r3, #0]
 800681c:	e007      	b.n	800682e <_printf_i+0x1ba>
 800681e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006822:	f102 0004 	add.w	r0, r2, #4
 8006826:	6018      	str	r0, [r3, #0]
 8006828:	6813      	ldr	r3, [r2, #0]
 800682a:	d0f6      	beq.n	800681a <_printf_i+0x1a6>
 800682c:	8019      	strh	r1, [r3, #0]
 800682e:	2300      	movs	r3, #0
 8006830:	6123      	str	r3, [r4, #16]
 8006832:	4675      	mov	r5, lr
 8006834:	e7b1      	b.n	800679a <_printf_i+0x126>
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	1d11      	adds	r1, r2, #4
 800683a:	6019      	str	r1, [r3, #0]
 800683c:	6815      	ldr	r5, [r2, #0]
 800683e:	6862      	ldr	r2, [r4, #4]
 8006840:	2100      	movs	r1, #0
 8006842:	4628      	mov	r0, r5
 8006844:	f7f9 fccc 	bl	80001e0 <memchr>
 8006848:	b108      	cbz	r0, 800684e <_printf_i+0x1da>
 800684a:	1b40      	subs	r0, r0, r5
 800684c:	6060      	str	r0, [r4, #4]
 800684e:	6863      	ldr	r3, [r4, #4]
 8006850:	6123      	str	r3, [r4, #16]
 8006852:	2300      	movs	r3, #0
 8006854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006858:	e79f      	b.n	800679a <_printf_i+0x126>
 800685a:	6923      	ldr	r3, [r4, #16]
 800685c:	462a      	mov	r2, r5
 800685e:	4639      	mov	r1, r7
 8006860:	4630      	mov	r0, r6
 8006862:	47c0      	blx	r8
 8006864:	3001      	adds	r0, #1
 8006866:	d0a2      	beq.n	80067ae <_printf_i+0x13a>
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	079b      	lsls	r3, r3, #30
 800686c:	d507      	bpl.n	800687e <_printf_i+0x20a>
 800686e:	2500      	movs	r5, #0
 8006870:	f104 0919 	add.w	r9, r4, #25
 8006874:	68e3      	ldr	r3, [r4, #12]
 8006876:	9a03      	ldr	r2, [sp, #12]
 8006878:	1a9b      	subs	r3, r3, r2
 800687a:	429d      	cmp	r5, r3
 800687c:	db05      	blt.n	800688a <_printf_i+0x216>
 800687e:	68e0      	ldr	r0, [r4, #12]
 8006880:	9b03      	ldr	r3, [sp, #12]
 8006882:	4298      	cmp	r0, r3
 8006884:	bfb8      	it	lt
 8006886:	4618      	movlt	r0, r3
 8006888:	e793      	b.n	80067b2 <_printf_i+0x13e>
 800688a:	2301      	movs	r3, #1
 800688c:	464a      	mov	r2, r9
 800688e:	4639      	mov	r1, r7
 8006890:	4630      	mov	r0, r6
 8006892:	47c0      	blx	r8
 8006894:	3001      	adds	r0, #1
 8006896:	d08a      	beq.n	80067ae <_printf_i+0x13a>
 8006898:	3501      	adds	r5, #1
 800689a:	e7eb      	b.n	8006874 <_printf_i+0x200>
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1a7      	bne.n	80067f0 <_printf_i+0x17c>
 80068a0:	780b      	ldrb	r3, [r1, #0]
 80068a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068aa:	e765      	b.n	8006778 <_printf_i+0x104>
 80068ac:	080091bd 	.word	0x080091bd
 80068b0:	080091ac 	.word	0x080091ac

080068b4 <iprintf>:
 80068b4:	b40f      	push	{r0, r1, r2, r3}
 80068b6:	4b0a      	ldr	r3, [pc, #40]	; (80068e0 <iprintf+0x2c>)
 80068b8:	b513      	push	{r0, r1, r4, lr}
 80068ba:	681c      	ldr	r4, [r3, #0]
 80068bc:	b124      	cbz	r4, 80068c8 <iprintf+0x14>
 80068be:	69a3      	ldr	r3, [r4, #24]
 80068c0:	b913      	cbnz	r3, 80068c8 <iprintf+0x14>
 80068c2:	4620      	mov	r0, r4
 80068c4:	f001 f8c6 	bl	8007a54 <__sinit>
 80068c8:	ab05      	add	r3, sp, #20
 80068ca:	9a04      	ldr	r2, [sp, #16]
 80068cc:	68a1      	ldr	r1, [r4, #8]
 80068ce:	9301      	str	r3, [sp, #4]
 80068d0:	4620      	mov	r0, r4
 80068d2:	f001 fd93 	bl	80083fc <_vfiprintf_r>
 80068d6:	b002      	add	sp, #8
 80068d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068dc:	b004      	add	sp, #16
 80068de:	4770      	bx	lr
 80068e0:	20000530 	.word	0x20000530

080068e4 <_puts_r>:
 80068e4:	b570      	push	{r4, r5, r6, lr}
 80068e6:	460e      	mov	r6, r1
 80068e8:	4605      	mov	r5, r0
 80068ea:	b118      	cbz	r0, 80068f4 <_puts_r+0x10>
 80068ec:	6983      	ldr	r3, [r0, #24]
 80068ee:	b90b      	cbnz	r3, 80068f4 <_puts_r+0x10>
 80068f0:	f001 f8b0 	bl	8007a54 <__sinit>
 80068f4:	69ab      	ldr	r3, [r5, #24]
 80068f6:	68ac      	ldr	r4, [r5, #8]
 80068f8:	b913      	cbnz	r3, 8006900 <_puts_r+0x1c>
 80068fa:	4628      	mov	r0, r5
 80068fc:	f001 f8aa 	bl	8007a54 <__sinit>
 8006900:	4b23      	ldr	r3, [pc, #140]	; (8006990 <_puts_r+0xac>)
 8006902:	429c      	cmp	r4, r3
 8006904:	d117      	bne.n	8006936 <_puts_r+0x52>
 8006906:	686c      	ldr	r4, [r5, #4]
 8006908:	89a3      	ldrh	r3, [r4, #12]
 800690a:	071b      	lsls	r3, r3, #28
 800690c:	d51d      	bpl.n	800694a <_puts_r+0x66>
 800690e:	6923      	ldr	r3, [r4, #16]
 8006910:	b1db      	cbz	r3, 800694a <_puts_r+0x66>
 8006912:	3e01      	subs	r6, #1
 8006914:	68a3      	ldr	r3, [r4, #8]
 8006916:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800691a:	3b01      	subs	r3, #1
 800691c:	60a3      	str	r3, [r4, #8]
 800691e:	b9e9      	cbnz	r1, 800695c <_puts_r+0x78>
 8006920:	2b00      	cmp	r3, #0
 8006922:	da2e      	bge.n	8006982 <_puts_r+0x9e>
 8006924:	4622      	mov	r2, r4
 8006926:	210a      	movs	r1, #10
 8006928:	4628      	mov	r0, r5
 800692a:	f000 f873 	bl	8006a14 <__swbuf_r>
 800692e:	3001      	adds	r0, #1
 8006930:	d011      	beq.n	8006956 <_puts_r+0x72>
 8006932:	200a      	movs	r0, #10
 8006934:	bd70      	pop	{r4, r5, r6, pc}
 8006936:	4b17      	ldr	r3, [pc, #92]	; (8006994 <_puts_r+0xb0>)
 8006938:	429c      	cmp	r4, r3
 800693a:	d101      	bne.n	8006940 <_puts_r+0x5c>
 800693c:	68ac      	ldr	r4, [r5, #8]
 800693e:	e7e3      	b.n	8006908 <_puts_r+0x24>
 8006940:	4b15      	ldr	r3, [pc, #84]	; (8006998 <_puts_r+0xb4>)
 8006942:	429c      	cmp	r4, r3
 8006944:	bf08      	it	eq
 8006946:	68ec      	ldreq	r4, [r5, #12]
 8006948:	e7de      	b.n	8006908 <_puts_r+0x24>
 800694a:	4621      	mov	r1, r4
 800694c:	4628      	mov	r0, r5
 800694e:	f000 f8b3 	bl	8006ab8 <__swsetup_r>
 8006952:	2800      	cmp	r0, #0
 8006954:	d0dd      	beq.n	8006912 <_puts_r+0x2e>
 8006956:	f04f 30ff 	mov.w	r0, #4294967295
 800695a:	bd70      	pop	{r4, r5, r6, pc}
 800695c:	2b00      	cmp	r3, #0
 800695e:	da04      	bge.n	800696a <_puts_r+0x86>
 8006960:	69a2      	ldr	r2, [r4, #24]
 8006962:	4293      	cmp	r3, r2
 8006964:	db06      	blt.n	8006974 <_puts_r+0x90>
 8006966:	290a      	cmp	r1, #10
 8006968:	d004      	beq.n	8006974 <_puts_r+0x90>
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	1c5a      	adds	r2, r3, #1
 800696e:	6022      	str	r2, [r4, #0]
 8006970:	7019      	strb	r1, [r3, #0]
 8006972:	e7cf      	b.n	8006914 <_puts_r+0x30>
 8006974:	4622      	mov	r2, r4
 8006976:	4628      	mov	r0, r5
 8006978:	f000 f84c 	bl	8006a14 <__swbuf_r>
 800697c:	3001      	adds	r0, #1
 800697e:	d1c9      	bne.n	8006914 <_puts_r+0x30>
 8006980:	e7e9      	b.n	8006956 <_puts_r+0x72>
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	200a      	movs	r0, #10
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	6022      	str	r2, [r4, #0]
 800698a:	7018      	strb	r0, [r3, #0]
 800698c:	bd70      	pop	{r4, r5, r6, pc}
 800698e:	bf00      	nop
 8006990:	080091fc 	.word	0x080091fc
 8006994:	0800921c 	.word	0x0800921c
 8006998:	080091dc 	.word	0x080091dc

0800699c <puts>:
 800699c:	4b02      	ldr	r3, [pc, #8]	; (80069a8 <puts+0xc>)
 800699e:	4601      	mov	r1, r0
 80069a0:	6818      	ldr	r0, [r3, #0]
 80069a2:	f7ff bf9f 	b.w	80068e4 <_puts_r>
 80069a6:	bf00      	nop
 80069a8:	20000530 	.word	0x20000530

080069ac <__srget_r>:
 80069ac:	b538      	push	{r3, r4, r5, lr}
 80069ae:	460c      	mov	r4, r1
 80069b0:	4605      	mov	r5, r0
 80069b2:	b118      	cbz	r0, 80069bc <__srget_r+0x10>
 80069b4:	6983      	ldr	r3, [r0, #24]
 80069b6:	b90b      	cbnz	r3, 80069bc <__srget_r+0x10>
 80069b8:	f001 f84c 	bl	8007a54 <__sinit>
 80069bc:	4b0e      	ldr	r3, [pc, #56]	; (80069f8 <__srget_r+0x4c>)
 80069be:	429c      	cmp	r4, r3
 80069c0:	d10d      	bne.n	80069de <__srget_r+0x32>
 80069c2:	686c      	ldr	r4, [r5, #4]
 80069c4:	4621      	mov	r1, r4
 80069c6:	4628      	mov	r0, r5
 80069c8:	f001 fe38 	bl	800863c <__srefill_r>
 80069cc:	b988      	cbnz	r0, 80069f2 <__srget_r+0x46>
 80069ce:	6863      	ldr	r3, [r4, #4]
 80069d0:	3b01      	subs	r3, #1
 80069d2:	6063      	str	r3, [r4, #4]
 80069d4:	6823      	ldr	r3, [r4, #0]
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	6022      	str	r2, [r4, #0]
 80069da:	7818      	ldrb	r0, [r3, #0]
 80069dc:	bd38      	pop	{r3, r4, r5, pc}
 80069de:	4b07      	ldr	r3, [pc, #28]	; (80069fc <__srget_r+0x50>)
 80069e0:	429c      	cmp	r4, r3
 80069e2:	d101      	bne.n	80069e8 <__srget_r+0x3c>
 80069e4:	68ac      	ldr	r4, [r5, #8]
 80069e6:	e7ed      	b.n	80069c4 <__srget_r+0x18>
 80069e8:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <__srget_r+0x54>)
 80069ea:	429c      	cmp	r4, r3
 80069ec:	bf08      	it	eq
 80069ee:	68ec      	ldreq	r4, [r5, #12]
 80069f0:	e7e8      	b.n	80069c4 <__srget_r+0x18>
 80069f2:	f04f 30ff 	mov.w	r0, #4294967295
 80069f6:	bd38      	pop	{r3, r4, r5, pc}
 80069f8:	080091fc 	.word	0x080091fc
 80069fc:	0800921c 	.word	0x0800921c
 8006a00:	080091dc 	.word	0x080091dc

08006a04 <strcpy>:
 8006a04:	4603      	mov	r3, r0
 8006a06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a0a:	f803 2b01 	strb.w	r2, [r3], #1
 8006a0e:	2a00      	cmp	r2, #0
 8006a10:	d1f9      	bne.n	8006a06 <strcpy+0x2>
 8006a12:	4770      	bx	lr

08006a14 <__swbuf_r>:
 8006a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a16:	460e      	mov	r6, r1
 8006a18:	4614      	mov	r4, r2
 8006a1a:	4605      	mov	r5, r0
 8006a1c:	b118      	cbz	r0, 8006a26 <__swbuf_r+0x12>
 8006a1e:	6983      	ldr	r3, [r0, #24]
 8006a20:	b90b      	cbnz	r3, 8006a26 <__swbuf_r+0x12>
 8006a22:	f001 f817 	bl	8007a54 <__sinit>
 8006a26:	4b21      	ldr	r3, [pc, #132]	; (8006aac <__swbuf_r+0x98>)
 8006a28:	429c      	cmp	r4, r3
 8006a2a:	d12a      	bne.n	8006a82 <__swbuf_r+0x6e>
 8006a2c:	686c      	ldr	r4, [r5, #4]
 8006a2e:	69a3      	ldr	r3, [r4, #24]
 8006a30:	60a3      	str	r3, [r4, #8]
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	071a      	lsls	r2, r3, #28
 8006a36:	d52e      	bpl.n	8006a96 <__swbuf_r+0x82>
 8006a38:	6923      	ldr	r3, [r4, #16]
 8006a3a:	b363      	cbz	r3, 8006a96 <__swbuf_r+0x82>
 8006a3c:	6923      	ldr	r3, [r4, #16]
 8006a3e:	6820      	ldr	r0, [r4, #0]
 8006a40:	1ac0      	subs	r0, r0, r3
 8006a42:	6963      	ldr	r3, [r4, #20]
 8006a44:	b2f6      	uxtb	r6, r6
 8006a46:	4298      	cmp	r0, r3
 8006a48:	4637      	mov	r7, r6
 8006a4a:	db04      	blt.n	8006a56 <__swbuf_r+0x42>
 8006a4c:	4621      	mov	r1, r4
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f000 ff84 	bl	800795c <_fflush_r>
 8006a54:	bb28      	cbnz	r0, 8006aa2 <__swbuf_r+0x8e>
 8006a56:	68a3      	ldr	r3, [r4, #8]
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	60a3      	str	r3, [r4, #8]
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	6022      	str	r2, [r4, #0]
 8006a62:	701e      	strb	r6, [r3, #0]
 8006a64:	6963      	ldr	r3, [r4, #20]
 8006a66:	3001      	adds	r0, #1
 8006a68:	4298      	cmp	r0, r3
 8006a6a:	d004      	beq.n	8006a76 <__swbuf_r+0x62>
 8006a6c:	89a3      	ldrh	r3, [r4, #12]
 8006a6e:	07db      	lsls	r3, r3, #31
 8006a70:	d519      	bpl.n	8006aa6 <__swbuf_r+0x92>
 8006a72:	2e0a      	cmp	r6, #10
 8006a74:	d117      	bne.n	8006aa6 <__swbuf_r+0x92>
 8006a76:	4621      	mov	r1, r4
 8006a78:	4628      	mov	r0, r5
 8006a7a:	f000 ff6f 	bl	800795c <_fflush_r>
 8006a7e:	b190      	cbz	r0, 8006aa6 <__swbuf_r+0x92>
 8006a80:	e00f      	b.n	8006aa2 <__swbuf_r+0x8e>
 8006a82:	4b0b      	ldr	r3, [pc, #44]	; (8006ab0 <__swbuf_r+0x9c>)
 8006a84:	429c      	cmp	r4, r3
 8006a86:	d101      	bne.n	8006a8c <__swbuf_r+0x78>
 8006a88:	68ac      	ldr	r4, [r5, #8]
 8006a8a:	e7d0      	b.n	8006a2e <__swbuf_r+0x1a>
 8006a8c:	4b09      	ldr	r3, [pc, #36]	; (8006ab4 <__swbuf_r+0xa0>)
 8006a8e:	429c      	cmp	r4, r3
 8006a90:	bf08      	it	eq
 8006a92:	68ec      	ldreq	r4, [r5, #12]
 8006a94:	e7cb      	b.n	8006a2e <__swbuf_r+0x1a>
 8006a96:	4621      	mov	r1, r4
 8006a98:	4628      	mov	r0, r5
 8006a9a:	f000 f80d 	bl	8006ab8 <__swsetup_r>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	d0cc      	beq.n	8006a3c <__swbuf_r+0x28>
 8006aa2:	f04f 37ff 	mov.w	r7, #4294967295
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	080091fc 	.word	0x080091fc
 8006ab0:	0800921c 	.word	0x0800921c
 8006ab4:	080091dc 	.word	0x080091dc

08006ab8 <__swsetup_r>:
 8006ab8:	4b32      	ldr	r3, [pc, #200]	; (8006b84 <__swsetup_r+0xcc>)
 8006aba:	b570      	push	{r4, r5, r6, lr}
 8006abc:	681d      	ldr	r5, [r3, #0]
 8006abe:	4606      	mov	r6, r0
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	b125      	cbz	r5, 8006ace <__swsetup_r+0x16>
 8006ac4:	69ab      	ldr	r3, [r5, #24]
 8006ac6:	b913      	cbnz	r3, 8006ace <__swsetup_r+0x16>
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f000 ffc3 	bl	8007a54 <__sinit>
 8006ace:	4b2e      	ldr	r3, [pc, #184]	; (8006b88 <__swsetup_r+0xd0>)
 8006ad0:	429c      	cmp	r4, r3
 8006ad2:	d10f      	bne.n	8006af4 <__swsetup_r+0x3c>
 8006ad4:	686c      	ldr	r4, [r5, #4]
 8006ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	0715      	lsls	r5, r2, #28
 8006ade:	d42c      	bmi.n	8006b3a <__swsetup_r+0x82>
 8006ae0:	06d0      	lsls	r0, r2, #27
 8006ae2:	d411      	bmi.n	8006b08 <__swsetup_r+0x50>
 8006ae4:	2209      	movs	r2, #9
 8006ae6:	6032      	str	r2, [r6, #0]
 8006ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aec:	81a3      	strh	r3, [r4, #12]
 8006aee:	f04f 30ff 	mov.w	r0, #4294967295
 8006af2:	bd70      	pop	{r4, r5, r6, pc}
 8006af4:	4b25      	ldr	r3, [pc, #148]	; (8006b8c <__swsetup_r+0xd4>)
 8006af6:	429c      	cmp	r4, r3
 8006af8:	d101      	bne.n	8006afe <__swsetup_r+0x46>
 8006afa:	68ac      	ldr	r4, [r5, #8]
 8006afc:	e7eb      	b.n	8006ad6 <__swsetup_r+0x1e>
 8006afe:	4b24      	ldr	r3, [pc, #144]	; (8006b90 <__swsetup_r+0xd8>)
 8006b00:	429c      	cmp	r4, r3
 8006b02:	bf08      	it	eq
 8006b04:	68ec      	ldreq	r4, [r5, #12]
 8006b06:	e7e6      	b.n	8006ad6 <__swsetup_r+0x1e>
 8006b08:	0751      	lsls	r1, r2, #29
 8006b0a:	d512      	bpl.n	8006b32 <__swsetup_r+0x7a>
 8006b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b0e:	b141      	cbz	r1, 8006b22 <__swsetup_r+0x6a>
 8006b10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b14:	4299      	cmp	r1, r3
 8006b16:	d002      	beq.n	8006b1e <__swsetup_r+0x66>
 8006b18:	4630      	mov	r0, r6
 8006b1a:	f001 fb99 	bl	8008250 <_free_r>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	6363      	str	r3, [r4, #52]	; 0x34
 8006b22:	89a3      	ldrh	r3, [r4, #12]
 8006b24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b28:	81a3      	strh	r3, [r4, #12]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	6063      	str	r3, [r4, #4]
 8006b2e:	6923      	ldr	r3, [r4, #16]
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	89a3      	ldrh	r3, [r4, #12]
 8006b34:	f043 0308 	orr.w	r3, r3, #8
 8006b38:	81a3      	strh	r3, [r4, #12]
 8006b3a:	6923      	ldr	r3, [r4, #16]
 8006b3c:	b94b      	cbnz	r3, 8006b52 <__swsetup_r+0x9a>
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b48:	d003      	beq.n	8006b52 <__swsetup_r+0x9a>
 8006b4a:	4621      	mov	r1, r4
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f001 f859 	bl	8007c04 <__smakebuf_r>
 8006b52:	89a2      	ldrh	r2, [r4, #12]
 8006b54:	f012 0301 	ands.w	r3, r2, #1
 8006b58:	d00c      	beq.n	8006b74 <__swsetup_r+0xbc>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60a3      	str	r3, [r4, #8]
 8006b5e:	6963      	ldr	r3, [r4, #20]
 8006b60:	425b      	negs	r3, r3
 8006b62:	61a3      	str	r3, [r4, #24]
 8006b64:	6923      	ldr	r3, [r4, #16]
 8006b66:	b953      	cbnz	r3, 8006b7e <__swsetup_r+0xc6>
 8006b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b6c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006b70:	d1ba      	bne.n	8006ae8 <__swsetup_r+0x30>
 8006b72:	bd70      	pop	{r4, r5, r6, pc}
 8006b74:	0792      	lsls	r2, r2, #30
 8006b76:	bf58      	it	pl
 8006b78:	6963      	ldrpl	r3, [r4, #20]
 8006b7a:	60a3      	str	r3, [r4, #8]
 8006b7c:	e7f2      	b.n	8006b64 <__swsetup_r+0xac>
 8006b7e:	2000      	movs	r0, #0
 8006b80:	e7f7      	b.n	8006b72 <__swsetup_r+0xba>
 8006b82:	bf00      	nop
 8006b84:	20000530 	.word	0x20000530
 8006b88:	080091fc 	.word	0x080091fc
 8006b8c:	0800921c 	.word	0x0800921c
 8006b90:	080091dc 	.word	0x080091dc

08006b94 <quorem>:
 8006b94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b98:	6903      	ldr	r3, [r0, #16]
 8006b9a:	690c      	ldr	r4, [r1, #16]
 8006b9c:	429c      	cmp	r4, r3
 8006b9e:	4680      	mov	r8, r0
 8006ba0:	f300 8082 	bgt.w	8006ca8 <quorem+0x114>
 8006ba4:	3c01      	subs	r4, #1
 8006ba6:	f101 0714 	add.w	r7, r1, #20
 8006baa:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8006bae:	f100 0614 	add.w	r6, r0, #20
 8006bb2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006bb6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006bba:	eb06 030e 	add.w	r3, r6, lr
 8006bbe:	3501      	adds	r5, #1
 8006bc0:	eb07 090e 	add.w	r9, r7, lr
 8006bc4:	9301      	str	r3, [sp, #4]
 8006bc6:	fbb0 f5f5 	udiv	r5, r0, r5
 8006bca:	b395      	cbz	r5, 8006c32 <quorem+0x9e>
 8006bcc:	f04f 0a00 	mov.w	sl, #0
 8006bd0:	4638      	mov	r0, r7
 8006bd2:	46b4      	mov	ip, r6
 8006bd4:	46d3      	mov	fp, sl
 8006bd6:	f850 2b04 	ldr.w	r2, [r0], #4
 8006bda:	b293      	uxth	r3, r2
 8006bdc:	fb05 a303 	mla	r3, r5, r3, sl
 8006be0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	ebab 0303 	sub.w	r3, fp, r3
 8006bea:	0c12      	lsrs	r2, r2, #16
 8006bec:	f8bc b000 	ldrh.w	fp, [ip]
 8006bf0:	fb05 a202 	mla	r2, r5, r2, sl
 8006bf4:	fa13 f38b 	uxtah	r3, r3, fp
 8006bf8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006bfc:	fa1f fb82 	uxth.w	fp, r2
 8006c00:	f8dc 2000 	ldr.w	r2, [ip]
 8006c04:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006c08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c12:	4581      	cmp	r9, r0
 8006c14:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006c18:	f84c 3b04 	str.w	r3, [ip], #4
 8006c1c:	d2db      	bcs.n	8006bd6 <quorem+0x42>
 8006c1e:	f856 300e 	ldr.w	r3, [r6, lr]
 8006c22:	b933      	cbnz	r3, 8006c32 <quorem+0x9e>
 8006c24:	9b01      	ldr	r3, [sp, #4]
 8006c26:	3b04      	subs	r3, #4
 8006c28:	429e      	cmp	r6, r3
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	d330      	bcc.n	8006c90 <quorem+0xfc>
 8006c2e:	f8c8 4010 	str.w	r4, [r8, #16]
 8006c32:	4640      	mov	r0, r8
 8006c34:	f001 fa37 	bl	80080a6 <__mcmp>
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	db25      	blt.n	8006c88 <quorem+0xf4>
 8006c3c:	3501      	adds	r5, #1
 8006c3e:	4630      	mov	r0, r6
 8006c40:	f04f 0e00 	mov.w	lr, #0
 8006c44:	f857 2b04 	ldr.w	r2, [r7], #4
 8006c48:	f8d0 c000 	ldr.w	ip, [r0]
 8006c4c:	b293      	uxth	r3, r2
 8006c4e:	ebae 0303 	sub.w	r3, lr, r3
 8006c52:	0c12      	lsrs	r2, r2, #16
 8006c54:	fa13 f38c 	uxtah	r3, r3, ip
 8006c58:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006c5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c66:	45b9      	cmp	r9, r7
 8006c68:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006c6c:	f840 3b04 	str.w	r3, [r0], #4
 8006c70:	d2e8      	bcs.n	8006c44 <quorem+0xb0>
 8006c72:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006c76:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006c7a:	b92a      	cbnz	r2, 8006c88 <quorem+0xf4>
 8006c7c:	3b04      	subs	r3, #4
 8006c7e:	429e      	cmp	r6, r3
 8006c80:	461a      	mov	r2, r3
 8006c82:	d30b      	bcc.n	8006c9c <quorem+0x108>
 8006c84:	f8c8 4010 	str.w	r4, [r8, #16]
 8006c88:	4628      	mov	r0, r5
 8006c8a:	b003      	add	sp, #12
 8006c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c90:	6812      	ldr	r2, [r2, #0]
 8006c92:	3b04      	subs	r3, #4
 8006c94:	2a00      	cmp	r2, #0
 8006c96:	d1ca      	bne.n	8006c2e <quorem+0x9a>
 8006c98:	3c01      	subs	r4, #1
 8006c9a:	e7c5      	b.n	8006c28 <quorem+0x94>
 8006c9c:	6812      	ldr	r2, [r2, #0]
 8006c9e:	3b04      	subs	r3, #4
 8006ca0:	2a00      	cmp	r2, #0
 8006ca2:	d1ef      	bne.n	8006c84 <quorem+0xf0>
 8006ca4:	3c01      	subs	r4, #1
 8006ca6:	e7ea      	b.n	8006c7e <quorem+0xea>
 8006ca8:	2000      	movs	r0, #0
 8006caa:	e7ee      	b.n	8006c8a <quorem+0xf6>
 8006cac:	0000      	movs	r0, r0
	...

08006cb0 <_dtoa_r>:
 8006cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb4:	ec57 6b10 	vmov	r6, r7, d0
 8006cb8:	b097      	sub	sp, #92	; 0x5c
 8006cba:	e9cd 6700 	strd	r6, r7, [sp]
 8006cbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006cc0:	9107      	str	r1, [sp, #28]
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	920a      	str	r2, [sp, #40]	; 0x28
 8006cc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006cc8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006cca:	b93e      	cbnz	r6, 8006cdc <_dtoa_r+0x2c>
 8006ccc:	2010      	movs	r0, #16
 8006cce:	f000 ffd9 	bl	8007c84 <malloc>
 8006cd2:	6260      	str	r0, [r4, #36]	; 0x24
 8006cd4:	6046      	str	r6, [r0, #4]
 8006cd6:	6086      	str	r6, [r0, #8]
 8006cd8:	6006      	str	r6, [r0, #0]
 8006cda:	60c6      	str	r6, [r0, #12]
 8006cdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cde:	6819      	ldr	r1, [r3, #0]
 8006ce0:	b151      	cbz	r1, 8006cf8 <_dtoa_r+0x48>
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	604a      	str	r2, [r1, #4]
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	4093      	lsls	r3, r2
 8006cea:	608b      	str	r3, [r1, #8]
 8006cec:	4620      	mov	r0, r4
 8006cee:	f001 f805 	bl	8007cfc <_Bfree>
 8006cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	9b01      	ldr	r3, [sp, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	bfbf      	itttt	lt
 8006cfe:	2301      	movlt	r3, #1
 8006d00:	602b      	strlt	r3, [r5, #0]
 8006d02:	9b01      	ldrlt	r3, [sp, #4]
 8006d04:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006d08:	bfb2      	itee	lt
 8006d0a:	9301      	strlt	r3, [sp, #4]
 8006d0c:	2300      	movge	r3, #0
 8006d0e:	602b      	strge	r3, [r5, #0]
 8006d10:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006d14:	4ba8      	ldr	r3, [pc, #672]	; (8006fb8 <_dtoa_r+0x308>)
 8006d16:	ea33 0308 	bics.w	r3, r3, r8
 8006d1a:	d11b      	bne.n	8006d54 <_dtoa_r+0xa4>
 8006d1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d1e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d22:	6013      	str	r3, [r2, #0]
 8006d24:	9b00      	ldr	r3, [sp, #0]
 8006d26:	b923      	cbnz	r3, 8006d32 <_dtoa_r+0x82>
 8006d28:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	f000 8578 	beq.w	8007822 <_dtoa_r+0xb72>
 8006d32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d34:	b953      	cbnz	r3, 8006d4c <_dtoa_r+0x9c>
 8006d36:	4ba1      	ldr	r3, [pc, #644]	; (8006fbc <_dtoa_r+0x30c>)
 8006d38:	e021      	b.n	8006d7e <_dtoa_r+0xce>
 8006d3a:	4ba1      	ldr	r3, [pc, #644]	; (8006fc0 <_dtoa_r+0x310>)
 8006d3c:	9302      	str	r3, [sp, #8]
 8006d3e:	3308      	adds	r3, #8
 8006d40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d42:	6013      	str	r3, [r2, #0]
 8006d44:	9802      	ldr	r0, [sp, #8]
 8006d46:	b017      	add	sp, #92	; 0x5c
 8006d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d4c:	4b9b      	ldr	r3, [pc, #620]	; (8006fbc <_dtoa_r+0x30c>)
 8006d4e:	9302      	str	r3, [sp, #8]
 8006d50:	3303      	adds	r3, #3
 8006d52:	e7f5      	b.n	8006d40 <_dtoa_r+0x90>
 8006d54:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	4639      	mov	r1, r7
 8006d60:	f7f9 feae 	bl	8000ac0 <__aeabi_dcmpeq>
 8006d64:	4681      	mov	r9, r0
 8006d66:	b160      	cbz	r0, 8006d82 <_dtoa_r+0xd2>
 8006d68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	6013      	str	r3, [r2, #0]
 8006d6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 8553 	beq.w	800781c <_dtoa_r+0xb6c>
 8006d76:	4b93      	ldr	r3, [pc, #588]	; (8006fc4 <_dtoa_r+0x314>)
 8006d78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d7a:	6013      	str	r3, [r2, #0]
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	9302      	str	r3, [sp, #8]
 8006d80:	e7e0      	b.n	8006d44 <_dtoa_r+0x94>
 8006d82:	aa14      	add	r2, sp, #80	; 0x50
 8006d84:	a915      	add	r1, sp, #84	; 0x54
 8006d86:	ec47 6b10 	vmov	d0, r6, r7
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	f001 fa03 	bl	8008196 <__d2b>
 8006d90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006d94:	4682      	mov	sl, r0
 8006d96:	2d00      	cmp	r5, #0
 8006d98:	d07e      	beq.n	8006e98 <_dtoa_r+0x1e8>
 8006d9a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d9e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006da2:	4630      	mov	r0, r6
 8006da4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006da8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006dac:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8006db0:	2200      	movs	r2, #0
 8006db2:	4b85      	ldr	r3, [pc, #532]	; (8006fc8 <_dtoa_r+0x318>)
 8006db4:	f7f9 fa68 	bl	8000288 <__aeabi_dsub>
 8006db8:	a379      	add	r3, pc, #484	; (adr r3, 8006fa0 <_dtoa_r+0x2f0>)
 8006dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dbe:	f7f9 fc17 	bl	80005f0 <__aeabi_dmul>
 8006dc2:	a379      	add	r3, pc, #484	; (adr r3, 8006fa8 <_dtoa_r+0x2f8>)
 8006dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc8:	f7f9 fa60 	bl	800028c <__adddf3>
 8006dcc:	4606      	mov	r6, r0
 8006dce:	4628      	mov	r0, r5
 8006dd0:	460f      	mov	r7, r1
 8006dd2:	f7f9 fba7 	bl	8000524 <__aeabi_i2d>
 8006dd6:	a376      	add	r3, pc, #472	; (adr r3, 8006fb0 <_dtoa_r+0x300>)
 8006dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ddc:	f7f9 fc08 	bl	80005f0 <__aeabi_dmul>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4630      	mov	r0, r6
 8006de6:	4639      	mov	r1, r7
 8006de8:	f7f9 fa50 	bl	800028c <__adddf3>
 8006dec:	4606      	mov	r6, r0
 8006dee:	460f      	mov	r7, r1
 8006df0:	f7f9 feae 	bl	8000b50 <__aeabi_d2iz>
 8006df4:	2200      	movs	r2, #0
 8006df6:	4683      	mov	fp, r0
 8006df8:	2300      	movs	r3, #0
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	4639      	mov	r1, r7
 8006dfe:	f7f9 fe69 	bl	8000ad4 <__aeabi_dcmplt>
 8006e02:	b158      	cbz	r0, 8006e1c <_dtoa_r+0x16c>
 8006e04:	4658      	mov	r0, fp
 8006e06:	f7f9 fb8d 	bl	8000524 <__aeabi_i2d>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4630      	mov	r0, r6
 8006e10:	4639      	mov	r1, r7
 8006e12:	f7f9 fe55 	bl	8000ac0 <__aeabi_dcmpeq>
 8006e16:	b908      	cbnz	r0, 8006e1c <_dtoa_r+0x16c>
 8006e18:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e1c:	f1bb 0f16 	cmp.w	fp, #22
 8006e20:	d859      	bhi.n	8006ed6 <_dtoa_r+0x226>
 8006e22:	496a      	ldr	r1, [pc, #424]	; (8006fcc <_dtoa_r+0x31c>)
 8006e24:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006e28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e30:	f7f9 fe6e 	bl	8000b10 <__aeabi_dcmpgt>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d050      	beq.n	8006eda <_dtoa_r+0x22a>
 8006e38:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	930e      	str	r3, [sp, #56]	; 0x38
 8006e40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e42:	1b5d      	subs	r5, r3, r5
 8006e44:	1e6b      	subs	r3, r5, #1
 8006e46:	9306      	str	r3, [sp, #24]
 8006e48:	bf45      	ittet	mi
 8006e4a:	f1c5 0301 	rsbmi	r3, r5, #1
 8006e4e:	9305      	strmi	r3, [sp, #20]
 8006e50:	2300      	movpl	r3, #0
 8006e52:	2300      	movmi	r3, #0
 8006e54:	bf4c      	ite	mi
 8006e56:	9306      	strmi	r3, [sp, #24]
 8006e58:	9305      	strpl	r3, [sp, #20]
 8006e5a:	f1bb 0f00 	cmp.w	fp, #0
 8006e5e:	db3e      	blt.n	8006ede <_dtoa_r+0x22e>
 8006e60:	9b06      	ldr	r3, [sp, #24]
 8006e62:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006e66:	445b      	add	r3, fp
 8006e68:	9306      	str	r3, [sp, #24]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	9308      	str	r3, [sp, #32]
 8006e6e:	9b07      	ldr	r3, [sp, #28]
 8006e70:	2b09      	cmp	r3, #9
 8006e72:	f200 80af 	bhi.w	8006fd4 <_dtoa_r+0x324>
 8006e76:	2b05      	cmp	r3, #5
 8006e78:	bfc4      	itt	gt
 8006e7a:	3b04      	subgt	r3, #4
 8006e7c:	9307      	strgt	r3, [sp, #28]
 8006e7e:	9b07      	ldr	r3, [sp, #28]
 8006e80:	f1a3 0302 	sub.w	r3, r3, #2
 8006e84:	bfcc      	ite	gt
 8006e86:	2600      	movgt	r6, #0
 8006e88:	2601      	movle	r6, #1
 8006e8a:	2b03      	cmp	r3, #3
 8006e8c:	f200 80ae 	bhi.w	8006fec <_dtoa_r+0x33c>
 8006e90:	e8df f003 	tbb	[pc, r3]
 8006e94:	772f8482 	.word	0x772f8482
 8006e98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e9a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8006e9c:	441d      	add	r5, r3
 8006e9e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006ea2:	2b20      	cmp	r3, #32
 8006ea4:	dd11      	ble.n	8006eca <_dtoa_r+0x21a>
 8006ea6:	9a00      	ldr	r2, [sp, #0]
 8006ea8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006eac:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006eb0:	fa22 f000 	lsr.w	r0, r2, r0
 8006eb4:	fa08 f303 	lsl.w	r3, r8, r3
 8006eb8:	4318      	orrs	r0, r3
 8006eba:	f7f9 fb23 	bl	8000504 <__aeabi_ui2d>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006ec4:	3d01      	subs	r5, #1
 8006ec6:	9312      	str	r3, [sp, #72]	; 0x48
 8006ec8:	e772      	b.n	8006db0 <_dtoa_r+0x100>
 8006eca:	f1c3 0020 	rsb	r0, r3, #32
 8006ece:	9b00      	ldr	r3, [sp, #0]
 8006ed0:	fa03 f000 	lsl.w	r0, r3, r0
 8006ed4:	e7f1      	b.n	8006eba <_dtoa_r+0x20a>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e7b1      	b.n	8006e3e <_dtoa_r+0x18e>
 8006eda:	900e      	str	r0, [sp, #56]	; 0x38
 8006edc:	e7b0      	b.n	8006e40 <_dtoa_r+0x190>
 8006ede:	9b05      	ldr	r3, [sp, #20]
 8006ee0:	eba3 030b 	sub.w	r3, r3, fp
 8006ee4:	9305      	str	r3, [sp, #20]
 8006ee6:	f1cb 0300 	rsb	r3, fp, #0
 8006eea:	9308      	str	r3, [sp, #32]
 8006eec:	2300      	movs	r3, #0
 8006eee:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ef0:	e7bd      	b.n	8006e6e <_dtoa_r+0x1be>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	dd7a      	ble.n	8006ff2 <_dtoa_r+0x342>
 8006efc:	9304      	str	r3, [sp, #16]
 8006efe:	9303      	str	r3, [sp, #12]
 8006f00:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006f02:	2200      	movs	r2, #0
 8006f04:	606a      	str	r2, [r5, #4]
 8006f06:	2104      	movs	r1, #4
 8006f08:	f101 0214 	add.w	r2, r1, #20
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d975      	bls.n	8006ffc <_dtoa_r+0x34c>
 8006f10:	6869      	ldr	r1, [r5, #4]
 8006f12:	4620      	mov	r0, r4
 8006f14:	f000 febe 	bl	8007c94 <_Balloc>
 8006f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f1a:	6028      	str	r0, [r5, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	9302      	str	r3, [sp, #8]
 8006f20:	9b03      	ldr	r3, [sp, #12]
 8006f22:	2b0e      	cmp	r3, #14
 8006f24:	f200 80e5 	bhi.w	80070f2 <_dtoa_r+0x442>
 8006f28:	2e00      	cmp	r6, #0
 8006f2a:	f000 80e2 	beq.w	80070f2 <_dtoa_r+0x442>
 8006f2e:	ed9d 7b00 	vldr	d7, [sp]
 8006f32:	f1bb 0f00 	cmp.w	fp, #0
 8006f36:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006f3a:	dd74      	ble.n	8007026 <_dtoa_r+0x376>
 8006f3c:	4a23      	ldr	r2, [pc, #140]	; (8006fcc <_dtoa_r+0x31c>)
 8006f3e:	f00b 030f 	and.w	r3, fp, #15
 8006f42:	ea4f 162b 	mov.w	r6, fp, asr #4
 8006f46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006f4a:	06f0      	lsls	r0, r6, #27
 8006f4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f50:	d559      	bpl.n	8007006 <_dtoa_r+0x356>
 8006f52:	4b1f      	ldr	r3, [pc, #124]	; (8006fd0 <_dtoa_r+0x320>)
 8006f54:	ec51 0b17 	vmov	r0, r1, d7
 8006f58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f5c:	f7f9 fc72 	bl	8000844 <__aeabi_ddiv>
 8006f60:	e9cd 0100 	strd	r0, r1, [sp]
 8006f64:	f006 060f 	and.w	r6, r6, #15
 8006f68:	2503      	movs	r5, #3
 8006f6a:	4f19      	ldr	r7, [pc, #100]	; (8006fd0 <_dtoa_r+0x320>)
 8006f6c:	2e00      	cmp	r6, #0
 8006f6e:	d14c      	bne.n	800700a <_dtoa_r+0x35a>
 8006f70:	4642      	mov	r2, r8
 8006f72:	464b      	mov	r3, r9
 8006f74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f78:	f7f9 fc64 	bl	8000844 <__aeabi_ddiv>
 8006f7c:	e9cd 0100 	strd	r0, r1, [sp]
 8006f80:	e06a      	b.n	8007058 <_dtoa_r+0x3a8>
 8006f82:	2301      	movs	r3, #1
 8006f84:	9309      	str	r3, [sp, #36]	; 0x24
 8006f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f88:	445b      	add	r3, fp
 8006f8a:	9304      	str	r3, [sp, #16]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	9303      	str	r3, [sp, #12]
 8006f92:	bfb8      	it	lt
 8006f94:	2301      	movlt	r3, #1
 8006f96:	e7b3      	b.n	8006f00 <_dtoa_r+0x250>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	e7ab      	b.n	8006ef4 <_dtoa_r+0x244>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	e7f1      	b.n	8006f84 <_dtoa_r+0x2d4>
 8006fa0:	636f4361 	.word	0x636f4361
 8006fa4:	3fd287a7 	.word	0x3fd287a7
 8006fa8:	8b60c8b3 	.word	0x8b60c8b3
 8006fac:	3fc68a28 	.word	0x3fc68a28
 8006fb0:	509f79fb 	.word	0x509f79fb
 8006fb4:	3fd34413 	.word	0x3fd34413
 8006fb8:	7ff00000 	.word	0x7ff00000
 8006fbc:	080091d7 	.word	0x080091d7
 8006fc0:	080091ce 	.word	0x080091ce
 8006fc4:	08008c47 	.word	0x08008c47
 8006fc8:	3ff80000 	.word	0x3ff80000
 8006fcc:	08009268 	.word	0x08009268
 8006fd0:	08009240 	.word	0x08009240
 8006fd4:	2601      	movs	r6, #1
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	9307      	str	r3, [sp, #28]
 8006fda:	9609      	str	r6, [sp, #36]	; 0x24
 8006fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8006fe0:	9304      	str	r3, [sp, #16]
 8006fe2:	9303      	str	r3, [sp, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	2312      	movs	r3, #18
 8006fe8:	920a      	str	r2, [sp, #40]	; 0x28
 8006fea:	e789      	b.n	8006f00 <_dtoa_r+0x250>
 8006fec:	2301      	movs	r3, #1
 8006fee:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff0:	e7f4      	b.n	8006fdc <_dtoa_r+0x32c>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	9304      	str	r3, [sp, #16]
 8006ff6:	9303      	str	r3, [sp, #12]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	e7f5      	b.n	8006fe8 <_dtoa_r+0x338>
 8006ffc:	686a      	ldr	r2, [r5, #4]
 8006ffe:	3201      	adds	r2, #1
 8007000:	606a      	str	r2, [r5, #4]
 8007002:	0049      	lsls	r1, r1, #1
 8007004:	e780      	b.n	8006f08 <_dtoa_r+0x258>
 8007006:	2502      	movs	r5, #2
 8007008:	e7af      	b.n	8006f6a <_dtoa_r+0x2ba>
 800700a:	07f1      	lsls	r1, r6, #31
 800700c:	d508      	bpl.n	8007020 <_dtoa_r+0x370>
 800700e:	4640      	mov	r0, r8
 8007010:	4649      	mov	r1, r9
 8007012:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007016:	f7f9 faeb 	bl	80005f0 <__aeabi_dmul>
 800701a:	3501      	adds	r5, #1
 800701c:	4680      	mov	r8, r0
 800701e:	4689      	mov	r9, r1
 8007020:	1076      	asrs	r6, r6, #1
 8007022:	3708      	adds	r7, #8
 8007024:	e7a2      	b.n	8006f6c <_dtoa_r+0x2bc>
 8007026:	f000 809d 	beq.w	8007164 <_dtoa_r+0x4b4>
 800702a:	f1cb 0600 	rsb	r6, fp, #0
 800702e:	4b9f      	ldr	r3, [pc, #636]	; (80072ac <_dtoa_r+0x5fc>)
 8007030:	4f9f      	ldr	r7, [pc, #636]	; (80072b0 <_dtoa_r+0x600>)
 8007032:	f006 020f 	and.w	r2, r6, #15
 8007036:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800703a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007042:	f7f9 fad5 	bl	80005f0 <__aeabi_dmul>
 8007046:	e9cd 0100 	strd	r0, r1, [sp]
 800704a:	1136      	asrs	r6, r6, #4
 800704c:	2300      	movs	r3, #0
 800704e:	2502      	movs	r5, #2
 8007050:	2e00      	cmp	r6, #0
 8007052:	d17c      	bne.n	800714e <_dtoa_r+0x49e>
 8007054:	2b00      	cmp	r3, #0
 8007056:	d191      	bne.n	8006f7c <_dtoa_r+0x2cc>
 8007058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800705a:	2b00      	cmp	r3, #0
 800705c:	f000 8084 	beq.w	8007168 <_dtoa_r+0x4b8>
 8007060:	e9dd 8900 	ldrd	r8, r9, [sp]
 8007064:	2200      	movs	r2, #0
 8007066:	4b93      	ldr	r3, [pc, #588]	; (80072b4 <_dtoa_r+0x604>)
 8007068:	4640      	mov	r0, r8
 800706a:	4649      	mov	r1, r9
 800706c:	f7f9 fd32 	bl	8000ad4 <__aeabi_dcmplt>
 8007070:	2800      	cmp	r0, #0
 8007072:	d079      	beq.n	8007168 <_dtoa_r+0x4b8>
 8007074:	9b03      	ldr	r3, [sp, #12]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d076      	beq.n	8007168 <_dtoa_r+0x4b8>
 800707a:	9b04      	ldr	r3, [sp, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	dd34      	ble.n	80070ea <_dtoa_r+0x43a>
 8007080:	2200      	movs	r2, #0
 8007082:	4b8d      	ldr	r3, [pc, #564]	; (80072b8 <_dtoa_r+0x608>)
 8007084:	4640      	mov	r0, r8
 8007086:	4649      	mov	r1, r9
 8007088:	f7f9 fab2 	bl	80005f0 <__aeabi_dmul>
 800708c:	e9cd 0100 	strd	r0, r1, [sp]
 8007090:	9e04      	ldr	r6, [sp, #16]
 8007092:	f10b 37ff 	add.w	r7, fp, #4294967295
 8007096:	3501      	adds	r5, #1
 8007098:	4628      	mov	r0, r5
 800709a:	f7f9 fa43 	bl	8000524 <__aeabi_i2d>
 800709e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070a2:	f7f9 faa5 	bl	80005f0 <__aeabi_dmul>
 80070a6:	2200      	movs	r2, #0
 80070a8:	4b84      	ldr	r3, [pc, #528]	; (80072bc <_dtoa_r+0x60c>)
 80070aa:	f7f9 f8ef 	bl	800028c <__adddf3>
 80070ae:	4680      	mov	r8, r0
 80070b0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80070b4:	2e00      	cmp	r6, #0
 80070b6:	d15a      	bne.n	800716e <_dtoa_r+0x4be>
 80070b8:	2200      	movs	r2, #0
 80070ba:	4b81      	ldr	r3, [pc, #516]	; (80072c0 <_dtoa_r+0x610>)
 80070bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070c0:	f7f9 f8e2 	bl	8000288 <__aeabi_dsub>
 80070c4:	4642      	mov	r2, r8
 80070c6:	464b      	mov	r3, r9
 80070c8:	e9cd 0100 	strd	r0, r1, [sp]
 80070cc:	f7f9 fd20 	bl	8000b10 <__aeabi_dcmpgt>
 80070d0:	2800      	cmp	r0, #0
 80070d2:	f040 829b 	bne.w	800760c <_dtoa_r+0x95c>
 80070d6:	4642      	mov	r2, r8
 80070d8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80070dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070e0:	f7f9 fcf8 	bl	8000ad4 <__aeabi_dcmplt>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	f040 828f 	bne.w	8007608 <_dtoa_r+0x958>
 80070ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80070ee:	e9cd 2300 	strd	r2, r3, [sp]
 80070f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f2c0 8150 	blt.w	800739a <_dtoa_r+0x6ea>
 80070fa:	f1bb 0f0e 	cmp.w	fp, #14
 80070fe:	f300 814c 	bgt.w	800739a <_dtoa_r+0x6ea>
 8007102:	4b6a      	ldr	r3, [pc, #424]	; (80072ac <_dtoa_r+0x5fc>)
 8007104:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007108:	e9d3 8900 	ldrd	r8, r9, [r3]
 800710c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800710e:	2b00      	cmp	r3, #0
 8007110:	f280 80da 	bge.w	80072c8 <_dtoa_r+0x618>
 8007114:	9b03      	ldr	r3, [sp, #12]
 8007116:	2b00      	cmp	r3, #0
 8007118:	f300 80d6 	bgt.w	80072c8 <_dtoa_r+0x618>
 800711c:	f040 8273 	bne.w	8007606 <_dtoa_r+0x956>
 8007120:	2200      	movs	r2, #0
 8007122:	4b67      	ldr	r3, [pc, #412]	; (80072c0 <_dtoa_r+0x610>)
 8007124:	4640      	mov	r0, r8
 8007126:	4649      	mov	r1, r9
 8007128:	f7f9 fa62 	bl	80005f0 <__aeabi_dmul>
 800712c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007130:	f7f9 fce4 	bl	8000afc <__aeabi_dcmpge>
 8007134:	9e03      	ldr	r6, [sp, #12]
 8007136:	4637      	mov	r7, r6
 8007138:	2800      	cmp	r0, #0
 800713a:	f040 824a 	bne.w	80075d2 <_dtoa_r+0x922>
 800713e:	9b02      	ldr	r3, [sp, #8]
 8007140:	9a02      	ldr	r2, [sp, #8]
 8007142:	1c5d      	adds	r5, r3, #1
 8007144:	2331      	movs	r3, #49	; 0x31
 8007146:	7013      	strb	r3, [r2, #0]
 8007148:	f10b 0b01 	add.w	fp, fp, #1
 800714c:	e245      	b.n	80075da <_dtoa_r+0x92a>
 800714e:	07f2      	lsls	r2, r6, #31
 8007150:	d505      	bpl.n	800715e <_dtoa_r+0x4ae>
 8007152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007156:	f7f9 fa4b 	bl	80005f0 <__aeabi_dmul>
 800715a:	3501      	adds	r5, #1
 800715c:	2301      	movs	r3, #1
 800715e:	1076      	asrs	r6, r6, #1
 8007160:	3708      	adds	r7, #8
 8007162:	e775      	b.n	8007050 <_dtoa_r+0x3a0>
 8007164:	2502      	movs	r5, #2
 8007166:	e777      	b.n	8007058 <_dtoa_r+0x3a8>
 8007168:	465f      	mov	r7, fp
 800716a:	9e03      	ldr	r6, [sp, #12]
 800716c:	e794      	b.n	8007098 <_dtoa_r+0x3e8>
 800716e:	9a02      	ldr	r2, [sp, #8]
 8007170:	4b4e      	ldr	r3, [pc, #312]	; (80072ac <_dtoa_r+0x5fc>)
 8007172:	4432      	add	r2, r6
 8007174:	9213      	str	r2, [sp, #76]	; 0x4c
 8007176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007178:	1e71      	subs	r1, r6, #1
 800717a:	2a00      	cmp	r2, #0
 800717c:	d048      	beq.n	8007210 <_dtoa_r+0x560>
 800717e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	2000      	movs	r0, #0
 8007188:	494e      	ldr	r1, [pc, #312]	; (80072c4 <_dtoa_r+0x614>)
 800718a:	f7f9 fb5b 	bl	8000844 <__aeabi_ddiv>
 800718e:	4642      	mov	r2, r8
 8007190:	464b      	mov	r3, r9
 8007192:	f7f9 f879 	bl	8000288 <__aeabi_dsub>
 8007196:	9d02      	ldr	r5, [sp, #8]
 8007198:	4680      	mov	r8, r0
 800719a:	4689      	mov	r9, r1
 800719c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071a0:	f7f9 fcd6 	bl	8000b50 <__aeabi_d2iz>
 80071a4:	4606      	mov	r6, r0
 80071a6:	f7f9 f9bd 	bl	8000524 <__aeabi_i2d>
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071b2:	f7f9 f869 	bl	8000288 <__aeabi_dsub>
 80071b6:	3630      	adds	r6, #48	; 0x30
 80071b8:	f805 6b01 	strb.w	r6, [r5], #1
 80071bc:	4642      	mov	r2, r8
 80071be:	464b      	mov	r3, r9
 80071c0:	e9cd 0100 	strd	r0, r1, [sp]
 80071c4:	f7f9 fc86 	bl	8000ad4 <__aeabi_dcmplt>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	d165      	bne.n	8007298 <_dtoa_r+0x5e8>
 80071cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071d0:	2000      	movs	r0, #0
 80071d2:	4938      	ldr	r1, [pc, #224]	; (80072b4 <_dtoa_r+0x604>)
 80071d4:	f7f9 f858 	bl	8000288 <__aeabi_dsub>
 80071d8:	4642      	mov	r2, r8
 80071da:	464b      	mov	r3, r9
 80071dc:	f7f9 fc7a 	bl	8000ad4 <__aeabi_dcmplt>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	f040 80ba 	bne.w	800735a <_dtoa_r+0x6aa>
 80071e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071e8:	429d      	cmp	r5, r3
 80071ea:	f43f af7e 	beq.w	80070ea <_dtoa_r+0x43a>
 80071ee:	2200      	movs	r2, #0
 80071f0:	4b31      	ldr	r3, [pc, #196]	; (80072b8 <_dtoa_r+0x608>)
 80071f2:	4640      	mov	r0, r8
 80071f4:	4649      	mov	r1, r9
 80071f6:	f7f9 f9fb 	bl	80005f0 <__aeabi_dmul>
 80071fa:	2200      	movs	r2, #0
 80071fc:	4680      	mov	r8, r0
 80071fe:	4689      	mov	r9, r1
 8007200:	4b2d      	ldr	r3, [pc, #180]	; (80072b8 <_dtoa_r+0x608>)
 8007202:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007206:	f7f9 f9f3 	bl	80005f0 <__aeabi_dmul>
 800720a:	e9cd 0100 	strd	r0, r1, [sp]
 800720e:	e7c5      	b.n	800719c <_dtoa_r+0x4ec>
 8007210:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007214:	4642      	mov	r2, r8
 8007216:	464b      	mov	r3, r9
 8007218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800721c:	f7f9 f9e8 	bl	80005f0 <__aeabi_dmul>
 8007220:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007224:	9d02      	ldr	r5, [sp, #8]
 8007226:	e9dd 0100 	ldrd	r0, r1, [sp]
 800722a:	f7f9 fc91 	bl	8000b50 <__aeabi_d2iz>
 800722e:	4606      	mov	r6, r0
 8007230:	f7f9 f978 	bl	8000524 <__aeabi_i2d>
 8007234:	3630      	adds	r6, #48	; 0x30
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800723e:	f7f9 f823 	bl	8000288 <__aeabi_dsub>
 8007242:	f805 6b01 	strb.w	r6, [r5], #1
 8007246:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007248:	42ab      	cmp	r3, r5
 800724a:	4680      	mov	r8, r0
 800724c:	4689      	mov	r9, r1
 800724e:	f04f 0200 	mov.w	r2, #0
 8007252:	d125      	bne.n	80072a0 <_dtoa_r+0x5f0>
 8007254:	4b1b      	ldr	r3, [pc, #108]	; (80072c4 <_dtoa_r+0x614>)
 8007256:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800725a:	f7f9 f817 	bl	800028c <__adddf3>
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	4640      	mov	r0, r8
 8007264:	4649      	mov	r1, r9
 8007266:	f7f9 fc53 	bl	8000b10 <__aeabi_dcmpgt>
 800726a:	2800      	cmp	r0, #0
 800726c:	d175      	bne.n	800735a <_dtoa_r+0x6aa>
 800726e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007272:	2000      	movs	r0, #0
 8007274:	4913      	ldr	r1, [pc, #76]	; (80072c4 <_dtoa_r+0x614>)
 8007276:	f7f9 f807 	bl	8000288 <__aeabi_dsub>
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	4640      	mov	r0, r8
 8007280:	4649      	mov	r1, r9
 8007282:	f7f9 fc27 	bl	8000ad4 <__aeabi_dcmplt>
 8007286:	2800      	cmp	r0, #0
 8007288:	f43f af2f 	beq.w	80070ea <_dtoa_r+0x43a>
 800728c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007290:	2b30      	cmp	r3, #48	; 0x30
 8007292:	f105 32ff 	add.w	r2, r5, #4294967295
 8007296:	d001      	beq.n	800729c <_dtoa_r+0x5ec>
 8007298:	46bb      	mov	fp, r7
 800729a:	e04d      	b.n	8007338 <_dtoa_r+0x688>
 800729c:	4615      	mov	r5, r2
 800729e:	e7f5      	b.n	800728c <_dtoa_r+0x5dc>
 80072a0:	4b05      	ldr	r3, [pc, #20]	; (80072b8 <_dtoa_r+0x608>)
 80072a2:	f7f9 f9a5 	bl	80005f0 <__aeabi_dmul>
 80072a6:	e9cd 0100 	strd	r0, r1, [sp]
 80072aa:	e7bc      	b.n	8007226 <_dtoa_r+0x576>
 80072ac:	08009268 	.word	0x08009268
 80072b0:	08009240 	.word	0x08009240
 80072b4:	3ff00000 	.word	0x3ff00000
 80072b8:	40240000 	.word	0x40240000
 80072bc:	401c0000 	.word	0x401c0000
 80072c0:	40140000 	.word	0x40140000
 80072c4:	3fe00000 	.word	0x3fe00000
 80072c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80072cc:	9d02      	ldr	r5, [sp, #8]
 80072ce:	4642      	mov	r2, r8
 80072d0:	464b      	mov	r3, r9
 80072d2:	4630      	mov	r0, r6
 80072d4:	4639      	mov	r1, r7
 80072d6:	f7f9 fab5 	bl	8000844 <__aeabi_ddiv>
 80072da:	f7f9 fc39 	bl	8000b50 <__aeabi_d2iz>
 80072de:	9000      	str	r0, [sp, #0]
 80072e0:	f7f9 f920 	bl	8000524 <__aeabi_i2d>
 80072e4:	4642      	mov	r2, r8
 80072e6:	464b      	mov	r3, r9
 80072e8:	f7f9 f982 	bl	80005f0 <__aeabi_dmul>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4630      	mov	r0, r6
 80072f2:	4639      	mov	r1, r7
 80072f4:	f7f8 ffc8 	bl	8000288 <__aeabi_dsub>
 80072f8:	9e00      	ldr	r6, [sp, #0]
 80072fa:	9f03      	ldr	r7, [sp, #12]
 80072fc:	3630      	adds	r6, #48	; 0x30
 80072fe:	f805 6b01 	strb.w	r6, [r5], #1
 8007302:	9e02      	ldr	r6, [sp, #8]
 8007304:	1bae      	subs	r6, r5, r6
 8007306:	42b7      	cmp	r7, r6
 8007308:	4602      	mov	r2, r0
 800730a:	460b      	mov	r3, r1
 800730c:	d138      	bne.n	8007380 <_dtoa_r+0x6d0>
 800730e:	f7f8 ffbd 	bl	800028c <__adddf3>
 8007312:	4606      	mov	r6, r0
 8007314:	460f      	mov	r7, r1
 8007316:	4602      	mov	r2, r0
 8007318:	460b      	mov	r3, r1
 800731a:	4640      	mov	r0, r8
 800731c:	4649      	mov	r1, r9
 800731e:	f7f9 fbd9 	bl	8000ad4 <__aeabi_dcmplt>
 8007322:	b9c8      	cbnz	r0, 8007358 <_dtoa_r+0x6a8>
 8007324:	4632      	mov	r2, r6
 8007326:	463b      	mov	r3, r7
 8007328:	4640      	mov	r0, r8
 800732a:	4649      	mov	r1, r9
 800732c:	f7f9 fbc8 	bl	8000ac0 <__aeabi_dcmpeq>
 8007330:	b110      	cbz	r0, 8007338 <_dtoa_r+0x688>
 8007332:	9b00      	ldr	r3, [sp, #0]
 8007334:	07db      	lsls	r3, r3, #31
 8007336:	d40f      	bmi.n	8007358 <_dtoa_r+0x6a8>
 8007338:	4651      	mov	r1, sl
 800733a:	4620      	mov	r0, r4
 800733c:	f000 fcde 	bl	8007cfc <_Bfree>
 8007340:	2300      	movs	r3, #0
 8007342:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007344:	702b      	strb	r3, [r5, #0]
 8007346:	f10b 0301 	add.w	r3, fp, #1
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800734e:	2b00      	cmp	r3, #0
 8007350:	f43f acf8 	beq.w	8006d44 <_dtoa_r+0x94>
 8007354:	601d      	str	r5, [r3, #0]
 8007356:	e4f5      	b.n	8006d44 <_dtoa_r+0x94>
 8007358:	465f      	mov	r7, fp
 800735a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800735e:	2a39      	cmp	r2, #57	; 0x39
 8007360:	f105 33ff 	add.w	r3, r5, #4294967295
 8007364:	d106      	bne.n	8007374 <_dtoa_r+0x6c4>
 8007366:	9a02      	ldr	r2, [sp, #8]
 8007368:	429a      	cmp	r2, r3
 800736a:	d107      	bne.n	800737c <_dtoa_r+0x6cc>
 800736c:	2330      	movs	r3, #48	; 0x30
 800736e:	7013      	strb	r3, [r2, #0]
 8007370:	3701      	adds	r7, #1
 8007372:	4613      	mov	r3, r2
 8007374:	781a      	ldrb	r2, [r3, #0]
 8007376:	3201      	adds	r2, #1
 8007378:	701a      	strb	r2, [r3, #0]
 800737a:	e78d      	b.n	8007298 <_dtoa_r+0x5e8>
 800737c:	461d      	mov	r5, r3
 800737e:	e7ec      	b.n	800735a <_dtoa_r+0x6aa>
 8007380:	2200      	movs	r2, #0
 8007382:	4ba4      	ldr	r3, [pc, #656]	; (8007614 <_dtoa_r+0x964>)
 8007384:	f7f9 f934 	bl	80005f0 <__aeabi_dmul>
 8007388:	2200      	movs	r2, #0
 800738a:	2300      	movs	r3, #0
 800738c:	4606      	mov	r6, r0
 800738e:	460f      	mov	r7, r1
 8007390:	f7f9 fb96 	bl	8000ac0 <__aeabi_dcmpeq>
 8007394:	2800      	cmp	r0, #0
 8007396:	d09a      	beq.n	80072ce <_dtoa_r+0x61e>
 8007398:	e7ce      	b.n	8007338 <_dtoa_r+0x688>
 800739a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800739c:	2a00      	cmp	r2, #0
 800739e:	f000 80cd 	beq.w	800753c <_dtoa_r+0x88c>
 80073a2:	9a07      	ldr	r2, [sp, #28]
 80073a4:	2a01      	cmp	r2, #1
 80073a6:	f300 80af 	bgt.w	8007508 <_dtoa_r+0x858>
 80073aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80073ac:	2a00      	cmp	r2, #0
 80073ae:	f000 80a7 	beq.w	8007500 <_dtoa_r+0x850>
 80073b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80073b6:	9e08      	ldr	r6, [sp, #32]
 80073b8:	9d05      	ldr	r5, [sp, #20]
 80073ba:	9a05      	ldr	r2, [sp, #20]
 80073bc:	441a      	add	r2, r3
 80073be:	9205      	str	r2, [sp, #20]
 80073c0:	9a06      	ldr	r2, [sp, #24]
 80073c2:	2101      	movs	r1, #1
 80073c4:	441a      	add	r2, r3
 80073c6:	4620      	mov	r0, r4
 80073c8:	9206      	str	r2, [sp, #24]
 80073ca:	f000 fd37 	bl	8007e3c <__i2b>
 80073ce:	4607      	mov	r7, r0
 80073d0:	2d00      	cmp	r5, #0
 80073d2:	dd0c      	ble.n	80073ee <_dtoa_r+0x73e>
 80073d4:	9b06      	ldr	r3, [sp, #24]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	dd09      	ble.n	80073ee <_dtoa_r+0x73e>
 80073da:	42ab      	cmp	r3, r5
 80073dc:	9a05      	ldr	r2, [sp, #20]
 80073de:	bfa8      	it	ge
 80073e0:	462b      	movge	r3, r5
 80073e2:	1ad2      	subs	r2, r2, r3
 80073e4:	9205      	str	r2, [sp, #20]
 80073e6:	9a06      	ldr	r2, [sp, #24]
 80073e8:	1aed      	subs	r5, r5, r3
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	9306      	str	r3, [sp, #24]
 80073ee:	9b08      	ldr	r3, [sp, #32]
 80073f0:	b1f3      	cbz	r3, 8007430 <_dtoa_r+0x780>
 80073f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 80a5 	beq.w	8007544 <_dtoa_r+0x894>
 80073fa:	2e00      	cmp	r6, #0
 80073fc:	dd10      	ble.n	8007420 <_dtoa_r+0x770>
 80073fe:	4639      	mov	r1, r7
 8007400:	4632      	mov	r2, r6
 8007402:	4620      	mov	r0, r4
 8007404:	f000 fdb0 	bl	8007f68 <__pow5mult>
 8007408:	4652      	mov	r2, sl
 800740a:	4601      	mov	r1, r0
 800740c:	4607      	mov	r7, r0
 800740e:	4620      	mov	r0, r4
 8007410:	f000 fd1d 	bl	8007e4e <__multiply>
 8007414:	4651      	mov	r1, sl
 8007416:	4680      	mov	r8, r0
 8007418:	4620      	mov	r0, r4
 800741a:	f000 fc6f 	bl	8007cfc <_Bfree>
 800741e:	46c2      	mov	sl, r8
 8007420:	9b08      	ldr	r3, [sp, #32]
 8007422:	1b9a      	subs	r2, r3, r6
 8007424:	d004      	beq.n	8007430 <_dtoa_r+0x780>
 8007426:	4651      	mov	r1, sl
 8007428:	4620      	mov	r0, r4
 800742a:	f000 fd9d 	bl	8007f68 <__pow5mult>
 800742e:	4682      	mov	sl, r0
 8007430:	2101      	movs	r1, #1
 8007432:	4620      	mov	r0, r4
 8007434:	f000 fd02 	bl	8007e3c <__i2b>
 8007438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800743a:	2b00      	cmp	r3, #0
 800743c:	4606      	mov	r6, r0
 800743e:	f340 8083 	ble.w	8007548 <_dtoa_r+0x898>
 8007442:	461a      	mov	r2, r3
 8007444:	4601      	mov	r1, r0
 8007446:	4620      	mov	r0, r4
 8007448:	f000 fd8e 	bl	8007f68 <__pow5mult>
 800744c:	9b07      	ldr	r3, [sp, #28]
 800744e:	2b01      	cmp	r3, #1
 8007450:	4606      	mov	r6, r0
 8007452:	dd7c      	ble.n	800754e <_dtoa_r+0x89e>
 8007454:	f04f 0800 	mov.w	r8, #0
 8007458:	6933      	ldr	r3, [r6, #16]
 800745a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800745e:	6918      	ldr	r0, [r3, #16]
 8007460:	f000 fc9e 	bl	8007da0 <__hi0bits>
 8007464:	f1c0 0020 	rsb	r0, r0, #32
 8007468:	9b06      	ldr	r3, [sp, #24]
 800746a:	4418      	add	r0, r3
 800746c:	f010 001f 	ands.w	r0, r0, #31
 8007470:	f000 8096 	beq.w	80075a0 <_dtoa_r+0x8f0>
 8007474:	f1c0 0320 	rsb	r3, r0, #32
 8007478:	2b04      	cmp	r3, #4
 800747a:	f340 8087 	ble.w	800758c <_dtoa_r+0x8dc>
 800747e:	9b05      	ldr	r3, [sp, #20]
 8007480:	f1c0 001c 	rsb	r0, r0, #28
 8007484:	4403      	add	r3, r0
 8007486:	9305      	str	r3, [sp, #20]
 8007488:	9b06      	ldr	r3, [sp, #24]
 800748a:	4405      	add	r5, r0
 800748c:	4403      	add	r3, r0
 800748e:	9306      	str	r3, [sp, #24]
 8007490:	9b05      	ldr	r3, [sp, #20]
 8007492:	2b00      	cmp	r3, #0
 8007494:	dd05      	ble.n	80074a2 <_dtoa_r+0x7f2>
 8007496:	4651      	mov	r1, sl
 8007498:	461a      	mov	r2, r3
 800749a:	4620      	mov	r0, r4
 800749c:	f000 fdb2 	bl	8008004 <__lshift>
 80074a0:	4682      	mov	sl, r0
 80074a2:	9b06      	ldr	r3, [sp, #24]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	dd05      	ble.n	80074b4 <_dtoa_r+0x804>
 80074a8:	4631      	mov	r1, r6
 80074aa:	461a      	mov	r2, r3
 80074ac:	4620      	mov	r0, r4
 80074ae:	f000 fda9 	bl	8008004 <__lshift>
 80074b2:	4606      	mov	r6, r0
 80074b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d074      	beq.n	80075a4 <_dtoa_r+0x8f4>
 80074ba:	4631      	mov	r1, r6
 80074bc:	4650      	mov	r0, sl
 80074be:	f000 fdf2 	bl	80080a6 <__mcmp>
 80074c2:	2800      	cmp	r0, #0
 80074c4:	da6e      	bge.n	80075a4 <_dtoa_r+0x8f4>
 80074c6:	2300      	movs	r3, #0
 80074c8:	4651      	mov	r1, sl
 80074ca:	220a      	movs	r2, #10
 80074cc:	4620      	mov	r0, r4
 80074ce:	f000 fc2c 	bl	8007d2a <__multadd>
 80074d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80074d8:	4682      	mov	sl, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 81a8 	beq.w	8007830 <_dtoa_r+0xb80>
 80074e0:	2300      	movs	r3, #0
 80074e2:	4639      	mov	r1, r7
 80074e4:	220a      	movs	r2, #10
 80074e6:	4620      	mov	r0, r4
 80074e8:	f000 fc1f 	bl	8007d2a <__multadd>
 80074ec:	9b04      	ldr	r3, [sp, #16]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	4607      	mov	r7, r0
 80074f2:	f300 80c8 	bgt.w	8007686 <_dtoa_r+0x9d6>
 80074f6:	9b07      	ldr	r3, [sp, #28]
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	f340 80c4 	ble.w	8007686 <_dtoa_r+0x9d6>
 80074fe:	e059      	b.n	80075b4 <_dtoa_r+0x904>
 8007500:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007502:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007506:	e756      	b.n	80073b6 <_dtoa_r+0x706>
 8007508:	9b03      	ldr	r3, [sp, #12]
 800750a:	1e5e      	subs	r6, r3, #1
 800750c:	9b08      	ldr	r3, [sp, #32]
 800750e:	42b3      	cmp	r3, r6
 8007510:	bfbf      	itttt	lt
 8007512:	9b08      	ldrlt	r3, [sp, #32]
 8007514:	9608      	strlt	r6, [sp, #32]
 8007516:	1af2      	sublt	r2, r6, r3
 8007518:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800751a:	bfb6      	itet	lt
 800751c:	189b      	addlt	r3, r3, r2
 800751e:	1b9e      	subge	r6, r3, r6
 8007520:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8007522:	9b03      	ldr	r3, [sp, #12]
 8007524:	bfb8      	it	lt
 8007526:	2600      	movlt	r6, #0
 8007528:	2b00      	cmp	r3, #0
 800752a:	bfb9      	ittee	lt
 800752c:	9b05      	ldrlt	r3, [sp, #20]
 800752e:	9a03      	ldrlt	r2, [sp, #12]
 8007530:	9d05      	ldrge	r5, [sp, #20]
 8007532:	9b03      	ldrge	r3, [sp, #12]
 8007534:	bfbc      	itt	lt
 8007536:	1a9d      	sublt	r5, r3, r2
 8007538:	2300      	movlt	r3, #0
 800753a:	e73e      	b.n	80073ba <_dtoa_r+0x70a>
 800753c:	9e08      	ldr	r6, [sp, #32]
 800753e:	9d05      	ldr	r5, [sp, #20]
 8007540:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007542:	e745      	b.n	80073d0 <_dtoa_r+0x720>
 8007544:	9a08      	ldr	r2, [sp, #32]
 8007546:	e76e      	b.n	8007426 <_dtoa_r+0x776>
 8007548:	9b07      	ldr	r3, [sp, #28]
 800754a:	2b01      	cmp	r3, #1
 800754c:	dc19      	bgt.n	8007582 <_dtoa_r+0x8d2>
 800754e:	9b00      	ldr	r3, [sp, #0]
 8007550:	b9bb      	cbnz	r3, 8007582 <_dtoa_r+0x8d2>
 8007552:	9b01      	ldr	r3, [sp, #4]
 8007554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007558:	b99b      	cbnz	r3, 8007582 <_dtoa_r+0x8d2>
 800755a:	9b01      	ldr	r3, [sp, #4]
 800755c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007560:	0d1b      	lsrs	r3, r3, #20
 8007562:	051b      	lsls	r3, r3, #20
 8007564:	b183      	cbz	r3, 8007588 <_dtoa_r+0x8d8>
 8007566:	9b05      	ldr	r3, [sp, #20]
 8007568:	3301      	adds	r3, #1
 800756a:	9305      	str	r3, [sp, #20]
 800756c:	9b06      	ldr	r3, [sp, #24]
 800756e:	3301      	adds	r3, #1
 8007570:	9306      	str	r3, [sp, #24]
 8007572:	f04f 0801 	mov.w	r8, #1
 8007576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007578:	2b00      	cmp	r3, #0
 800757a:	f47f af6d 	bne.w	8007458 <_dtoa_r+0x7a8>
 800757e:	2001      	movs	r0, #1
 8007580:	e772      	b.n	8007468 <_dtoa_r+0x7b8>
 8007582:	f04f 0800 	mov.w	r8, #0
 8007586:	e7f6      	b.n	8007576 <_dtoa_r+0x8c6>
 8007588:	4698      	mov	r8, r3
 800758a:	e7f4      	b.n	8007576 <_dtoa_r+0x8c6>
 800758c:	d080      	beq.n	8007490 <_dtoa_r+0x7e0>
 800758e:	9a05      	ldr	r2, [sp, #20]
 8007590:	331c      	adds	r3, #28
 8007592:	441a      	add	r2, r3
 8007594:	9205      	str	r2, [sp, #20]
 8007596:	9a06      	ldr	r2, [sp, #24]
 8007598:	441a      	add	r2, r3
 800759a:	441d      	add	r5, r3
 800759c:	4613      	mov	r3, r2
 800759e:	e776      	b.n	800748e <_dtoa_r+0x7de>
 80075a0:	4603      	mov	r3, r0
 80075a2:	e7f4      	b.n	800758e <_dtoa_r+0x8de>
 80075a4:	9b03      	ldr	r3, [sp, #12]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	dc36      	bgt.n	8007618 <_dtoa_r+0x968>
 80075aa:	9b07      	ldr	r3, [sp, #28]
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	dd33      	ble.n	8007618 <_dtoa_r+0x968>
 80075b0:	9b03      	ldr	r3, [sp, #12]
 80075b2:	9304      	str	r3, [sp, #16]
 80075b4:	9b04      	ldr	r3, [sp, #16]
 80075b6:	b963      	cbnz	r3, 80075d2 <_dtoa_r+0x922>
 80075b8:	4631      	mov	r1, r6
 80075ba:	2205      	movs	r2, #5
 80075bc:	4620      	mov	r0, r4
 80075be:	f000 fbb4 	bl	8007d2a <__multadd>
 80075c2:	4601      	mov	r1, r0
 80075c4:	4606      	mov	r6, r0
 80075c6:	4650      	mov	r0, sl
 80075c8:	f000 fd6d 	bl	80080a6 <__mcmp>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	f73f adb6 	bgt.w	800713e <_dtoa_r+0x48e>
 80075d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075d4:	9d02      	ldr	r5, [sp, #8]
 80075d6:	ea6f 0b03 	mvn.w	fp, r3
 80075da:	2300      	movs	r3, #0
 80075dc:	9303      	str	r3, [sp, #12]
 80075de:	4631      	mov	r1, r6
 80075e0:	4620      	mov	r0, r4
 80075e2:	f000 fb8b 	bl	8007cfc <_Bfree>
 80075e6:	2f00      	cmp	r7, #0
 80075e8:	f43f aea6 	beq.w	8007338 <_dtoa_r+0x688>
 80075ec:	9b03      	ldr	r3, [sp, #12]
 80075ee:	b12b      	cbz	r3, 80075fc <_dtoa_r+0x94c>
 80075f0:	42bb      	cmp	r3, r7
 80075f2:	d003      	beq.n	80075fc <_dtoa_r+0x94c>
 80075f4:	4619      	mov	r1, r3
 80075f6:	4620      	mov	r0, r4
 80075f8:	f000 fb80 	bl	8007cfc <_Bfree>
 80075fc:	4639      	mov	r1, r7
 80075fe:	4620      	mov	r0, r4
 8007600:	f000 fb7c 	bl	8007cfc <_Bfree>
 8007604:	e698      	b.n	8007338 <_dtoa_r+0x688>
 8007606:	2600      	movs	r6, #0
 8007608:	4637      	mov	r7, r6
 800760a:	e7e2      	b.n	80075d2 <_dtoa_r+0x922>
 800760c:	46bb      	mov	fp, r7
 800760e:	4637      	mov	r7, r6
 8007610:	e595      	b.n	800713e <_dtoa_r+0x48e>
 8007612:	bf00      	nop
 8007614:	40240000 	.word	0x40240000
 8007618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800761a:	bb93      	cbnz	r3, 8007682 <_dtoa_r+0x9d2>
 800761c:	9b03      	ldr	r3, [sp, #12]
 800761e:	9304      	str	r3, [sp, #16]
 8007620:	9d02      	ldr	r5, [sp, #8]
 8007622:	4631      	mov	r1, r6
 8007624:	4650      	mov	r0, sl
 8007626:	f7ff fab5 	bl	8006b94 <quorem>
 800762a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800762e:	f805 9b01 	strb.w	r9, [r5], #1
 8007632:	9b02      	ldr	r3, [sp, #8]
 8007634:	9a04      	ldr	r2, [sp, #16]
 8007636:	1aeb      	subs	r3, r5, r3
 8007638:	429a      	cmp	r2, r3
 800763a:	f300 80dc 	bgt.w	80077f6 <_dtoa_r+0xb46>
 800763e:	9b02      	ldr	r3, [sp, #8]
 8007640:	2a01      	cmp	r2, #1
 8007642:	bfac      	ite	ge
 8007644:	189b      	addge	r3, r3, r2
 8007646:	3301      	addlt	r3, #1
 8007648:	4698      	mov	r8, r3
 800764a:	2300      	movs	r3, #0
 800764c:	9303      	str	r3, [sp, #12]
 800764e:	4651      	mov	r1, sl
 8007650:	2201      	movs	r2, #1
 8007652:	4620      	mov	r0, r4
 8007654:	f000 fcd6 	bl	8008004 <__lshift>
 8007658:	4631      	mov	r1, r6
 800765a:	4682      	mov	sl, r0
 800765c:	f000 fd23 	bl	80080a6 <__mcmp>
 8007660:	2800      	cmp	r0, #0
 8007662:	f300 808d 	bgt.w	8007780 <_dtoa_r+0xad0>
 8007666:	d103      	bne.n	8007670 <_dtoa_r+0x9c0>
 8007668:	f019 0f01 	tst.w	r9, #1
 800766c:	f040 8088 	bne.w	8007780 <_dtoa_r+0xad0>
 8007670:	4645      	mov	r5, r8
 8007672:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007676:	2b30      	cmp	r3, #48	; 0x30
 8007678:	f105 32ff 	add.w	r2, r5, #4294967295
 800767c:	d1af      	bne.n	80075de <_dtoa_r+0x92e>
 800767e:	4615      	mov	r5, r2
 8007680:	e7f7      	b.n	8007672 <_dtoa_r+0x9c2>
 8007682:	9b03      	ldr	r3, [sp, #12]
 8007684:	9304      	str	r3, [sp, #16]
 8007686:	2d00      	cmp	r5, #0
 8007688:	dd05      	ble.n	8007696 <_dtoa_r+0x9e6>
 800768a:	4639      	mov	r1, r7
 800768c:	462a      	mov	r2, r5
 800768e:	4620      	mov	r0, r4
 8007690:	f000 fcb8 	bl	8008004 <__lshift>
 8007694:	4607      	mov	r7, r0
 8007696:	f1b8 0f00 	cmp.w	r8, #0
 800769a:	d04c      	beq.n	8007736 <_dtoa_r+0xa86>
 800769c:	6879      	ldr	r1, [r7, #4]
 800769e:	4620      	mov	r0, r4
 80076a0:	f000 faf8 	bl	8007c94 <_Balloc>
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	3202      	adds	r2, #2
 80076a8:	4605      	mov	r5, r0
 80076aa:	0092      	lsls	r2, r2, #2
 80076ac:	f107 010c 	add.w	r1, r7, #12
 80076b0:	300c      	adds	r0, #12
 80076b2:	f7fe fc7f 	bl	8005fb4 <memcpy>
 80076b6:	2201      	movs	r2, #1
 80076b8:	4629      	mov	r1, r5
 80076ba:	4620      	mov	r0, r4
 80076bc:	f000 fca2 	bl	8008004 <__lshift>
 80076c0:	9b00      	ldr	r3, [sp, #0]
 80076c2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80076c6:	9703      	str	r7, [sp, #12]
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	4607      	mov	r7, r0
 80076ce:	9305      	str	r3, [sp, #20]
 80076d0:	4631      	mov	r1, r6
 80076d2:	4650      	mov	r0, sl
 80076d4:	f7ff fa5e 	bl	8006b94 <quorem>
 80076d8:	9903      	ldr	r1, [sp, #12]
 80076da:	4605      	mov	r5, r0
 80076dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80076e0:	4650      	mov	r0, sl
 80076e2:	f000 fce0 	bl	80080a6 <__mcmp>
 80076e6:	463a      	mov	r2, r7
 80076e8:	9000      	str	r0, [sp, #0]
 80076ea:	4631      	mov	r1, r6
 80076ec:	4620      	mov	r0, r4
 80076ee:	f000 fcf4 	bl	80080da <__mdiff>
 80076f2:	68c3      	ldr	r3, [r0, #12]
 80076f4:	4602      	mov	r2, r0
 80076f6:	bb03      	cbnz	r3, 800773a <_dtoa_r+0xa8a>
 80076f8:	4601      	mov	r1, r0
 80076fa:	9006      	str	r0, [sp, #24]
 80076fc:	4650      	mov	r0, sl
 80076fe:	f000 fcd2 	bl	80080a6 <__mcmp>
 8007702:	9a06      	ldr	r2, [sp, #24]
 8007704:	4603      	mov	r3, r0
 8007706:	4611      	mov	r1, r2
 8007708:	4620      	mov	r0, r4
 800770a:	9306      	str	r3, [sp, #24]
 800770c:	f000 faf6 	bl	8007cfc <_Bfree>
 8007710:	9b06      	ldr	r3, [sp, #24]
 8007712:	b9a3      	cbnz	r3, 800773e <_dtoa_r+0xa8e>
 8007714:	9a07      	ldr	r2, [sp, #28]
 8007716:	b992      	cbnz	r2, 800773e <_dtoa_r+0xa8e>
 8007718:	9a05      	ldr	r2, [sp, #20]
 800771a:	b982      	cbnz	r2, 800773e <_dtoa_r+0xa8e>
 800771c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007720:	d029      	beq.n	8007776 <_dtoa_r+0xac6>
 8007722:	9b00      	ldr	r3, [sp, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	dd01      	ble.n	800772c <_dtoa_r+0xa7c>
 8007728:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800772c:	f108 0501 	add.w	r5, r8, #1
 8007730:	f888 9000 	strb.w	r9, [r8]
 8007734:	e753      	b.n	80075de <_dtoa_r+0x92e>
 8007736:	4638      	mov	r0, r7
 8007738:	e7c2      	b.n	80076c0 <_dtoa_r+0xa10>
 800773a:	2301      	movs	r3, #1
 800773c:	e7e3      	b.n	8007706 <_dtoa_r+0xa56>
 800773e:	9a00      	ldr	r2, [sp, #0]
 8007740:	2a00      	cmp	r2, #0
 8007742:	db04      	blt.n	800774e <_dtoa_r+0xa9e>
 8007744:	d125      	bne.n	8007792 <_dtoa_r+0xae2>
 8007746:	9a07      	ldr	r2, [sp, #28]
 8007748:	bb1a      	cbnz	r2, 8007792 <_dtoa_r+0xae2>
 800774a:	9a05      	ldr	r2, [sp, #20]
 800774c:	bb0a      	cbnz	r2, 8007792 <_dtoa_r+0xae2>
 800774e:	2b00      	cmp	r3, #0
 8007750:	ddec      	ble.n	800772c <_dtoa_r+0xa7c>
 8007752:	4651      	mov	r1, sl
 8007754:	2201      	movs	r2, #1
 8007756:	4620      	mov	r0, r4
 8007758:	f000 fc54 	bl	8008004 <__lshift>
 800775c:	4631      	mov	r1, r6
 800775e:	4682      	mov	sl, r0
 8007760:	f000 fca1 	bl	80080a6 <__mcmp>
 8007764:	2800      	cmp	r0, #0
 8007766:	dc03      	bgt.n	8007770 <_dtoa_r+0xac0>
 8007768:	d1e0      	bne.n	800772c <_dtoa_r+0xa7c>
 800776a:	f019 0f01 	tst.w	r9, #1
 800776e:	d0dd      	beq.n	800772c <_dtoa_r+0xa7c>
 8007770:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007774:	d1d8      	bne.n	8007728 <_dtoa_r+0xa78>
 8007776:	2339      	movs	r3, #57	; 0x39
 8007778:	f888 3000 	strb.w	r3, [r8]
 800777c:	f108 0801 	add.w	r8, r8, #1
 8007780:	4645      	mov	r5, r8
 8007782:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007786:	2b39      	cmp	r3, #57	; 0x39
 8007788:	f105 32ff 	add.w	r2, r5, #4294967295
 800778c:	d03b      	beq.n	8007806 <_dtoa_r+0xb56>
 800778e:	3301      	adds	r3, #1
 8007790:	e040      	b.n	8007814 <_dtoa_r+0xb64>
 8007792:	2b00      	cmp	r3, #0
 8007794:	f108 0501 	add.w	r5, r8, #1
 8007798:	dd05      	ble.n	80077a6 <_dtoa_r+0xaf6>
 800779a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800779e:	d0ea      	beq.n	8007776 <_dtoa_r+0xac6>
 80077a0:	f109 0901 	add.w	r9, r9, #1
 80077a4:	e7c4      	b.n	8007730 <_dtoa_r+0xa80>
 80077a6:	9b02      	ldr	r3, [sp, #8]
 80077a8:	9a04      	ldr	r2, [sp, #16]
 80077aa:	f805 9c01 	strb.w	r9, [r5, #-1]
 80077ae:	1aeb      	subs	r3, r5, r3
 80077b0:	4293      	cmp	r3, r2
 80077b2:	46a8      	mov	r8, r5
 80077b4:	f43f af4b 	beq.w	800764e <_dtoa_r+0x99e>
 80077b8:	4651      	mov	r1, sl
 80077ba:	2300      	movs	r3, #0
 80077bc:	220a      	movs	r2, #10
 80077be:	4620      	mov	r0, r4
 80077c0:	f000 fab3 	bl	8007d2a <__multadd>
 80077c4:	9b03      	ldr	r3, [sp, #12]
 80077c6:	9903      	ldr	r1, [sp, #12]
 80077c8:	42bb      	cmp	r3, r7
 80077ca:	4682      	mov	sl, r0
 80077cc:	f04f 0300 	mov.w	r3, #0
 80077d0:	f04f 020a 	mov.w	r2, #10
 80077d4:	4620      	mov	r0, r4
 80077d6:	d104      	bne.n	80077e2 <_dtoa_r+0xb32>
 80077d8:	f000 faa7 	bl	8007d2a <__multadd>
 80077dc:	9003      	str	r0, [sp, #12]
 80077de:	4607      	mov	r7, r0
 80077e0:	e776      	b.n	80076d0 <_dtoa_r+0xa20>
 80077e2:	f000 faa2 	bl	8007d2a <__multadd>
 80077e6:	2300      	movs	r3, #0
 80077e8:	9003      	str	r0, [sp, #12]
 80077ea:	220a      	movs	r2, #10
 80077ec:	4639      	mov	r1, r7
 80077ee:	4620      	mov	r0, r4
 80077f0:	f000 fa9b 	bl	8007d2a <__multadd>
 80077f4:	e7f3      	b.n	80077de <_dtoa_r+0xb2e>
 80077f6:	4651      	mov	r1, sl
 80077f8:	2300      	movs	r3, #0
 80077fa:	220a      	movs	r2, #10
 80077fc:	4620      	mov	r0, r4
 80077fe:	f000 fa94 	bl	8007d2a <__multadd>
 8007802:	4682      	mov	sl, r0
 8007804:	e70d      	b.n	8007622 <_dtoa_r+0x972>
 8007806:	9b02      	ldr	r3, [sp, #8]
 8007808:	4293      	cmp	r3, r2
 800780a:	d105      	bne.n	8007818 <_dtoa_r+0xb68>
 800780c:	9a02      	ldr	r2, [sp, #8]
 800780e:	f10b 0b01 	add.w	fp, fp, #1
 8007812:	2331      	movs	r3, #49	; 0x31
 8007814:	7013      	strb	r3, [r2, #0]
 8007816:	e6e2      	b.n	80075de <_dtoa_r+0x92e>
 8007818:	4615      	mov	r5, r2
 800781a:	e7b2      	b.n	8007782 <_dtoa_r+0xad2>
 800781c:	4b09      	ldr	r3, [pc, #36]	; (8007844 <_dtoa_r+0xb94>)
 800781e:	f7ff baae 	b.w	8006d7e <_dtoa_r+0xce>
 8007822:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007824:	2b00      	cmp	r3, #0
 8007826:	f47f aa88 	bne.w	8006d3a <_dtoa_r+0x8a>
 800782a:	4b07      	ldr	r3, [pc, #28]	; (8007848 <_dtoa_r+0xb98>)
 800782c:	f7ff baa7 	b.w	8006d7e <_dtoa_r+0xce>
 8007830:	9b04      	ldr	r3, [sp, #16]
 8007832:	2b00      	cmp	r3, #0
 8007834:	f73f aef4 	bgt.w	8007620 <_dtoa_r+0x970>
 8007838:	9b07      	ldr	r3, [sp, #28]
 800783a:	2b02      	cmp	r3, #2
 800783c:	f77f aef0 	ble.w	8007620 <_dtoa_r+0x970>
 8007840:	e6b8      	b.n	80075b4 <_dtoa_r+0x904>
 8007842:	bf00      	nop
 8007844:	08008c46 	.word	0x08008c46
 8007848:	080091ce 	.word	0x080091ce

0800784c <__sflush_r>:
 800784c:	898a      	ldrh	r2, [r1, #12]
 800784e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007852:	4605      	mov	r5, r0
 8007854:	0710      	lsls	r0, r2, #28
 8007856:	460c      	mov	r4, r1
 8007858:	d45a      	bmi.n	8007910 <__sflush_r+0xc4>
 800785a:	684b      	ldr	r3, [r1, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	dc05      	bgt.n	800786c <__sflush_r+0x20>
 8007860:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007862:	2b00      	cmp	r3, #0
 8007864:	dc02      	bgt.n	800786c <__sflush_r+0x20>
 8007866:	2000      	movs	r0, #0
 8007868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800786c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800786e:	2e00      	cmp	r6, #0
 8007870:	d0f9      	beq.n	8007866 <__sflush_r+0x1a>
 8007872:	2300      	movs	r3, #0
 8007874:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007878:	682f      	ldr	r7, [r5, #0]
 800787a:	602b      	str	r3, [r5, #0]
 800787c:	d033      	beq.n	80078e6 <__sflush_r+0x9a>
 800787e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007880:	89a3      	ldrh	r3, [r4, #12]
 8007882:	075a      	lsls	r2, r3, #29
 8007884:	d505      	bpl.n	8007892 <__sflush_r+0x46>
 8007886:	6863      	ldr	r3, [r4, #4]
 8007888:	1ac0      	subs	r0, r0, r3
 800788a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800788c:	b10b      	cbz	r3, 8007892 <__sflush_r+0x46>
 800788e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007890:	1ac0      	subs	r0, r0, r3
 8007892:	2300      	movs	r3, #0
 8007894:	4602      	mov	r2, r0
 8007896:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007898:	6a21      	ldr	r1, [r4, #32]
 800789a:	4628      	mov	r0, r5
 800789c:	47b0      	blx	r6
 800789e:	1c43      	adds	r3, r0, #1
 80078a0:	89a3      	ldrh	r3, [r4, #12]
 80078a2:	d106      	bne.n	80078b2 <__sflush_r+0x66>
 80078a4:	6829      	ldr	r1, [r5, #0]
 80078a6:	291d      	cmp	r1, #29
 80078a8:	d84b      	bhi.n	8007942 <__sflush_r+0xf6>
 80078aa:	4a2b      	ldr	r2, [pc, #172]	; (8007958 <__sflush_r+0x10c>)
 80078ac:	40ca      	lsrs	r2, r1
 80078ae:	07d6      	lsls	r6, r2, #31
 80078b0:	d547      	bpl.n	8007942 <__sflush_r+0xf6>
 80078b2:	2200      	movs	r2, #0
 80078b4:	6062      	str	r2, [r4, #4]
 80078b6:	04d9      	lsls	r1, r3, #19
 80078b8:	6922      	ldr	r2, [r4, #16]
 80078ba:	6022      	str	r2, [r4, #0]
 80078bc:	d504      	bpl.n	80078c8 <__sflush_r+0x7c>
 80078be:	1c42      	adds	r2, r0, #1
 80078c0:	d101      	bne.n	80078c6 <__sflush_r+0x7a>
 80078c2:	682b      	ldr	r3, [r5, #0]
 80078c4:	b903      	cbnz	r3, 80078c8 <__sflush_r+0x7c>
 80078c6:	6560      	str	r0, [r4, #84]	; 0x54
 80078c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078ca:	602f      	str	r7, [r5, #0]
 80078cc:	2900      	cmp	r1, #0
 80078ce:	d0ca      	beq.n	8007866 <__sflush_r+0x1a>
 80078d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078d4:	4299      	cmp	r1, r3
 80078d6:	d002      	beq.n	80078de <__sflush_r+0x92>
 80078d8:	4628      	mov	r0, r5
 80078da:	f000 fcb9 	bl	8008250 <_free_r>
 80078de:	2000      	movs	r0, #0
 80078e0:	6360      	str	r0, [r4, #52]	; 0x34
 80078e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078e6:	6a21      	ldr	r1, [r4, #32]
 80078e8:	2301      	movs	r3, #1
 80078ea:	4628      	mov	r0, r5
 80078ec:	47b0      	blx	r6
 80078ee:	1c41      	adds	r1, r0, #1
 80078f0:	d1c6      	bne.n	8007880 <__sflush_r+0x34>
 80078f2:	682b      	ldr	r3, [r5, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0c3      	beq.n	8007880 <__sflush_r+0x34>
 80078f8:	2b1d      	cmp	r3, #29
 80078fa:	d001      	beq.n	8007900 <__sflush_r+0xb4>
 80078fc:	2b16      	cmp	r3, #22
 80078fe:	d101      	bne.n	8007904 <__sflush_r+0xb8>
 8007900:	602f      	str	r7, [r5, #0]
 8007902:	e7b0      	b.n	8007866 <__sflush_r+0x1a>
 8007904:	89a3      	ldrh	r3, [r4, #12]
 8007906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800790a:	81a3      	strh	r3, [r4, #12]
 800790c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007910:	690f      	ldr	r7, [r1, #16]
 8007912:	2f00      	cmp	r7, #0
 8007914:	d0a7      	beq.n	8007866 <__sflush_r+0x1a>
 8007916:	0793      	lsls	r3, r2, #30
 8007918:	680e      	ldr	r6, [r1, #0]
 800791a:	bf08      	it	eq
 800791c:	694b      	ldreq	r3, [r1, #20]
 800791e:	600f      	str	r7, [r1, #0]
 8007920:	bf18      	it	ne
 8007922:	2300      	movne	r3, #0
 8007924:	eba6 0807 	sub.w	r8, r6, r7
 8007928:	608b      	str	r3, [r1, #8]
 800792a:	f1b8 0f00 	cmp.w	r8, #0
 800792e:	dd9a      	ble.n	8007866 <__sflush_r+0x1a>
 8007930:	4643      	mov	r3, r8
 8007932:	463a      	mov	r2, r7
 8007934:	6a21      	ldr	r1, [r4, #32]
 8007936:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007938:	4628      	mov	r0, r5
 800793a:	47b0      	blx	r6
 800793c:	2800      	cmp	r0, #0
 800793e:	dc07      	bgt.n	8007950 <__sflush_r+0x104>
 8007940:	89a3      	ldrh	r3, [r4, #12]
 8007942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007946:	81a3      	strh	r3, [r4, #12]
 8007948:	f04f 30ff 	mov.w	r0, #4294967295
 800794c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007950:	4407      	add	r7, r0
 8007952:	eba8 0800 	sub.w	r8, r8, r0
 8007956:	e7e8      	b.n	800792a <__sflush_r+0xde>
 8007958:	20400001 	.word	0x20400001

0800795c <_fflush_r>:
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	690b      	ldr	r3, [r1, #16]
 8007960:	4605      	mov	r5, r0
 8007962:	460c      	mov	r4, r1
 8007964:	b1db      	cbz	r3, 800799e <_fflush_r+0x42>
 8007966:	b118      	cbz	r0, 8007970 <_fflush_r+0x14>
 8007968:	6983      	ldr	r3, [r0, #24]
 800796a:	b90b      	cbnz	r3, 8007970 <_fflush_r+0x14>
 800796c:	f000 f872 	bl	8007a54 <__sinit>
 8007970:	4b0c      	ldr	r3, [pc, #48]	; (80079a4 <_fflush_r+0x48>)
 8007972:	429c      	cmp	r4, r3
 8007974:	d109      	bne.n	800798a <_fflush_r+0x2e>
 8007976:	686c      	ldr	r4, [r5, #4]
 8007978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800797c:	b17b      	cbz	r3, 800799e <_fflush_r+0x42>
 800797e:	4621      	mov	r1, r4
 8007980:	4628      	mov	r0, r5
 8007982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007986:	f7ff bf61 	b.w	800784c <__sflush_r>
 800798a:	4b07      	ldr	r3, [pc, #28]	; (80079a8 <_fflush_r+0x4c>)
 800798c:	429c      	cmp	r4, r3
 800798e:	d101      	bne.n	8007994 <_fflush_r+0x38>
 8007990:	68ac      	ldr	r4, [r5, #8]
 8007992:	e7f1      	b.n	8007978 <_fflush_r+0x1c>
 8007994:	4b05      	ldr	r3, [pc, #20]	; (80079ac <_fflush_r+0x50>)
 8007996:	429c      	cmp	r4, r3
 8007998:	bf08      	it	eq
 800799a:	68ec      	ldreq	r4, [r5, #12]
 800799c:	e7ec      	b.n	8007978 <_fflush_r+0x1c>
 800799e:	2000      	movs	r0, #0
 80079a0:	bd38      	pop	{r3, r4, r5, pc}
 80079a2:	bf00      	nop
 80079a4:	080091fc 	.word	0x080091fc
 80079a8:	0800921c 	.word	0x0800921c
 80079ac:	080091dc 	.word	0x080091dc

080079b0 <fflush>:
 80079b0:	4601      	mov	r1, r0
 80079b2:	b920      	cbnz	r0, 80079be <fflush+0xe>
 80079b4:	4b04      	ldr	r3, [pc, #16]	; (80079c8 <fflush+0x18>)
 80079b6:	4905      	ldr	r1, [pc, #20]	; (80079cc <fflush+0x1c>)
 80079b8:	6818      	ldr	r0, [r3, #0]
 80079ba:	f000 b8d3 	b.w	8007b64 <_fwalk_reent>
 80079be:	4b04      	ldr	r3, [pc, #16]	; (80079d0 <fflush+0x20>)
 80079c0:	6818      	ldr	r0, [r3, #0]
 80079c2:	f7ff bfcb 	b.w	800795c <_fflush_r>
 80079c6:	bf00      	nop
 80079c8:	08009198 	.word	0x08009198
 80079cc:	0800795d 	.word	0x0800795d
 80079d0:	20000530 	.word	0x20000530

080079d4 <_cleanup_r>:
 80079d4:	4901      	ldr	r1, [pc, #4]	; (80079dc <_cleanup_r+0x8>)
 80079d6:	f000 b8c5 	b.w	8007b64 <_fwalk_reent>
 80079da:	bf00      	nop
 80079dc:	0800795d 	.word	0x0800795d

080079e0 <std.isra.0>:
 80079e0:	2300      	movs	r3, #0
 80079e2:	b510      	push	{r4, lr}
 80079e4:	4604      	mov	r4, r0
 80079e6:	6003      	str	r3, [r0, #0]
 80079e8:	6043      	str	r3, [r0, #4]
 80079ea:	6083      	str	r3, [r0, #8]
 80079ec:	8181      	strh	r1, [r0, #12]
 80079ee:	6643      	str	r3, [r0, #100]	; 0x64
 80079f0:	81c2      	strh	r2, [r0, #14]
 80079f2:	6103      	str	r3, [r0, #16]
 80079f4:	6143      	str	r3, [r0, #20]
 80079f6:	6183      	str	r3, [r0, #24]
 80079f8:	4619      	mov	r1, r3
 80079fa:	2208      	movs	r2, #8
 80079fc:	305c      	adds	r0, #92	; 0x5c
 80079fe:	f7fe fae4 	bl	8005fca <memset>
 8007a02:	4b05      	ldr	r3, [pc, #20]	; (8007a18 <std.isra.0+0x38>)
 8007a04:	6263      	str	r3, [r4, #36]	; 0x24
 8007a06:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <std.isra.0+0x3c>)
 8007a08:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a0a:	4b05      	ldr	r3, [pc, #20]	; (8007a20 <std.isra.0+0x40>)
 8007a0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a0e:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <std.isra.0+0x44>)
 8007a10:	6224      	str	r4, [r4, #32]
 8007a12:	6323      	str	r3, [r4, #48]	; 0x30
 8007a14:	bd10      	pop	{r4, pc}
 8007a16:	bf00      	nop
 8007a18:	08008771 	.word	0x08008771
 8007a1c:	08008793 	.word	0x08008793
 8007a20:	080087cb 	.word	0x080087cb
 8007a24:	080087ef 	.word	0x080087ef

08007a28 <__sfmoreglue>:
 8007a28:	b570      	push	{r4, r5, r6, lr}
 8007a2a:	1e4a      	subs	r2, r1, #1
 8007a2c:	2568      	movs	r5, #104	; 0x68
 8007a2e:	4355      	muls	r5, r2
 8007a30:	460e      	mov	r6, r1
 8007a32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a36:	f000 fc59 	bl	80082ec <_malloc_r>
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	b140      	cbz	r0, 8007a50 <__sfmoreglue+0x28>
 8007a3e:	2100      	movs	r1, #0
 8007a40:	e880 0042 	stmia.w	r0, {r1, r6}
 8007a44:	300c      	adds	r0, #12
 8007a46:	60a0      	str	r0, [r4, #8]
 8007a48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a4c:	f7fe fabd 	bl	8005fca <memset>
 8007a50:	4620      	mov	r0, r4
 8007a52:	bd70      	pop	{r4, r5, r6, pc}

08007a54 <__sinit>:
 8007a54:	6983      	ldr	r3, [r0, #24]
 8007a56:	b510      	push	{r4, lr}
 8007a58:	4604      	mov	r4, r0
 8007a5a:	bb33      	cbnz	r3, 8007aaa <__sinit+0x56>
 8007a5c:	6483      	str	r3, [r0, #72]	; 0x48
 8007a5e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8007a60:	6503      	str	r3, [r0, #80]	; 0x50
 8007a62:	4b12      	ldr	r3, [pc, #72]	; (8007aac <__sinit+0x58>)
 8007a64:	4a12      	ldr	r2, [pc, #72]	; (8007ab0 <__sinit+0x5c>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	6282      	str	r2, [r0, #40]	; 0x28
 8007a6a:	4298      	cmp	r0, r3
 8007a6c:	bf04      	itt	eq
 8007a6e:	2301      	moveq	r3, #1
 8007a70:	6183      	streq	r3, [r0, #24]
 8007a72:	f000 f81f 	bl	8007ab4 <__sfp>
 8007a76:	6060      	str	r0, [r4, #4]
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f000 f81b 	bl	8007ab4 <__sfp>
 8007a7e:	60a0      	str	r0, [r4, #8]
 8007a80:	4620      	mov	r0, r4
 8007a82:	f000 f817 	bl	8007ab4 <__sfp>
 8007a86:	2200      	movs	r2, #0
 8007a88:	60e0      	str	r0, [r4, #12]
 8007a8a:	2104      	movs	r1, #4
 8007a8c:	6860      	ldr	r0, [r4, #4]
 8007a8e:	f7ff ffa7 	bl	80079e0 <std.isra.0>
 8007a92:	2201      	movs	r2, #1
 8007a94:	2109      	movs	r1, #9
 8007a96:	68a0      	ldr	r0, [r4, #8]
 8007a98:	f7ff ffa2 	bl	80079e0 <std.isra.0>
 8007a9c:	2202      	movs	r2, #2
 8007a9e:	2112      	movs	r1, #18
 8007aa0:	68e0      	ldr	r0, [r4, #12]
 8007aa2:	f7ff ff9d 	bl	80079e0 <std.isra.0>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	61a3      	str	r3, [r4, #24]
 8007aaa:	bd10      	pop	{r4, pc}
 8007aac:	08009198 	.word	0x08009198
 8007ab0:	080079d5 	.word	0x080079d5

08007ab4 <__sfp>:
 8007ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab6:	4b1c      	ldr	r3, [pc, #112]	; (8007b28 <__sfp+0x74>)
 8007ab8:	681e      	ldr	r6, [r3, #0]
 8007aba:	69b3      	ldr	r3, [r6, #24]
 8007abc:	4607      	mov	r7, r0
 8007abe:	b913      	cbnz	r3, 8007ac6 <__sfp+0x12>
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	f7ff ffc7 	bl	8007a54 <__sinit>
 8007ac6:	3648      	adds	r6, #72	; 0x48
 8007ac8:	68b4      	ldr	r4, [r6, #8]
 8007aca:	6873      	ldr	r3, [r6, #4]
 8007acc:	3b01      	subs	r3, #1
 8007ace:	d503      	bpl.n	8007ad8 <__sfp+0x24>
 8007ad0:	6833      	ldr	r3, [r6, #0]
 8007ad2:	b133      	cbz	r3, 8007ae2 <__sfp+0x2e>
 8007ad4:	6836      	ldr	r6, [r6, #0]
 8007ad6:	e7f7      	b.n	8007ac8 <__sfp+0x14>
 8007ad8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007adc:	b16d      	cbz	r5, 8007afa <__sfp+0x46>
 8007ade:	3468      	adds	r4, #104	; 0x68
 8007ae0:	e7f4      	b.n	8007acc <__sfp+0x18>
 8007ae2:	2104      	movs	r1, #4
 8007ae4:	4638      	mov	r0, r7
 8007ae6:	f7ff ff9f 	bl	8007a28 <__sfmoreglue>
 8007aea:	6030      	str	r0, [r6, #0]
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d1f1      	bne.n	8007ad4 <__sfp+0x20>
 8007af0:	230c      	movs	r3, #12
 8007af2:	603b      	str	r3, [r7, #0]
 8007af4:	4604      	mov	r4, r0
 8007af6:	4620      	mov	r0, r4
 8007af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007afa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007afe:	81e3      	strh	r3, [r4, #14]
 8007b00:	2301      	movs	r3, #1
 8007b02:	81a3      	strh	r3, [r4, #12]
 8007b04:	6665      	str	r5, [r4, #100]	; 0x64
 8007b06:	6025      	str	r5, [r4, #0]
 8007b08:	60a5      	str	r5, [r4, #8]
 8007b0a:	6065      	str	r5, [r4, #4]
 8007b0c:	6125      	str	r5, [r4, #16]
 8007b0e:	6165      	str	r5, [r4, #20]
 8007b10:	61a5      	str	r5, [r4, #24]
 8007b12:	2208      	movs	r2, #8
 8007b14:	4629      	mov	r1, r5
 8007b16:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b1a:	f7fe fa56 	bl	8005fca <memset>
 8007b1e:	6365      	str	r5, [r4, #52]	; 0x34
 8007b20:	63a5      	str	r5, [r4, #56]	; 0x38
 8007b22:	64a5      	str	r5, [r4, #72]	; 0x48
 8007b24:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007b26:	e7e6      	b.n	8007af6 <__sfp+0x42>
 8007b28:	08009198 	.word	0x08009198

08007b2c <_fwalk>:
 8007b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b30:	4688      	mov	r8, r1
 8007b32:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b36:	2600      	movs	r6, #0
 8007b38:	b914      	cbnz	r4, 8007b40 <_fwalk+0x14>
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b40:	68a5      	ldr	r5, [r4, #8]
 8007b42:	6867      	ldr	r7, [r4, #4]
 8007b44:	3f01      	subs	r7, #1
 8007b46:	d501      	bpl.n	8007b4c <_fwalk+0x20>
 8007b48:	6824      	ldr	r4, [r4, #0]
 8007b4a:	e7f5      	b.n	8007b38 <_fwalk+0xc>
 8007b4c:	89ab      	ldrh	r3, [r5, #12]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d906      	bls.n	8007b60 <_fwalk+0x34>
 8007b52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b56:	3301      	adds	r3, #1
 8007b58:	d002      	beq.n	8007b60 <_fwalk+0x34>
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	47c0      	blx	r8
 8007b5e:	4306      	orrs	r6, r0
 8007b60:	3568      	adds	r5, #104	; 0x68
 8007b62:	e7ef      	b.n	8007b44 <_fwalk+0x18>

08007b64 <_fwalk_reent>:
 8007b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b68:	4680      	mov	r8, r0
 8007b6a:	4689      	mov	r9, r1
 8007b6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b70:	2600      	movs	r6, #0
 8007b72:	b914      	cbnz	r4, 8007b7a <_fwalk_reent+0x16>
 8007b74:	4630      	mov	r0, r6
 8007b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b7a:	68a5      	ldr	r5, [r4, #8]
 8007b7c:	6867      	ldr	r7, [r4, #4]
 8007b7e:	3f01      	subs	r7, #1
 8007b80:	d501      	bpl.n	8007b86 <_fwalk_reent+0x22>
 8007b82:	6824      	ldr	r4, [r4, #0]
 8007b84:	e7f5      	b.n	8007b72 <_fwalk_reent+0xe>
 8007b86:	89ab      	ldrh	r3, [r5, #12]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d907      	bls.n	8007b9c <_fwalk_reent+0x38>
 8007b8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b90:	3301      	adds	r3, #1
 8007b92:	d003      	beq.n	8007b9c <_fwalk_reent+0x38>
 8007b94:	4629      	mov	r1, r5
 8007b96:	4640      	mov	r0, r8
 8007b98:	47c8      	blx	r9
 8007b9a:	4306      	orrs	r6, r0
 8007b9c:	3568      	adds	r5, #104	; 0x68
 8007b9e:	e7ee      	b.n	8007b7e <_fwalk_reent+0x1a>

08007ba0 <_localeconv_r>:
 8007ba0:	4b04      	ldr	r3, [pc, #16]	; (8007bb4 <_localeconv_r+0x14>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6a18      	ldr	r0, [r3, #32]
 8007ba6:	4b04      	ldr	r3, [pc, #16]	; (8007bb8 <_localeconv_r+0x18>)
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	bf08      	it	eq
 8007bac:	4618      	moveq	r0, r3
 8007bae:	30f0      	adds	r0, #240	; 0xf0
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	20000530 	.word	0x20000530
 8007bb8:	20000594 	.word	0x20000594

08007bbc <__swhatbuf_r>:
 8007bbc:	b570      	push	{r4, r5, r6, lr}
 8007bbe:	460e      	mov	r6, r1
 8007bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc4:	2900      	cmp	r1, #0
 8007bc6:	b090      	sub	sp, #64	; 0x40
 8007bc8:	4614      	mov	r4, r2
 8007bca:	461d      	mov	r5, r3
 8007bcc:	da07      	bge.n	8007bde <__swhatbuf_r+0x22>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	602b      	str	r3, [r5, #0]
 8007bd2:	89b3      	ldrh	r3, [r6, #12]
 8007bd4:	061a      	lsls	r2, r3, #24
 8007bd6:	d410      	bmi.n	8007bfa <__swhatbuf_r+0x3e>
 8007bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bdc:	e00e      	b.n	8007bfc <__swhatbuf_r+0x40>
 8007bde:	aa01      	add	r2, sp, #4
 8007be0:	f000 fe2c 	bl	800883c <_fstat_r>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	dbf2      	blt.n	8007bce <__swhatbuf_r+0x12>
 8007be8:	9a02      	ldr	r2, [sp, #8]
 8007bea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007bee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007bf2:	425a      	negs	r2, r3
 8007bf4:	415a      	adcs	r2, r3
 8007bf6:	602a      	str	r2, [r5, #0]
 8007bf8:	e7ee      	b.n	8007bd8 <__swhatbuf_r+0x1c>
 8007bfa:	2340      	movs	r3, #64	; 0x40
 8007bfc:	2000      	movs	r0, #0
 8007bfe:	6023      	str	r3, [r4, #0]
 8007c00:	b010      	add	sp, #64	; 0x40
 8007c02:	bd70      	pop	{r4, r5, r6, pc}

08007c04 <__smakebuf_r>:
 8007c04:	898b      	ldrh	r3, [r1, #12]
 8007c06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c08:	079d      	lsls	r5, r3, #30
 8007c0a:	4606      	mov	r6, r0
 8007c0c:	460c      	mov	r4, r1
 8007c0e:	d507      	bpl.n	8007c20 <__smakebuf_r+0x1c>
 8007c10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	6123      	str	r3, [r4, #16]
 8007c18:	2301      	movs	r3, #1
 8007c1a:	6163      	str	r3, [r4, #20]
 8007c1c:	b002      	add	sp, #8
 8007c1e:	bd70      	pop	{r4, r5, r6, pc}
 8007c20:	ab01      	add	r3, sp, #4
 8007c22:	466a      	mov	r2, sp
 8007c24:	f7ff ffca 	bl	8007bbc <__swhatbuf_r>
 8007c28:	9900      	ldr	r1, [sp, #0]
 8007c2a:	4605      	mov	r5, r0
 8007c2c:	4630      	mov	r0, r6
 8007c2e:	f000 fb5d 	bl	80082ec <_malloc_r>
 8007c32:	b948      	cbnz	r0, 8007c48 <__smakebuf_r+0x44>
 8007c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c38:	059a      	lsls	r2, r3, #22
 8007c3a:	d4ef      	bmi.n	8007c1c <__smakebuf_r+0x18>
 8007c3c:	f023 0303 	bic.w	r3, r3, #3
 8007c40:	f043 0302 	orr.w	r3, r3, #2
 8007c44:	81a3      	strh	r3, [r4, #12]
 8007c46:	e7e3      	b.n	8007c10 <__smakebuf_r+0xc>
 8007c48:	4b0d      	ldr	r3, [pc, #52]	; (8007c80 <__smakebuf_r+0x7c>)
 8007c4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	6020      	str	r0, [r4, #0]
 8007c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c54:	81a3      	strh	r3, [r4, #12]
 8007c56:	9b00      	ldr	r3, [sp, #0]
 8007c58:	6163      	str	r3, [r4, #20]
 8007c5a:	9b01      	ldr	r3, [sp, #4]
 8007c5c:	6120      	str	r0, [r4, #16]
 8007c5e:	b15b      	cbz	r3, 8007c78 <__smakebuf_r+0x74>
 8007c60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c64:	4630      	mov	r0, r6
 8007c66:	f000 fdfb 	bl	8008860 <_isatty_r>
 8007c6a:	b128      	cbz	r0, 8007c78 <__smakebuf_r+0x74>
 8007c6c:	89a3      	ldrh	r3, [r4, #12]
 8007c6e:	f023 0303 	bic.w	r3, r3, #3
 8007c72:	f043 0301 	orr.w	r3, r3, #1
 8007c76:	81a3      	strh	r3, [r4, #12]
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	431d      	orrs	r5, r3
 8007c7c:	81a5      	strh	r5, [r4, #12]
 8007c7e:	e7cd      	b.n	8007c1c <__smakebuf_r+0x18>
 8007c80:	080079d5 	.word	0x080079d5

08007c84 <malloc>:
 8007c84:	4b02      	ldr	r3, [pc, #8]	; (8007c90 <malloc+0xc>)
 8007c86:	4601      	mov	r1, r0
 8007c88:	6818      	ldr	r0, [r3, #0]
 8007c8a:	f000 bb2f 	b.w	80082ec <_malloc_r>
 8007c8e:	bf00      	nop
 8007c90:	20000530 	.word	0x20000530

08007c94 <_Balloc>:
 8007c94:	b570      	push	{r4, r5, r6, lr}
 8007c96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c98:	4604      	mov	r4, r0
 8007c9a:	460e      	mov	r6, r1
 8007c9c:	b93d      	cbnz	r5, 8007cae <_Balloc+0x1a>
 8007c9e:	2010      	movs	r0, #16
 8007ca0:	f7ff fff0 	bl	8007c84 <malloc>
 8007ca4:	6260      	str	r0, [r4, #36]	; 0x24
 8007ca6:	6045      	str	r5, [r0, #4]
 8007ca8:	6085      	str	r5, [r0, #8]
 8007caa:	6005      	str	r5, [r0, #0]
 8007cac:	60c5      	str	r5, [r0, #12]
 8007cae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007cb0:	68eb      	ldr	r3, [r5, #12]
 8007cb2:	b183      	cbz	r3, 8007cd6 <_Balloc+0x42>
 8007cb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007cbc:	b9b8      	cbnz	r0, 8007cee <_Balloc+0x5a>
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	fa01 f506 	lsl.w	r5, r1, r6
 8007cc4:	1d6a      	adds	r2, r5, #5
 8007cc6:	0092      	lsls	r2, r2, #2
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f000 fab3 	bl	8008234 <_calloc_r>
 8007cce:	b160      	cbz	r0, 8007cea <_Balloc+0x56>
 8007cd0:	6046      	str	r6, [r0, #4]
 8007cd2:	6085      	str	r5, [r0, #8]
 8007cd4:	e00e      	b.n	8007cf4 <_Balloc+0x60>
 8007cd6:	2221      	movs	r2, #33	; 0x21
 8007cd8:	2104      	movs	r1, #4
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f000 faaa 	bl	8008234 <_calloc_r>
 8007ce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ce2:	60e8      	str	r0, [r5, #12]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e4      	bne.n	8007cb4 <_Balloc+0x20>
 8007cea:	2000      	movs	r0, #0
 8007cec:	bd70      	pop	{r4, r5, r6, pc}
 8007cee:	6802      	ldr	r2, [r0, #0]
 8007cf0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	6103      	str	r3, [r0, #16]
 8007cf8:	60c3      	str	r3, [r0, #12]
 8007cfa:	bd70      	pop	{r4, r5, r6, pc}

08007cfc <_Bfree>:
 8007cfc:	b570      	push	{r4, r5, r6, lr}
 8007cfe:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007d00:	4606      	mov	r6, r0
 8007d02:	460d      	mov	r5, r1
 8007d04:	b93c      	cbnz	r4, 8007d16 <_Bfree+0x1a>
 8007d06:	2010      	movs	r0, #16
 8007d08:	f7ff ffbc 	bl	8007c84 <malloc>
 8007d0c:	6270      	str	r0, [r6, #36]	; 0x24
 8007d0e:	6044      	str	r4, [r0, #4]
 8007d10:	6084      	str	r4, [r0, #8]
 8007d12:	6004      	str	r4, [r0, #0]
 8007d14:	60c4      	str	r4, [r0, #12]
 8007d16:	b13d      	cbz	r5, 8007d28 <_Bfree+0x2c>
 8007d18:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007d1a:	686a      	ldr	r2, [r5, #4]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d22:	6029      	str	r1, [r5, #0]
 8007d24:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007d28:	bd70      	pop	{r4, r5, r6, pc}

08007d2a <__multadd>:
 8007d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d2e:	690d      	ldr	r5, [r1, #16]
 8007d30:	461f      	mov	r7, r3
 8007d32:	4606      	mov	r6, r0
 8007d34:	460c      	mov	r4, r1
 8007d36:	f101 0e14 	add.w	lr, r1, #20
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	f8de 0000 	ldr.w	r0, [lr]
 8007d40:	b281      	uxth	r1, r0
 8007d42:	fb02 7101 	mla	r1, r2, r1, r7
 8007d46:	0c0f      	lsrs	r7, r1, #16
 8007d48:	0c00      	lsrs	r0, r0, #16
 8007d4a:	fb02 7000 	mla	r0, r2, r0, r7
 8007d4e:	b289      	uxth	r1, r1
 8007d50:	3301      	adds	r3, #1
 8007d52:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007d56:	429d      	cmp	r5, r3
 8007d58:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007d5c:	f84e 1b04 	str.w	r1, [lr], #4
 8007d60:	dcec      	bgt.n	8007d3c <__multadd+0x12>
 8007d62:	b1d7      	cbz	r7, 8007d9a <__multadd+0x70>
 8007d64:	68a3      	ldr	r3, [r4, #8]
 8007d66:	429d      	cmp	r5, r3
 8007d68:	db12      	blt.n	8007d90 <__multadd+0x66>
 8007d6a:	6861      	ldr	r1, [r4, #4]
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	3101      	adds	r1, #1
 8007d70:	f7ff ff90 	bl	8007c94 <_Balloc>
 8007d74:	6922      	ldr	r2, [r4, #16]
 8007d76:	3202      	adds	r2, #2
 8007d78:	f104 010c 	add.w	r1, r4, #12
 8007d7c:	4680      	mov	r8, r0
 8007d7e:	0092      	lsls	r2, r2, #2
 8007d80:	300c      	adds	r0, #12
 8007d82:	f7fe f917 	bl	8005fb4 <memcpy>
 8007d86:	4621      	mov	r1, r4
 8007d88:	4630      	mov	r0, r6
 8007d8a:	f7ff ffb7 	bl	8007cfc <_Bfree>
 8007d8e:	4644      	mov	r4, r8
 8007d90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d94:	3501      	adds	r5, #1
 8007d96:	615f      	str	r7, [r3, #20]
 8007d98:	6125      	str	r5, [r4, #16]
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007da0 <__hi0bits>:
 8007da0:	0c02      	lsrs	r2, r0, #16
 8007da2:	0412      	lsls	r2, r2, #16
 8007da4:	4603      	mov	r3, r0
 8007da6:	b9b2      	cbnz	r2, 8007dd6 <__hi0bits+0x36>
 8007da8:	0403      	lsls	r3, r0, #16
 8007daa:	2010      	movs	r0, #16
 8007dac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007db0:	bf04      	itt	eq
 8007db2:	021b      	lsleq	r3, r3, #8
 8007db4:	3008      	addeq	r0, #8
 8007db6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007dba:	bf04      	itt	eq
 8007dbc:	011b      	lsleq	r3, r3, #4
 8007dbe:	3004      	addeq	r0, #4
 8007dc0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007dc4:	bf04      	itt	eq
 8007dc6:	009b      	lsleq	r3, r3, #2
 8007dc8:	3002      	addeq	r0, #2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	db06      	blt.n	8007ddc <__hi0bits+0x3c>
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	d503      	bpl.n	8007dda <__hi0bits+0x3a>
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	4770      	bx	lr
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	e7e8      	b.n	8007dac <__hi0bits+0xc>
 8007dda:	2020      	movs	r0, #32
 8007ddc:	4770      	bx	lr

08007dde <__lo0bits>:
 8007dde:	6803      	ldr	r3, [r0, #0]
 8007de0:	f013 0207 	ands.w	r2, r3, #7
 8007de4:	4601      	mov	r1, r0
 8007de6:	d00b      	beq.n	8007e00 <__lo0bits+0x22>
 8007de8:	07da      	lsls	r2, r3, #31
 8007dea:	d423      	bmi.n	8007e34 <__lo0bits+0x56>
 8007dec:	0798      	lsls	r0, r3, #30
 8007dee:	bf49      	itett	mi
 8007df0:	085b      	lsrmi	r3, r3, #1
 8007df2:	089b      	lsrpl	r3, r3, #2
 8007df4:	2001      	movmi	r0, #1
 8007df6:	600b      	strmi	r3, [r1, #0]
 8007df8:	bf5c      	itt	pl
 8007dfa:	600b      	strpl	r3, [r1, #0]
 8007dfc:	2002      	movpl	r0, #2
 8007dfe:	4770      	bx	lr
 8007e00:	b298      	uxth	r0, r3
 8007e02:	b9a8      	cbnz	r0, 8007e30 <__lo0bits+0x52>
 8007e04:	0c1b      	lsrs	r3, r3, #16
 8007e06:	2010      	movs	r0, #16
 8007e08:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007e0c:	bf04      	itt	eq
 8007e0e:	0a1b      	lsreq	r3, r3, #8
 8007e10:	3008      	addeq	r0, #8
 8007e12:	071a      	lsls	r2, r3, #28
 8007e14:	bf04      	itt	eq
 8007e16:	091b      	lsreq	r3, r3, #4
 8007e18:	3004      	addeq	r0, #4
 8007e1a:	079a      	lsls	r2, r3, #30
 8007e1c:	bf04      	itt	eq
 8007e1e:	089b      	lsreq	r3, r3, #2
 8007e20:	3002      	addeq	r0, #2
 8007e22:	07da      	lsls	r2, r3, #31
 8007e24:	d402      	bmi.n	8007e2c <__lo0bits+0x4e>
 8007e26:	085b      	lsrs	r3, r3, #1
 8007e28:	d006      	beq.n	8007e38 <__lo0bits+0x5a>
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	600b      	str	r3, [r1, #0]
 8007e2e:	4770      	bx	lr
 8007e30:	4610      	mov	r0, r2
 8007e32:	e7e9      	b.n	8007e08 <__lo0bits+0x2a>
 8007e34:	2000      	movs	r0, #0
 8007e36:	4770      	bx	lr
 8007e38:	2020      	movs	r0, #32
 8007e3a:	4770      	bx	lr

08007e3c <__i2b>:
 8007e3c:	b510      	push	{r4, lr}
 8007e3e:	460c      	mov	r4, r1
 8007e40:	2101      	movs	r1, #1
 8007e42:	f7ff ff27 	bl	8007c94 <_Balloc>
 8007e46:	2201      	movs	r2, #1
 8007e48:	6144      	str	r4, [r0, #20]
 8007e4a:	6102      	str	r2, [r0, #16]
 8007e4c:	bd10      	pop	{r4, pc}

08007e4e <__multiply>:
 8007e4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e52:	4614      	mov	r4, r2
 8007e54:	690a      	ldr	r2, [r1, #16]
 8007e56:	6923      	ldr	r3, [r4, #16]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	bfb8      	it	lt
 8007e5c:	460b      	movlt	r3, r1
 8007e5e:	4689      	mov	r9, r1
 8007e60:	bfbc      	itt	lt
 8007e62:	46a1      	movlt	r9, r4
 8007e64:	461c      	movlt	r4, r3
 8007e66:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007e6a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007e6e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007e72:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e76:	eb07 060a 	add.w	r6, r7, sl
 8007e7a:	429e      	cmp	r6, r3
 8007e7c:	bfc8      	it	gt
 8007e7e:	3101      	addgt	r1, #1
 8007e80:	f7ff ff08 	bl	8007c94 <_Balloc>
 8007e84:	f100 0514 	add.w	r5, r0, #20
 8007e88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e8c:	462b      	mov	r3, r5
 8007e8e:	2200      	movs	r2, #0
 8007e90:	4543      	cmp	r3, r8
 8007e92:	d316      	bcc.n	8007ec2 <__multiply+0x74>
 8007e94:	f104 0214 	add.w	r2, r4, #20
 8007e98:	f109 0114 	add.w	r1, r9, #20
 8007e9c:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8007ea0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007ea4:	9301      	str	r3, [sp, #4]
 8007ea6:	9c01      	ldr	r4, [sp, #4]
 8007ea8:	4294      	cmp	r4, r2
 8007eaa:	4613      	mov	r3, r2
 8007eac:	d80c      	bhi.n	8007ec8 <__multiply+0x7a>
 8007eae:	2e00      	cmp	r6, #0
 8007eb0:	dd03      	ble.n	8007eba <__multiply+0x6c>
 8007eb2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d054      	beq.n	8007f64 <__multiply+0x116>
 8007eba:	6106      	str	r6, [r0, #16]
 8007ebc:	b003      	add	sp, #12
 8007ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec2:	f843 2b04 	str.w	r2, [r3], #4
 8007ec6:	e7e3      	b.n	8007e90 <__multiply+0x42>
 8007ec8:	f8b3 a000 	ldrh.w	sl, [r3]
 8007ecc:	3204      	adds	r2, #4
 8007ece:	f1ba 0f00 	cmp.w	sl, #0
 8007ed2:	d020      	beq.n	8007f16 <__multiply+0xc8>
 8007ed4:	46ae      	mov	lr, r5
 8007ed6:	4689      	mov	r9, r1
 8007ed8:	f04f 0c00 	mov.w	ip, #0
 8007edc:	f859 4b04 	ldr.w	r4, [r9], #4
 8007ee0:	f8be b000 	ldrh.w	fp, [lr]
 8007ee4:	b2a3      	uxth	r3, r4
 8007ee6:	fb0a b303 	mla	r3, sl, r3, fp
 8007eea:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8007eee:	f8de 4000 	ldr.w	r4, [lr]
 8007ef2:	4463      	add	r3, ip
 8007ef4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007ef8:	fb0a c40b 	mla	r4, sl, fp, ip
 8007efc:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007f06:	454f      	cmp	r7, r9
 8007f08:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007f0c:	f84e 3b04 	str.w	r3, [lr], #4
 8007f10:	d8e4      	bhi.n	8007edc <__multiply+0x8e>
 8007f12:	f8ce c000 	str.w	ip, [lr]
 8007f16:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8007f1a:	f1b9 0f00 	cmp.w	r9, #0
 8007f1e:	d01f      	beq.n	8007f60 <__multiply+0x112>
 8007f20:	682b      	ldr	r3, [r5, #0]
 8007f22:	46ae      	mov	lr, r5
 8007f24:	468c      	mov	ip, r1
 8007f26:	f04f 0a00 	mov.w	sl, #0
 8007f2a:	f8bc 4000 	ldrh.w	r4, [ip]
 8007f2e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007f32:	fb09 b404 	mla	r4, r9, r4, fp
 8007f36:	44a2      	add	sl, r4
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8007f3e:	f84e 3b04 	str.w	r3, [lr], #4
 8007f42:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f46:	f8be 4000 	ldrh.w	r4, [lr]
 8007f4a:	0c1b      	lsrs	r3, r3, #16
 8007f4c:	fb09 4303 	mla	r3, r9, r3, r4
 8007f50:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8007f54:	4567      	cmp	r7, ip
 8007f56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f5a:	d8e6      	bhi.n	8007f2a <__multiply+0xdc>
 8007f5c:	f8ce 3000 	str.w	r3, [lr]
 8007f60:	3504      	adds	r5, #4
 8007f62:	e7a0      	b.n	8007ea6 <__multiply+0x58>
 8007f64:	3e01      	subs	r6, #1
 8007f66:	e7a2      	b.n	8007eae <__multiply+0x60>

08007f68 <__pow5mult>:
 8007f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f6c:	4615      	mov	r5, r2
 8007f6e:	f012 0203 	ands.w	r2, r2, #3
 8007f72:	4606      	mov	r6, r0
 8007f74:	460f      	mov	r7, r1
 8007f76:	d007      	beq.n	8007f88 <__pow5mult+0x20>
 8007f78:	3a01      	subs	r2, #1
 8007f7a:	4c21      	ldr	r4, [pc, #132]	; (8008000 <__pow5mult+0x98>)
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f82:	f7ff fed2 	bl	8007d2a <__multadd>
 8007f86:	4607      	mov	r7, r0
 8007f88:	10ad      	asrs	r5, r5, #2
 8007f8a:	d035      	beq.n	8007ff8 <__pow5mult+0x90>
 8007f8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f8e:	b93c      	cbnz	r4, 8007fa0 <__pow5mult+0x38>
 8007f90:	2010      	movs	r0, #16
 8007f92:	f7ff fe77 	bl	8007c84 <malloc>
 8007f96:	6270      	str	r0, [r6, #36]	; 0x24
 8007f98:	6044      	str	r4, [r0, #4]
 8007f9a:	6084      	str	r4, [r0, #8]
 8007f9c:	6004      	str	r4, [r0, #0]
 8007f9e:	60c4      	str	r4, [r0, #12]
 8007fa0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007fa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007fa8:	b94c      	cbnz	r4, 8007fbe <__pow5mult+0x56>
 8007faa:	f240 2171 	movw	r1, #625	; 0x271
 8007fae:	4630      	mov	r0, r6
 8007fb0:	f7ff ff44 	bl	8007e3c <__i2b>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007fba:	4604      	mov	r4, r0
 8007fbc:	6003      	str	r3, [r0, #0]
 8007fbe:	f04f 0800 	mov.w	r8, #0
 8007fc2:	07eb      	lsls	r3, r5, #31
 8007fc4:	d50a      	bpl.n	8007fdc <__pow5mult+0x74>
 8007fc6:	4639      	mov	r1, r7
 8007fc8:	4622      	mov	r2, r4
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f7ff ff3f 	bl	8007e4e <__multiply>
 8007fd0:	4639      	mov	r1, r7
 8007fd2:	4681      	mov	r9, r0
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f7ff fe91 	bl	8007cfc <_Bfree>
 8007fda:	464f      	mov	r7, r9
 8007fdc:	106d      	asrs	r5, r5, #1
 8007fde:	d00b      	beq.n	8007ff8 <__pow5mult+0x90>
 8007fe0:	6820      	ldr	r0, [r4, #0]
 8007fe2:	b938      	cbnz	r0, 8007ff4 <__pow5mult+0x8c>
 8007fe4:	4622      	mov	r2, r4
 8007fe6:	4621      	mov	r1, r4
 8007fe8:	4630      	mov	r0, r6
 8007fea:	f7ff ff30 	bl	8007e4e <__multiply>
 8007fee:	6020      	str	r0, [r4, #0]
 8007ff0:	f8c0 8000 	str.w	r8, [r0]
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	e7e4      	b.n	8007fc2 <__pow5mult+0x5a>
 8007ff8:	4638      	mov	r0, r7
 8007ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ffe:	bf00      	nop
 8008000:	08009330 	.word	0x08009330

08008004 <__lshift>:
 8008004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008008:	460c      	mov	r4, r1
 800800a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800800e:	6923      	ldr	r3, [r4, #16]
 8008010:	6849      	ldr	r1, [r1, #4]
 8008012:	eb0a 0903 	add.w	r9, sl, r3
 8008016:	68a3      	ldr	r3, [r4, #8]
 8008018:	4607      	mov	r7, r0
 800801a:	4616      	mov	r6, r2
 800801c:	f109 0501 	add.w	r5, r9, #1
 8008020:	42ab      	cmp	r3, r5
 8008022:	db31      	blt.n	8008088 <__lshift+0x84>
 8008024:	4638      	mov	r0, r7
 8008026:	f7ff fe35 	bl	8007c94 <_Balloc>
 800802a:	2200      	movs	r2, #0
 800802c:	4680      	mov	r8, r0
 800802e:	f100 0314 	add.w	r3, r0, #20
 8008032:	4611      	mov	r1, r2
 8008034:	4552      	cmp	r2, sl
 8008036:	db2a      	blt.n	800808e <__lshift+0x8a>
 8008038:	6920      	ldr	r0, [r4, #16]
 800803a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800803e:	f104 0114 	add.w	r1, r4, #20
 8008042:	f016 021f 	ands.w	r2, r6, #31
 8008046:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800804a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800804e:	d022      	beq.n	8008096 <__lshift+0x92>
 8008050:	f1c2 0c20 	rsb	ip, r2, #32
 8008054:	2000      	movs	r0, #0
 8008056:	680e      	ldr	r6, [r1, #0]
 8008058:	4096      	lsls	r6, r2
 800805a:	4330      	orrs	r0, r6
 800805c:	f843 0b04 	str.w	r0, [r3], #4
 8008060:	f851 0b04 	ldr.w	r0, [r1], #4
 8008064:	458e      	cmp	lr, r1
 8008066:	fa20 f00c 	lsr.w	r0, r0, ip
 800806a:	d8f4      	bhi.n	8008056 <__lshift+0x52>
 800806c:	6018      	str	r0, [r3, #0]
 800806e:	b108      	cbz	r0, 8008074 <__lshift+0x70>
 8008070:	f109 0502 	add.w	r5, r9, #2
 8008074:	3d01      	subs	r5, #1
 8008076:	4638      	mov	r0, r7
 8008078:	f8c8 5010 	str.w	r5, [r8, #16]
 800807c:	4621      	mov	r1, r4
 800807e:	f7ff fe3d 	bl	8007cfc <_Bfree>
 8008082:	4640      	mov	r0, r8
 8008084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008088:	3101      	adds	r1, #1
 800808a:	005b      	lsls	r3, r3, #1
 800808c:	e7c8      	b.n	8008020 <__lshift+0x1c>
 800808e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008092:	3201      	adds	r2, #1
 8008094:	e7ce      	b.n	8008034 <__lshift+0x30>
 8008096:	3b04      	subs	r3, #4
 8008098:	f851 2b04 	ldr.w	r2, [r1], #4
 800809c:	f843 2f04 	str.w	r2, [r3, #4]!
 80080a0:	458e      	cmp	lr, r1
 80080a2:	d8f9      	bhi.n	8008098 <__lshift+0x94>
 80080a4:	e7e6      	b.n	8008074 <__lshift+0x70>

080080a6 <__mcmp>:
 80080a6:	6903      	ldr	r3, [r0, #16]
 80080a8:	690a      	ldr	r2, [r1, #16]
 80080aa:	1a9b      	subs	r3, r3, r2
 80080ac:	b530      	push	{r4, r5, lr}
 80080ae:	d10c      	bne.n	80080ca <__mcmp+0x24>
 80080b0:	0092      	lsls	r2, r2, #2
 80080b2:	3014      	adds	r0, #20
 80080b4:	3114      	adds	r1, #20
 80080b6:	1884      	adds	r4, r0, r2
 80080b8:	4411      	add	r1, r2
 80080ba:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80080be:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80080c2:	4295      	cmp	r5, r2
 80080c4:	d003      	beq.n	80080ce <__mcmp+0x28>
 80080c6:	d305      	bcc.n	80080d4 <__mcmp+0x2e>
 80080c8:	2301      	movs	r3, #1
 80080ca:	4618      	mov	r0, r3
 80080cc:	bd30      	pop	{r4, r5, pc}
 80080ce:	42a0      	cmp	r0, r4
 80080d0:	d3f3      	bcc.n	80080ba <__mcmp+0x14>
 80080d2:	e7fa      	b.n	80080ca <__mcmp+0x24>
 80080d4:	f04f 33ff 	mov.w	r3, #4294967295
 80080d8:	e7f7      	b.n	80080ca <__mcmp+0x24>

080080da <__mdiff>:
 80080da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080de:	460d      	mov	r5, r1
 80080e0:	4607      	mov	r7, r0
 80080e2:	4611      	mov	r1, r2
 80080e4:	4628      	mov	r0, r5
 80080e6:	4614      	mov	r4, r2
 80080e8:	f7ff ffdd 	bl	80080a6 <__mcmp>
 80080ec:	1e06      	subs	r6, r0, #0
 80080ee:	d108      	bne.n	8008102 <__mdiff+0x28>
 80080f0:	4631      	mov	r1, r6
 80080f2:	4638      	mov	r0, r7
 80080f4:	f7ff fdce 	bl	8007c94 <_Balloc>
 80080f8:	2301      	movs	r3, #1
 80080fa:	6103      	str	r3, [r0, #16]
 80080fc:	6146      	str	r6, [r0, #20]
 80080fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008102:	bfa4      	itt	ge
 8008104:	4623      	movge	r3, r4
 8008106:	462c      	movge	r4, r5
 8008108:	4638      	mov	r0, r7
 800810a:	6861      	ldr	r1, [r4, #4]
 800810c:	bfa6      	itte	ge
 800810e:	461d      	movge	r5, r3
 8008110:	2600      	movge	r6, #0
 8008112:	2601      	movlt	r6, #1
 8008114:	f7ff fdbe 	bl	8007c94 <_Balloc>
 8008118:	692b      	ldr	r3, [r5, #16]
 800811a:	60c6      	str	r6, [r0, #12]
 800811c:	6926      	ldr	r6, [r4, #16]
 800811e:	f105 0914 	add.w	r9, r5, #20
 8008122:	f104 0214 	add.w	r2, r4, #20
 8008126:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800812a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800812e:	f100 0514 	add.w	r5, r0, #20
 8008132:	f04f 0c00 	mov.w	ip, #0
 8008136:	f852 ab04 	ldr.w	sl, [r2], #4
 800813a:	f859 4b04 	ldr.w	r4, [r9], #4
 800813e:	fa1c f18a 	uxtah	r1, ip, sl
 8008142:	b2a3      	uxth	r3, r4
 8008144:	1ac9      	subs	r1, r1, r3
 8008146:	0c23      	lsrs	r3, r4, #16
 8008148:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800814c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008150:	b289      	uxth	r1, r1
 8008152:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008156:	45c8      	cmp	r8, r9
 8008158:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800815c:	4696      	mov	lr, r2
 800815e:	f845 3b04 	str.w	r3, [r5], #4
 8008162:	d8e8      	bhi.n	8008136 <__mdiff+0x5c>
 8008164:	45be      	cmp	lr, r7
 8008166:	d305      	bcc.n	8008174 <__mdiff+0x9a>
 8008168:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800816c:	b18b      	cbz	r3, 8008192 <__mdiff+0xb8>
 800816e:	6106      	str	r6, [r0, #16]
 8008170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008174:	f85e 1b04 	ldr.w	r1, [lr], #4
 8008178:	fa1c f381 	uxtah	r3, ip, r1
 800817c:	141a      	asrs	r2, r3, #16
 800817e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008182:	b29b      	uxth	r3, r3
 8008184:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008188:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800818c:	f845 3b04 	str.w	r3, [r5], #4
 8008190:	e7e8      	b.n	8008164 <__mdiff+0x8a>
 8008192:	3e01      	subs	r6, #1
 8008194:	e7e8      	b.n	8008168 <__mdiff+0x8e>

08008196 <__d2b>:
 8008196:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800819a:	460e      	mov	r6, r1
 800819c:	2101      	movs	r1, #1
 800819e:	ec59 8b10 	vmov	r8, r9, d0
 80081a2:	4615      	mov	r5, r2
 80081a4:	f7ff fd76 	bl	8007c94 <_Balloc>
 80081a8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80081ac:	4607      	mov	r7, r0
 80081ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081b2:	bb34      	cbnz	r4, 8008202 <__d2b+0x6c>
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	f1b8 0f00 	cmp.w	r8, #0
 80081ba:	d027      	beq.n	800820c <__d2b+0x76>
 80081bc:	a802      	add	r0, sp, #8
 80081be:	f840 8d08 	str.w	r8, [r0, #-8]!
 80081c2:	f7ff fe0c 	bl	8007dde <__lo0bits>
 80081c6:	9900      	ldr	r1, [sp, #0]
 80081c8:	b1f0      	cbz	r0, 8008208 <__d2b+0x72>
 80081ca:	9a01      	ldr	r2, [sp, #4]
 80081cc:	f1c0 0320 	rsb	r3, r0, #32
 80081d0:	fa02 f303 	lsl.w	r3, r2, r3
 80081d4:	430b      	orrs	r3, r1
 80081d6:	40c2      	lsrs	r2, r0
 80081d8:	617b      	str	r3, [r7, #20]
 80081da:	9201      	str	r2, [sp, #4]
 80081dc:	9b01      	ldr	r3, [sp, #4]
 80081de:	61bb      	str	r3, [r7, #24]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	bf14      	ite	ne
 80081e4:	2102      	movne	r1, #2
 80081e6:	2101      	moveq	r1, #1
 80081e8:	6139      	str	r1, [r7, #16]
 80081ea:	b1c4      	cbz	r4, 800821e <__d2b+0x88>
 80081ec:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80081f0:	4404      	add	r4, r0
 80081f2:	6034      	str	r4, [r6, #0]
 80081f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80081f8:	6028      	str	r0, [r5, #0]
 80081fa:	4638      	mov	r0, r7
 80081fc:	b003      	add	sp, #12
 80081fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008206:	e7d5      	b.n	80081b4 <__d2b+0x1e>
 8008208:	6179      	str	r1, [r7, #20]
 800820a:	e7e7      	b.n	80081dc <__d2b+0x46>
 800820c:	a801      	add	r0, sp, #4
 800820e:	f7ff fde6 	bl	8007dde <__lo0bits>
 8008212:	9b01      	ldr	r3, [sp, #4]
 8008214:	617b      	str	r3, [r7, #20]
 8008216:	2101      	movs	r1, #1
 8008218:	6139      	str	r1, [r7, #16]
 800821a:	3020      	adds	r0, #32
 800821c:	e7e5      	b.n	80081ea <__d2b+0x54>
 800821e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008222:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008226:	6030      	str	r0, [r6, #0]
 8008228:	6918      	ldr	r0, [r3, #16]
 800822a:	f7ff fdb9 	bl	8007da0 <__hi0bits>
 800822e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008232:	e7e1      	b.n	80081f8 <__d2b+0x62>

08008234 <_calloc_r>:
 8008234:	b538      	push	{r3, r4, r5, lr}
 8008236:	fb02 f401 	mul.w	r4, r2, r1
 800823a:	4621      	mov	r1, r4
 800823c:	f000 f856 	bl	80082ec <_malloc_r>
 8008240:	4605      	mov	r5, r0
 8008242:	b118      	cbz	r0, 800824c <_calloc_r+0x18>
 8008244:	4622      	mov	r2, r4
 8008246:	2100      	movs	r1, #0
 8008248:	f7fd febf 	bl	8005fca <memset>
 800824c:	4628      	mov	r0, r5
 800824e:	bd38      	pop	{r3, r4, r5, pc}

08008250 <_free_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	4605      	mov	r5, r0
 8008254:	2900      	cmp	r1, #0
 8008256:	d045      	beq.n	80082e4 <_free_r+0x94>
 8008258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800825c:	1f0c      	subs	r4, r1, #4
 800825e:	2b00      	cmp	r3, #0
 8008260:	bfb8      	it	lt
 8008262:	18e4      	addlt	r4, r4, r3
 8008264:	f000 fb30 	bl	80088c8 <__malloc_lock>
 8008268:	4a1f      	ldr	r2, [pc, #124]	; (80082e8 <_free_r+0x98>)
 800826a:	6813      	ldr	r3, [r2, #0]
 800826c:	4610      	mov	r0, r2
 800826e:	b933      	cbnz	r3, 800827e <_free_r+0x2e>
 8008270:	6063      	str	r3, [r4, #4]
 8008272:	6014      	str	r4, [r2, #0]
 8008274:	4628      	mov	r0, r5
 8008276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800827a:	f000 bb26 	b.w	80088ca <__malloc_unlock>
 800827e:	42a3      	cmp	r3, r4
 8008280:	d90c      	bls.n	800829c <_free_r+0x4c>
 8008282:	6821      	ldr	r1, [r4, #0]
 8008284:	1862      	adds	r2, r4, r1
 8008286:	4293      	cmp	r3, r2
 8008288:	bf04      	itt	eq
 800828a:	681a      	ldreq	r2, [r3, #0]
 800828c:	685b      	ldreq	r3, [r3, #4]
 800828e:	6063      	str	r3, [r4, #4]
 8008290:	bf04      	itt	eq
 8008292:	1852      	addeq	r2, r2, r1
 8008294:	6022      	streq	r2, [r4, #0]
 8008296:	6004      	str	r4, [r0, #0]
 8008298:	e7ec      	b.n	8008274 <_free_r+0x24>
 800829a:	4613      	mov	r3, r2
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	b10a      	cbz	r2, 80082a4 <_free_r+0x54>
 80082a0:	42a2      	cmp	r2, r4
 80082a2:	d9fa      	bls.n	800829a <_free_r+0x4a>
 80082a4:	6819      	ldr	r1, [r3, #0]
 80082a6:	1858      	adds	r0, r3, r1
 80082a8:	42a0      	cmp	r0, r4
 80082aa:	d10b      	bne.n	80082c4 <_free_r+0x74>
 80082ac:	6820      	ldr	r0, [r4, #0]
 80082ae:	4401      	add	r1, r0
 80082b0:	1858      	adds	r0, r3, r1
 80082b2:	4282      	cmp	r2, r0
 80082b4:	6019      	str	r1, [r3, #0]
 80082b6:	d1dd      	bne.n	8008274 <_free_r+0x24>
 80082b8:	6810      	ldr	r0, [r2, #0]
 80082ba:	6852      	ldr	r2, [r2, #4]
 80082bc:	605a      	str	r2, [r3, #4]
 80082be:	4401      	add	r1, r0
 80082c0:	6019      	str	r1, [r3, #0]
 80082c2:	e7d7      	b.n	8008274 <_free_r+0x24>
 80082c4:	d902      	bls.n	80082cc <_free_r+0x7c>
 80082c6:	230c      	movs	r3, #12
 80082c8:	602b      	str	r3, [r5, #0]
 80082ca:	e7d3      	b.n	8008274 <_free_r+0x24>
 80082cc:	6820      	ldr	r0, [r4, #0]
 80082ce:	1821      	adds	r1, r4, r0
 80082d0:	428a      	cmp	r2, r1
 80082d2:	bf04      	itt	eq
 80082d4:	6811      	ldreq	r1, [r2, #0]
 80082d6:	6852      	ldreq	r2, [r2, #4]
 80082d8:	6062      	str	r2, [r4, #4]
 80082da:	bf04      	itt	eq
 80082dc:	1809      	addeq	r1, r1, r0
 80082de:	6021      	streq	r1, [r4, #0]
 80082e0:	605c      	str	r4, [r3, #4]
 80082e2:	e7c7      	b.n	8008274 <_free_r+0x24>
 80082e4:	bd38      	pop	{r3, r4, r5, pc}
 80082e6:	bf00      	nop
 80082e8:	2000073c 	.word	0x2000073c

080082ec <_malloc_r>:
 80082ec:	b570      	push	{r4, r5, r6, lr}
 80082ee:	1ccd      	adds	r5, r1, #3
 80082f0:	f025 0503 	bic.w	r5, r5, #3
 80082f4:	3508      	adds	r5, #8
 80082f6:	2d0c      	cmp	r5, #12
 80082f8:	bf38      	it	cc
 80082fa:	250c      	movcc	r5, #12
 80082fc:	2d00      	cmp	r5, #0
 80082fe:	4606      	mov	r6, r0
 8008300:	db01      	blt.n	8008306 <_malloc_r+0x1a>
 8008302:	42a9      	cmp	r1, r5
 8008304:	d903      	bls.n	800830e <_malloc_r+0x22>
 8008306:	230c      	movs	r3, #12
 8008308:	6033      	str	r3, [r6, #0]
 800830a:	2000      	movs	r0, #0
 800830c:	bd70      	pop	{r4, r5, r6, pc}
 800830e:	f000 fadb 	bl	80088c8 <__malloc_lock>
 8008312:	4a23      	ldr	r2, [pc, #140]	; (80083a0 <_malloc_r+0xb4>)
 8008314:	6814      	ldr	r4, [r2, #0]
 8008316:	4621      	mov	r1, r4
 8008318:	b991      	cbnz	r1, 8008340 <_malloc_r+0x54>
 800831a:	4c22      	ldr	r4, [pc, #136]	; (80083a4 <_malloc_r+0xb8>)
 800831c:	6823      	ldr	r3, [r4, #0]
 800831e:	b91b      	cbnz	r3, 8008328 <_malloc_r+0x3c>
 8008320:	4630      	mov	r0, r6
 8008322:	f000 fa15 	bl	8008750 <_sbrk_r>
 8008326:	6020      	str	r0, [r4, #0]
 8008328:	4629      	mov	r1, r5
 800832a:	4630      	mov	r0, r6
 800832c:	f000 fa10 	bl	8008750 <_sbrk_r>
 8008330:	1c43      	adds	r3, r0, #1
 8008332:	d126      	bne.n	8008382 <_malloc_r+0x96>
 8008334:	230c      	movs	r3, #12
 8008336:	6033      	str	r3, [r6, #0]
 8008338:	4630      	mov	r0, r6
 800833a:	f000 fac6 	bl	80088ca <__malloc_unlock>
 800833e:	e7e4      	b.n	800830a <_malloc_r+0x1e>
 8008340:	680b      	ldr	r3, [r1, #0]
 8008342:	1b5b      	subs	r3, r3, r5
 8008344:	d41a      	bmi.n	800837c <_malloc_r+0x90>
 8008346:	2b0b      	cmp	r3, #11
 8008348:	d90f      	bls.n	800836a <_malloc_r+0x7e>
 800834a:	600b      	str	r3, [r1, #0]
 800834c:	50cd      	str	r5, [r1, r3]
 800834e:	18cc      	adds	r4, r1, r3
 8008350:	4630      	mov	r0, r6
 8008352:	f000 faba 	bl	80088ca <__malloc_unlock>
 8008356:	f104 000b 	add.w	r0, r4, #11
 800835a:	1d23      	adds	r3, r4, #4
 800835c:	f020 0007 	bic.w	r0, r0, #7
 8008360:	1ac3      	subs	r3, r0, r3
 8008362:	d01b      	beq.n	800839c <_malloc_r+0xb0>
 8008364:	425a      	negs	r2, r3
 8008366:	50e2      	str	r2, [r4, r3]
 8008368:	bd70      	pop	{r4, r5, r6, pc}
 800836a:	428c      	cmp	r4, r1
 800836c:	bf0d      	iteet	eq
 800836e:	6863      	ldreq	r3, [r4, #4]
 8008370:	684b      	ldrne	r3, [r1, #4]
 8008372:	6063      	strne	r3, [r4, #4]
 8008374:	6013      	streq	r3, [r2, #0]
 8008376:	bf18      	it	ne
 8008378:	460c      	movne	r4, r1
 800837a:	e7e9      	b.n	8008350 <_malloc_r+0x64>
 800837c:	460c      	mov	r4, r1
 800837e:	6849      	ldr	r1, [r1, #4]
 8008380:	e7ca      	b.n	8008318 <_malloc_r+0x2c>
 8008382:	1cc4      	adds	r4, r0, #3
 8008384:	f024 0403 	bic.w	r4, r4, #3
 8008388:	42a0      	cmp	r0, r4
 800838a:	d005      	beq.n	8008398 <_malloc_r+0xac>
 800838c:	1a21      	subs	r1, r4, r0
 800838e:	4630      	mov	r0, r6
 8008390:	f000 f9de 	bl	8008750 <_sbrk_r>
 8008394:	3001      	adds	r0, #1
 8008396:	d0cd      	beq.n	8008334 <_malloc_r+0x48>
 8008398:	6025      	str	r5, [r4, #0]
 800839a:	e7d9      	b.n	8008350 <_malloc_r+0x64>
 800839c:	bd70      	pop	{r4, r5, r6, pc}
 800839e:	bf00      	nop
 80083a0:	2000073c 	.word	0x2000073c
 80083a4:	20000740 	.word	0x20000740

080083a8 <__sfputc_r>:
 80083a8:	6893      	ldr	r3, [r2, #8]
 80083aa:	3b01      	subs	r3, #1
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	b410      	push	{r4}
 80083b0:	6093      	str	r3, [r2, #8]
 80083b2:	da09      	bge.n	80083c8 <__sfputc_r+0x20>
 80083b4:	6994      	ldr	r4, [r2, #24]
 80083b6:	42a3      	cmp	r3, r4
 80083b8:	db02      	blt.n	80083c0 <__sfputc_r+0x18>
 80083ba:	b2cb      	uxtb	r3, r1
 80083bc:	2b0a      	cmp	r3, #10
 80083be:	d103      	bne.n	80083c8 <__sfputc_r+0x20>
 80083c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083c4:	f7fe bb26 	b.w	8006a14 <__swbuf_r>
 80083c8:	6813      	ldr	r3, [r2, #0]
 80083ca:	1c58      	adds	r0, r3, #1
 80083cc:	6010      	str	r0, [r2, #0]
 80083ce:	7019      	strb	r1, [r3, #0]
 80083d0:	b2c8      	uxtb	r0, r1
 80083d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <__sfputs_r>:
 80083d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083da:	4606      	mov	r6, r0
 80083dc:	460f      	mov	r7, r1
 80083de:	4614      	mov	r4, r2
 80083e0:	18d5      	adds	r5, r2, r3
 80083e2:	42ac      	cmp	r4, r5
 80083e4:	d101      	bne.n	80083ea <__sfputs_r+0x12>
 80083e6:	2000      	movs	r0, #0
 80083e8:	e007      	b.n	80083fa <__sfputs_r+0x22>
 80083ea:	463a      	mov	r2, r7
 80083ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f0:	4630      	mov	r0, r6
 80083f2:	f7ff ffd9 	bl	80083a8 <__sfputc_r>
 80083f6:	1c43      	adds	r3, r0, #1
 80083f8:	d1f3      	bne.n	80083e2 <__sfputs_r+0xa>
 80083fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080083fc <_vfiprintf_r>:
 80083fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008400:	b09d      	sub	sp, #116	; 0x74
 8008402:	460c      	mov	r4, r1
 8008404:	4617      	mov	r7, r2
 8008406:	9303      	str	r3, [sp, #12]
 8008408:	4606      	mov	r6, r0
 800840a:	b118      	cbz	r0, 8008414 <_vfiprintf_r+0x18>
 800840c:	6983      	ldr	r3, [r0, #24]
 800840e:	b90b      	cbnz	r3, 8008414 <_vfiprintf_r+0x18>
 8008410:	f7ff fb20 	bl	8007a54 <__sinit>
 8008414:	4b7c      	ldr	r3, [pc, #496]	; (8008608 <_vfiprintf_r+0x20c>)
 8008416:	429c      	cmp	r4, r3
 8008418:	d157      	bne.n	80084ca <_vfiprintf_r+0xce>
 800841a:	6874      	ldr	r4, [r6, #4]
 800841c:	89a3      	ldrh	r3, [r4, #12]
 800841e:	0718      	lsls	r0, r3, #28
 8008420:	d55d      	bpl.n	80084de <_vfiprintf_r+0xe2>
 8008422:	6923      	ldr	r3, [r4, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d05a      	beq.n	80084de <_vfiprintf_r+0xe2>
 8008428:	2300      	movs	r3, #0
 800842a:	9309      	str	r3, [sp, #36]	; 0x24
 800842c:	2320      	movs	r3, #32
 800842e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008432:	2330      	movs	r3, #48	; 0x30
 8008434:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008438:	f04f 0b01 	mov.w	fp, #1
 800843c:	46b8      	mov	r8, r7
 800843e:	4645      	mov	r5, r8
 8008440:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008444:	2b00      	cmp	r3, #0
 8008446:	d155      	bne.n	80084f4 <_vfiprintf_r+0xf8>
 8008448:	ebb8 0a07 	subs.w	sl, r8, r7
 800844c:	d00b      	beq.n	8008466 <_vfiprintf_r+0x6a>
 800844e:	4653      	mov	r3, sl
 8008450:	463a      	mov	r2, r7
 8008452:	4621      	mov	r1, r4
 8008454:	4630      	mov	r0, r6
 8008456:	f7ff ffbf 	bl	80083d8 <__sfputs_r>
 800845a:	3001      	adds	r0, #1
 800845c:	f000 80c4 	beq.w	80085e8 <_vfiprintf_r+0x1ec>
 8008460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008462:	4453      	add	r3, sl
 8008464:	9309      	str	r3, [sp, #36]	; 0x24
 8008466:	f898 3000 	ldrb.w	r3, [r8]
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 80bc 	beq.w	80085e8 <_vfiprintf_r+0x1ec>
 8008470:	2300      	movs	r3, #0
 8008472:	f04f 32ff 	mov.w	r2, #4294967295
 8008476:	9304      	str	r3, [sp, #16]
 8008478:	9307      	str	r3, [sp, #28]
 800847a:	9205      	str	r2, [sp, #20]
 800847c:	9306      	str	r3, [sp, #24]
 800847e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008482:	931a      	str	r3, [sp, #104]	; 0x68
 8008484:	2205      	movs	r2, #5
 8008486:	7829      	ldrb	r1, [r5, #0]
 8008488:	4860      	ldr	r0, [pc, #384]	; (800860c <_vfiprintf_r+0x210>)
 800848a:	f7f7 fea9 	bl	80001e0 <memchr>
 800848e:	f105 0801 	add.w	r8, r5, #1
 8008492:	9b04      	ldr	r3, [sp, #16]
 8008494:	2800      	cmp	r0, #0
 8008496:	d131      	bne.n	80084fc <_vfiprintf_r+0x100>
 8008498:	06d9      	lsls	r1, r3, #27
 800849a:	bf44      	itt	mi
 800849c:	2220      	movmi	r2, #32
 800849e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80084a2:	071a      	lsls	r2, r3, #28
 80084a4:	bf44      	itt	mi
 80084a6:	222b      	movmi	r2, #43	; 0x2b
 80084a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80084ac:	782a      	ldrb	r2, [r5, #0]
 80084ae:	2a2a      	cmp	r2, #42	; 0x2a
 80084b0:	d02c      	beq.n	800850c <_vfiprintf_r+0x110>
 80084b2:	9a07      	ldr	r2, [sp, #28]
 80084b4:	2100      	movs	r1, #0
 80084b6:	200a      	movs	r0, #10
 80084b8:	46a8      	mov	r8, r5
 80084ba:	3501      	adds	r5, #1
 80084bc:	f898 3000 	ldrb.w	r3, [r8]
 80084c0:	3b30      	subs	r3, #48	; 0x30
 80084c2:	2b09      	cmp	r3, #9
 80084c4:	d96d      	bls.n	80085a2 <_vfiprintf_r+0x1a6>
 80084c6:	b371      	cbz	r1, 8008526 <_vfiprintf_r+0x12a>
 80084c8:	e026      	b.n	8008518 <_vfiprintf_r+0x11c>
 80084ca:	4b51      	ldr	r3, [pc, #324]	; (8008610 <_vfiprintf_r+0x214>)
 80084cc:	429c      	cmp	r4, r3
 80084ce:	d101      	bne.n	80084d4 <_vfiprintf_r+0xd8>
 80084d0:	68b4      	ldr	r4, [r6, #8]
 80084d2:	e7a3      	b.n	800841c <_vfiprintf_r+0x20>
 80084d4:	4b4f      	ldr	r3, [pc, #316]	; (8008614 <_vfiprintf_r+0x218>)
 80084d6:	429c      	cmp	r4, r3
 80084d8:	bf08      	it	eq
 80084da:	68f4      	ldreq	r4, [r6, #12]
 80084dc:	e79e      	b.n	800841c <_vfiprintf_r+0x20>
 80084de:	4621      	mov	r1, r4
 80084e0:	4630      	mov	r0, r6
 80084e2:	f7fe fae9 	bl	8006ab8 <__swsetup_r>
 80084e6:	2800      	cmp	r0, #0
 80084e8:	d09e      	beq.n	8008428 <_vfiprintf_r+0x2c>
 80084ea:	f04f 30ff 	mov.w	r0, #4294967295
 80084ee:	b01d      	add	sp, #116	; 0x74
 80084f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084f4:	2b25      	cmp	r3, #37	; 0x25
 80084f6:	d0a7      	beq.n	8008448 <_vfiprintf_r+0x4c>
 80084f8:	46a8      	mov	r8, r5
 80084fa:	e7a0      	b.n	800843e <_vfiprintf_r+0x42>
 80084fc:	4a43      	ldr	r2, [pc, #268]	; (800860c <_vfiprintf_r+0x210>)
 80084fe:	1a80      	subs	r0, r0, r2
 8008500:	fa0b f000 	lsl.w	r0, fp, r0
 8008504:	4318      	orrs	r0, r3
 8008506:	9004      	str	r0, [sp, #16]
 8008508:	4645      	mov	r5, r8
 800850a:	e7bb      	b.n	8008484 <_vfiprintf_r+0x88>
 800850c:	9a03      	ldr	r2, [sp, #12]
 800850e:	1d11      	adds	r1, r2, #4
 8008510:	6812      	ldr	r2, [r2, #0]
 8008512:	9103      	str	r1, [sp, #12]
 8008514:	2a00      	cmp	r2, #0
 8008516:	db01      	blt.n	800851c <_vfiprintf_r+0x120>
 8008518:	9207      	str	r2, [sp, #28]
 800851a:	e004      	b.n	8008526 <_vfiprintf_r+0x12a>
 800851c:	4252      	negs	r2, r2
 800851e:	f043 0302 	orr.w	r3, r3, #2
 8008522:	9207      	str	r2, [sp, #28]
 8008524:	9304      	str	r3, [sp, #16]
 8008526:	f898 3000 	ldrb.w	r3, [r8]
 800852a:	2b2e      	cmp	r3, #46	; 0x2e
 800852c:	d110      	bne.n	8008550 <_vfiprintf_r+0x154>
 800852e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008532:	2b2a      	cmp	r3, #42	; 0x2a
 8008534:	f108 0101 	add.w	r1, r8, #1
 8008538:	d137      	bne.n	80085aa <_vfiprintf_r+0x1ae>
 800853a:	9b03      	ldr	r3, [sp, #12]
 800853c:	1d1a      	adds	r2, r3, #4
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	9203      	str	r2, [sp, #12]
 8008542:	2b00      	cmp	r3, #0
 8008544:	bfb8      	it	lt
 8008546:	f04f 33ff 	movlt.w	r3, #4294967295
 800854a:	f108 0802 	add.w	r8, r8, #2
 800854e:	9305      	str	r3, [sp, #20]
 8008550:	4d31      	ldr	r5, [pc, #196]	; (8008618 <_vfiprintf_r+0x21c>)
 8008552:	f898 1000 	ldrb.w	r1, [r8]
 8008556:	2203      	movs	r2, #3
 8008558:	4628      	mov	r0, r5
 800855a:	f7f7 fe41 	bl	80001e0 <memchr>
 800855e:	b140      	cbz	r0, 8008572 <_vfiprintf_r+0x176>
 8008560:	2340      	movs	r3, #64	; 0x40
 8008562:	1b40      	subs	r0, r0, r5
 8008564:	fa03 f000 	lsl.w	r0, r3, r0
 8008568:	9b04      	ldr	r3, [sp, #16]
 800856a:	4303      	orrs	r3, r0
 800856c:	9304      	str	r3, [sp, #16]
 800856e:	f108 0801 	add.w	r8, r8, #1
 8008572:	f898 1000 	ldrb.w	r1, [r8]
 8008576:	4829      	ldr	r0, [pc, #164]	; (800861c <_vfiprintf_r+0x220>)
 8008578:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800857c:	2206      	movs	r2, #6
 800857e:	f108 0701 	add.w	r7, r8, #1
 8008582:	f7f7 fe2d 	bl	80001e0 <memchr>
 8008586:	2800      	cmp	r0, #0
 8008588:	d034      	beq.n	80085f4 <_vfiprintf_r+0x1f8>
 800858a:	4b25      	ldr	r3, [pc, #148]	; (8008620 <_vfiprintf_r+0x224>)
 800858c:	bb03      	cbnz	r3, 80085d0 <_vfiprintf_r+0x1d4>
 800858e:	9b03      	ldr	r3, [sp, #12]
 8008590:	3307      	adds	r3, #7
 8008592:	f023 0307 	bic.w	r3, r3, #7
 8008596:	3308      	adds	r3, #8
 8008598:	9303      	str	r3, [sp, #12]
 800859a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800859c:	444b      	add	r3, r9
 800859e:	9309      	str	r3, [sp, #36]	; 0x24
 80085a0:	e74c      	b.n	800843c <_vfiprintf_r+0x40>
 80085a2:	fb00 3202 	mla	r2, r0, r2, r3
 80085a6:	2101      	movs	r1, #1
 80085a8:	e786      	b.n	80084b8 <_vfiprintf_r+0xbc>
 80085aa:	2300      	movs	r3, #0
 80085ac:	9305      	str	r3, [sp, #20]
 80085ae:	4618      	mov	r0, r3
 80085b0:	250a      	movs	r5, #10
 80085b2:	4688      	mov	r8, r1
 80085b4:	3101      	adds	r1, #1
 80085b6:	f898 2000 	ldrb.w	r2, [r8]
 80085ba:	3a30      	subs	r2, #48	; 0x30
 80085bc:	2a09      	cmp	r2, #9
 80085be:	d903      	bls.n	80085c8 <_vfiprintf_r+0x1cc>
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d0c5      	beq.n	8008550 <_vfiprintf_r+0x154>
 80085c4:	9005      	str	r0, [sp, #20]
 80085c6:	e7c3      	b.n	8008550 <_vfiprintf_r+0x154>
 80085c8:	fb05 2000 	mla	r0, r5, r0, r2
 80085cc:	2301      	movs	r3, #1
 80085ce:	e7f0      	b.n	80085b2 <_vfiprintf_r+0x1b6>
 80085d0:	ab03      	add	r3, sp, #12
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	4622      	mov	r2, r4
 80085d6:	4b13      	ldr	r3, [pc, #76]	; (8008624 <_vfiprintf_r+0x228>)
 80085d8:	a904      	add	r1, sp, #16
 80085da:	4630      	mov	r0, r6
 80085dc:	f7fd fd94 	bl	8006108 <_printf_float>
 80085e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80085e4:	4681      	mov	r9, r0
 80085e6:	d1d8      	bne.n	800859a <_vfiprintf_r+0x19e>
 80085e8:	89a3      	ldrh	r3, [r4, #12]
 80085ea:	065b      	lsls	r3, r3, #25
 80085ec:	f53f af7d 	bmi.w	80084ea <_vfiprintf_r+0xee>
 80085f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085f2:	e77c      	b.n	80084ee <_vfiprintf_r+0xf2>
 80085f4:	ab03      	add	r3, sp, #12
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	4622      	mov	r2, r4
 80085fa:	4b0a      	ldr	r3, [pc, #40]	; (8008624 <_vfiprintf_r+0x228>)
 80085fc:	a904      	add	r1, sp, #16
 80085fe:	4630      	mov	r0, r6
 8008600:	f7fe f838 	bl	8006674 <_printf_i>
 8008604:	e7ec      	b.n	80085e0 <_vfiprintf_r+0x1e4>
 8008606:	bf00      	nop
 8008608:	080091fc 	.word	0x080091fc
 800860c:	0800933c 	.word	0x0800933c
 8008610:	0800921c 	.word	0x0800921c
 8008614:	080091dc 	.word	0x080091dc
 8008618:	08009342 	.word	0x08009342
 800861c:	08009346 	.word	0x08009346
 8008620:	08006109 	.word	0x08006109
 8008624:	080083d9 	.word	0x080083d9

08008628 <lflush>:
 8008628:	8983      	ldrh	r3, [r0, #12]
 800862a:	f003 0309 	and.w	r3, r3, #9
 800862e:	2b09      	cmp	r3, #9
 8008630:	d101      	bne.n	8008636 <lflush+0xe>
 8008632:	f7ff b9bd 	b.w	80079b0 <fflush>
 8008636:	2000      	movs	r0, #0
 8008638:	4770      	bx	lr
	...

0800863c <__srefill_r>:
 800863c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863e:	460c      	mov	r4, r1
 8008640:	4605      	mov	r5, r0
 8008642:	b118      	cbz	r0, 800864c <__srefill_r+0x10>
 8008644:	6983      	ldr	r3, [r0, #24]
 8008646:	b90b      	cbnz	r3, 800864c <__srefill_r+0x10>
 8008648:	f7ff fa04 	bl	8007a54 <__sinit>
 800864c:	4b3b      	ldr	r3, [pc, #236]	; (800873c <__srefill_r+0x100>)
 800864e:	429c      	cmp	r4, r3
 8008650:	d10a      	bne.n	8008668 <__srefill_r+0x2c>
 8008652:	686c      	ldr	r4, [r5, #4]
 8008654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008658:	2300      	movs	r3, #0
 800865a:	6063      	str	r3, [r4, #4]
 800865c:	b293      	uxth	r3, r2
 800865e:	069e      	lsls	r6, r3, #26
 8008660:	d50c      	bpl.n	800867c <__srefill_r+0x40>
 8008662:	f04f 30ff 	mov.w	r0, #4294967295
 8008666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008668:	4b35      	ldr	r3, [pc, #212]	; (8008740 <__srefill_r+0x104>)
 800866a:	429c      	cmp	r4, r3
 800866c:	d101      	bne.n	8008672 <__srefill_r+0x36>
 800866e:	68ac      	ldr	r4, [r5, #8]
 8008670:	e7f0      	b.n	8008654 <__srefill_r+0x18>
 8008672:	4b34      	ldr	r3, [pc, #208]	; (8008744 <__srefill_r+0x108>)
 8008674:	429c      	cmp	r4, r3
 8008676:	bf08      	it	eq
 8008678:	68ec      	ldreq	r4, [r5, #12]
 800867a:	e7eb      	b.n	8008654 <__srefill_r+0x18>
 800867c:	0758      	lsls	r0, r3, #29
 800867e:	d448      	bmi.n	8008712 <__srefill_r+0xd6>
 8008680:	06d9      	lsls	r1, r3, #27
 8008682:	d405      	bmi.n	8008690 <__srefill_r+0x54>
 8008684:	2309      	movs	r3, #9
 8008686:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800868a:	602b      	str	r3, [r5, #0]
 800868c:	81a2      	strh	r2, [r4, #12]
 800868e:	e7e8      	b.n	8008662 <__srefill_r+0x26>
 8008690:	071a      	lsls	r2, r3, #28
 8008692:	d50b      	bpl.n	80086ac <__srefill_r+0x70>
 8008694:	4621      	mov	r1, r4
 8008696:	4628      	mov	r0, r5
 8008698:	f7ff f960 	bl	800795c <_fflush_r>
 800869c:	2800      	cmp	r0, #0
 800869e:	d1e0      	bne.n	8008662 <__srefill_r+0x26>
 80086a0:	89a3      	ldrh	r3, [r4, #12]
 80086a2:	60a0      	str	r0, [r4, #8]
 80086a4:	f023 0308 	bic.w	r3, r3, #8
 80086a8:	81a3      	strh	r3, [r4, #12]
 80086aa:	61a0      	str	r0, [r4, #24]
 80086ac:	89a3      	ldrh	r3, [r4, #12]
 80086ae:	f043 0304 	orr.w	r3, r3, #4
 80086b2:	81a3      	strh	r3, [r4, #12]
 80086b4:	6923      	ldr	r3, [r4, #16]
 80086b6:	b91b      	cbnz	r3, 80086c0 <__srefill_r+0x84>
 80086b8:	4621      	mov	r1, r4
 80086ba:	4628      	mov	r0, r5
 80086bc:	f7ff faa2 	bl	8007c04 <__smakebuf_r>
 80086c0:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80086c4:	b2be      	uxth	r6, r7
 80086c6:	07b3      	lsls	r3, r6, #30
 80086c8:	d00f      	beq.n	80086ea <__srefill_r+0xae>
 80086ca:	2301      	movs	r3, #1
 80086cc:	81a3      	strh	r3, [r4, #12]
 80086ce:	4b1e      	ldr	r3, [pc, #120]	; (8008748 <__srefill_r+0x10c>)
 80086d0:	491e      	ldr	r1, [pc, #120]	; (800874c <__srefill_r+0x110>)
 80086d2:	6818      	ldr	r0, [r3, #0]
 80086d4:	f006 0609 	and.w	r6, r6, #9
 80086d8:	f7ff fa28 	bl	8007b2c <_fwalk>
 80086dc:	2e09      	cmp	r6, #9
 80086de:	81a7      	strh	r7, [r4, #12]
 80086e0:	d103      	bne.n	80086ea <__srefill_r+0xae>
 80086e2:	4621      	mov	r1, r4
 80086e4:	4628      	mov	r0, r5
 80086e6:	f7ff f8b1 	bl	800784c <__sflush_r>
 80086ea:	6922      	ldr	r2, [r4, #16]
 80086ec:	6022      	str	r2, [r4, #0]
 80086ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80086f0:	6963      	ldr	r3, [r4, #20]
 80086f2:	6a21      	ldr	r1, [r4, #32]
 80086f4:	4628      	mov	r0, r5
 80086f6:	47b0      	blx	r6
 80086f8:	2800      	cmp	r0, #0
 80086fa:	6060      	str	r0, [r4, #4]
 80086fc:	dc1c      	bgt.n	8008738 <__srefill_r+0xfc>
 80086fe:	89a3      	ldrh	r3, [r4, #12]
 8008700:	bf17      	itett	ne
 8008702:	2200      	movne	r2, #0
 8008704:	f043 0320 	orreq.w	r3, r3, #32
 8008708:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 800870c:	6062      	strne	r2, [r4, #4]
 800870e:	81a3      	strh	r3, [r4, #12]
 8008710:	e7a7      	b.n	8008662 <__srefill_r+0x26>
 8008712:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008714:	2900      	cmp	r1, #0
 8008716:	d0cd      	beq.n	80086b4 <__srefill_r+0x78>
 8008718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800871c:	4299      	cmp	r1, r3
 800871e:	d002      	beq.n	8008726 <__srefill_r+0xea>
 8008720:	4628      	mov	r0, r5
 8008722:	f7ff fd95 	bl	8008250 <_free_r>
 8008726:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008728:	6063      	str	r3, [r4, #4]
 800872a:	2000      	movs	r0, #0
 800872c:	6360      	str	r0, [r4, #52]	; 0x34
 800872e:	2b00      	cmp	r3, #0
 8008730:	d0c0      	beq.n	80086b4 <__srefill_r+0x78>
 8008732:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008738:	2000      	movs	r0, #0
 800873a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800873c:	080091fc 	.word	0x080091fc
 8008740:	0800921c 	.word	0x0800921c
 8008744:	080091dc 	.word	0x080091dc
 8008748:	08009198 	.word	0x08009198
 800874c:	08008629 	.word	0x08008629

08008750 <_sbrk_r>:
 8008750:	b538      	push	{r3, r4, r5, lr}
 8008752:	4c06      	ldr	r4, [pc, #24]	; (800876c <_sbrk_r+0x1c>)
 8008754:	2300      	movs	r3, #0
 8008756:	4605      	mov	r5, r0
 8008758:	4608      	mov	r0, r1
 800875a:	6023      	str	r3, [r4, #0]
 800875c:	f7f8 fbe6 	bl	8000f2c <_sbrk>
 8008760:	1c43      	adds	r3, r0, #1
 8008762:	d102      	bne.n	800876a <_sbrk_r+0x1a>
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	b103      	cbz	r3, 800876a <_sbrk_r+0x1a>
 8008768:	602b      	str	r3, [r5, #0]
 800876a:	bd38      	pop	{r3, r4, r5, pc}
 800876c:	2000084c 	.word	0x2000084c

08008770 <__sread>:
 8008770:	b510      	push	{r4, lr}
 8008772:	460c      	mov	r4, r1
 8008774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008778:	f000 f8a8 	bl	80088cc <_read_r>
 800877c:	2800      	cmp	r0, #0
 800877e:	bfab      	itete	ge
 8008780:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008782:	89a3      	ldrhlt	r3, [r4, #12]
 8008784:	181b      	addge	r3, r3, r0
 8008786:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800878a:	bfac      	ite	ge
 800878c:	6563      	strge	r3, [r4, #84]	; 0x54
 800878e:	81a3      	strhlt	r3, [r4, #12]
 8008790:	bd10      	pop	{r4, pc}

08008792 <__swrite>:
 8008792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008796:	461f      	mov	r7, r3
 8008798:	898b      	ldrh	r3, [r1, #12]
 800879a:	05db      	lsls	r3, r3, #23
 800879c:	4605      	mov	r5, r0
 800879e:	460c      	mov	r4, r1
 80087a0:	4616      	mov	r6, r2
 80087a2:	d505      	bpl.n	80087b0 <__swrite+0x1e>
 80087a4:	2302      	movs	r3, #2
 80087a6:	2200      	movs	r2, #0
 80087a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ac:	f000 f868 	bl	8008880 <_lseek_r>
 80087b0:	89a3      	ldrh	r3, [r4, #12]
 80087b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087ba:	81a3      	strh	r3, [r4, #12]
 80087bc:	4632      	mov	r2, r6
 80087be:	463b      	mov	r3, r7
 80087c0:	4628      	mov	r0, r5
 80087c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087c6:	f000 b817 	b.w	80087f8 <_write_r>

080087ca <__sseek>:
 80087ca:	b510      	push	{r4, lr}
 80087cc:	460c      	mov	r4, r1
 80087ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087d2:	f000 f855 	bl	8008880 <_lseek_r>
 80087d6:	1c43      	adds	r3, r0, #1
 80087d8:	89a3      	ldrh	r3, [r4, #12]
 80087da:	bf15      	itete	ne
 80087dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80087de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087e6:	81a3      	strheq	r3, [r4, #12]
 80087e8:	bf18      	it	ne
 80087ea:	81a3      	strhne	r3, [r4, #12]
 80087ec:	bd10      	pop	{r4, pc}

080087ee <__sclose>:
 80087ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087f2:	f000 b813 	b.w	800881c <_close_r>
	...

080087f8 <_write_r>:
 80087f8:	b538      	push	{r3, r4, r5, lr}
 80087fa:	4c07      	ldr	r4, [pc, #28]	; (8008818 <_write_r+0x20>)
 80087fc:	4605      	mov	r5, r0
 80087fe:	4608      	mov	r0, r1
 8008800:	4611      	mov	r1, r2
 8008802:	2200      	movs	r2, #0
 8008804:	6022      	str	r2, [r4, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	f7f8 fb82 	bl	8000f10 <_write>
 800880c:	1c43      	adds	r3, r0, #1
 800880e:	d102      	bne.n	8008816 <_write_r+0x1e>
 8008810:	6823      	ldr	r3, [r4, #0]
 8008812:	b103      	cbz	r3, 8008816 <_write_r+0x1e>
 8008814:	602b      	str	r3, [r5, #0]
 8008816:	bd38      	pop	{r3, r4, r5, pc}
 8008818:	2000084c 	.word	0x2000084c

0800881c <_close_r>:
 800881c:	b538      	push	{r3, r4, r5, lr}
 800881e:	4c06      	ldr	r4, [pc, #24]	; (8008838 <_close_r+0x1c>)
 8008820:	2300      	movs	r3, #0
 8008822:	4605      	mov	r5, r0
 8008824:	4608      	mov	r0, r1
 8008826:	6023      	str	r3, [r4, #0]
 8008828:	f7f8 fb9a 	bl	8000f60 <_close>
 800882c:	1c43      	adds	r3, r0, #1
 800882e:	d102      	bne.n	8008836 <_close_r+0x1a>
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	b103      	cbz	r3, 8008836 <_close_r+0x1a>
 8008834:	602b      	str	r3, [r5, #0]
 8008836:	bd38      	pop	{r3, r4, r5, pc}
 8008838:	2000084c 	.word	0x2000084c

0800883c <_fstat_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	4c07      	ldr	r4, [pc, #28]	; (800885c <_fstat_r+0x20>)
 8008840:	2300      	movs	r3, #0
 8008842:	4605      	mov	r5, r0
 8008844:	4608      	mov	r0, r1
 8008846:	4611      	mov	r1, r2
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	f7f8 fb8c 	bl	8000f66 <_fstat>
 800884e:	1c43      	adds	r3, r0, #1
 8008850:	d102      	bne.n	8008858 <_fstat_r+0x1c>
 8008852:	6823      	ldr	r3, [r4, #0]
 8008854:	b103      	cbz	r3, 8008858 <_fstat_r+0x1c>
 8008856:	602b      	str	r3, [r5, #0]
 8008858:	bd38      	pop	{r3, r4, r5, pc}
 800885a:	bf00      	nop
 800885c:	2000084c 	.word	0x2000084c

08008860 <_isatty_r>:
 8008860:	b538      	push	{r3, r4, r5, lr}
 8008862:	4c06      	ldr	r4, [pc, #24]	; (800887c <_isatty_r+0x1c>)
 8008864:	2300      	movs	r3, #0
 8008866:	4605      	mov	r5, r0
 8008868:	4608      	mov	r0, r1
 800886a:	6023      	str	r3, [r4, #0]
 800886c:	f7f8 fb80 	bl	8000f70 <_isatty>
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	d102      	bne.n	800887a <_isatty_r+0x1a>
 8008874:	6823      	ldr	r3, [r4, #0]
 8008876:	b103      	cbz	r3, 800887a <_isatty_r+0x1a>
 8008878:	602b      	str	r3, [r5, #0]
 800887a:	bd38      	pop	{r3, r4, r5, pc}
 800887c:	2000084c 	.word	0x2000084c

08008880 <_lseek_r>:
 8008880:	b538      	push	{r3, r4, r5, lr}
 8008882:	4c07      	ldr	r4, [pc, #28]	; (80088a0 <_lseek_r+0x20>)
 8008884:	4605      	mov	r5, r0
 8008886:	4608      	mov	r0, r1
 8008888:	4611      	mov	r1, r2
 800888a:	2200      	movs	r2, #0
 800888c:	6022      	str	r2, [r4, #0]
 800888e:	461a      	mov	r2, r3
 8008890:	f7f8 fb70 	bl	8000f74 <_lseek>
 8008894:	1c43      	adds	r3, r0, #1
 8008896:	d102      	bne.n	800889e <_lseek_r+0x1e>
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	b103      	cbz	r3, 800889e <_lseek_r+0x1e>
 800889c:	602b      	str	r3, [r5, #0]
 800889e:	bd38      	pop	{r3, r4, r5, pc}
 80088a0:	2000084c 	.word	0x2000084c

080088a4 <__ascii_mbtowc>:
 80088a4:	b082      	sub	sp, #8
 80088a6:	b901      	cbnz	r1, 80088aa <__ascii_mbtowc+0x6>
 80088a8:	a901      	add	r1, sp, #4
 80088aa:	b142      	cbz	r2, 80088be <__ascii_mbtowc+0x1a>
 80088ac:	b14b      	cbz	r3, 80088c2 <__ascii_mbtowc+0x1e>
 80088ae:	7813      	ldrb	r3, [r2, #0]
 80088b0:	600b      	str	r3, [r1, #0]
 80088b2:	7812      	ldrb	r2, [r2, #0]
 80088b4:	1c10      	adds	r0, r2, #0
 80088b6:	bf18      	it	ne
 80088b8:	2001      	movne	r0, #1
 80088ba:	b002      	add	sp, #8
 80088bc:	4770      	bx	lr
 80088be:	4610      	mov	r0, r2
 80088c0:	e7fb      	b.n	80088ba <__ascii_mbtowc+0x16>
 80088c2:	f06f 0001 	mvn.w	r0, #1
 80088c6:	e7f8      	b.n	80088ba <__ascii_mbtowc+0x16>

080088c8 <__malloc_lock>:
 80088c8:	4770      	bx	lr

080088ca <__malloc_unlock>:
 80088ca:	4770      	bx	lr

080088cc <_read_r>:
 80088cc:	b538      	push	{r3, r4, r5, lr}
 80088ce:	4c07      	ldr	r4, [pc, #28]	; (80088ec <_read_r+0x20>)
 80088d0:	4605      	mov	r5, r0
 80088d2:	4608      	mov	r0, r1
 80088d4:	4611      	mov	r1, r2
 80088d6:	2200      	movs	r2, #0
 80088d8:	6022      	str	r2, [r4, #0]
 80088da:	461a      	mov	r2, r3
 80088dc:	f7f8 fb11 	bl	8000f02 <_read>
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	d102      	bne.n	80088ea <_read_r+0x1e>
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	b103      	cbz	r3, 80088ea <_read_r+0x1e>
 80088e8:	602b      	str	r3, [r5, #0]
 80088ea:	bd38      	pop	{r3, r4, r5, pc}
 80088ec:	2000084c 	.word	0x2000084c

080088f0 <__ascii_wctomb>:
 80088f0:	b149      	cbz	r1, 8008906 <__ascii_wctomb+0x16>
 80088f2:	2aff      	cmp	r2, #255	; 0xff
 80088f4:	bf85      	ittet	hi
 80088f6:	238a      	movhi	r3, #138	; 0x8a
 80088f8:	6003      	strhi	r3, [r0, #0]
 80088fa:	700a      	strbls	r2, [r1, #0]
 80088fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8008900:	bf98      	it	ls
 8008902:	2001      	movls	r0, #1
 8008904:	4770      	bx	lr
 8008906:	4608      	mov	r0, r1
 8008908:	4770      	bx	lr
	...

0800890c <_init>:
 800890c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800890e:	bf00      	nop
 8008910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008912:	bc08      	pop	{r3}
 8008914:	469e      	mov	lr, r3
 8008916:	4770      	bx	lr

08008918 <_fini>:
 8008918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891a:	bf00      	nop
 800891c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800891e:	bc08      	pop	{r3}
 8008920:	469e      	mov	lr, r3
 8008922:	4770      	bx	lr
 8008924:	0000      	movs	r0, r0
	...
